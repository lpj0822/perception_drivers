/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2019年 05月 12日 星期日 17:25:08 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_delphi_srr3_dbc
 */
typedef unsigned char ubyte;
typedef unsigned short uword;
typedef unsigned long ulong;
/**
 * @defgroup DB_delphi_srr3_dbc CAN Database delphi_srr3_dbc
 *
 * Path to file: output/delphi_srr3_dbc.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_IECU_Time_Sync Message IECU_Time_Sync (0x4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_Time_Sync_TimeSync_Trig_Counter
 * - \ref SIG_IECU_Time_Sync_TimeSync_Timer_Count
 *
 * @{
 */

/**
 * Message IECU_Time_Sync configuration tuple.
 */
#define MSG_IECU_Time_Sync                          0x4, 0, 8

/**
 * Message IECU_Time_Sync id.
 */
#define ID_IECU_Time_Sync                           0x4

/**
 * Message IECU_Time_Sync extended id bit.
 */
#define EXT_IECU_Time_Sync                          0

/**
 * Message IECU_Time_Sync Data Length Count.
 */
#define DLC_IECU_Time_Sync                          8

/**
 * Message IECU_Time_Sync cycle time.
 */
#define CYCLE_IECU_Time_Sync                        0

/**
 * Message IECU_Time_Sync fast cycle time.
 */
#define FAST_IECU_Time_Sync                         0

/**
 * Initialise message IECU_Time_Sync buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_Time_Sync(buf) { \
	INITSIG_IECU_Time_Sync_TimeSync_Trig_Counter(buf); \
	INITSIG_IECU_Time_Sync_TimeSync_Timer_Count(buf); \
}

/**
 * @defgroup MSG_IECU_GW_TCU_1F5h Message IECU_GW_TCU_1F5h (0x1f5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_GW_TCU_1F5h_TrShftLvrPos
 * - \ref SIG_IECU_GW_TCU_1F5h_TrShftLvrPosV
 *
 * @{
 */

/**
 * Message IECU_GW_TCU_1F5h configuration tuple.
 */
#define MSG_IECU_GW_TCU_1F5h                        0x1f5, 0, 8

/**
 * Message IECU_GW_TCU_1F5h id.
 */
#define ID_IECU_GW_TCU_1F5h                         0x1f5

/**
 * Message IECU_GW_TCU_1F5h extended id bit.
 */
#define EXT_IECU_GW_TCU_1F5h                        0

/**
 * Message IECU_GW_TCU_1F5h Data Length Count.
 */
#define DLC_IECU_GW_TCU_1F5h                        8

/**
 * Message IECU_GW_TCU_1F5h cycle time.
 */
#define CYCLE_IECU_GW_TCU_1F5h                      0

/**
 * Message IECU_GW_TCU_1F5h fast cycle time.
 */
#define FAST_IECU_GW_TCU_1F5h                       0

/**
 * Initialise message IECU_GW_TCU_1F5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_GW_TCU_1F5h(buf) { \
	INITSIG_IECU_GW_TCU_1F5h_TrShftLvrPos(buf); \
	INITSIG_IECU_GW_TCU_1F5h_TrShftLvrPosV(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_SAS_1E5h Message IECU_SAS_1E5h (0x1e5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_SAS_1E5h_StrgWhlAngV
 * - \ref SIG_IECU_SAS_1E5h_StrgWhlAng
 *
 * @{
 */

/**
 * Message IECU_SAS_1E5h configuration tuple.
 */
#define MSG_IECU_SAS_1E5h                           0x1e5, 0, 8

/**
 * Message IECU_SAS_1E5h id.
 */
#define ID_IECU_SAS_1E5h                            0x1e5

/**
 * Message IECU_SAS_1E5h extended id bit.
 */
#define EXT_IECU_SAS_1E5h                           0

/**
 * Message IECU_SAS_1E5h Data Length Count.
 */
#define DLC_IECU_SAS_1E5h                           8

/**
 * Message IECU_SAS_1E5h cycle time.
 */
#define CYCLE_IECU_SAS_1E5h                         0

/**
 * Message IECU_SAS_1E5h fast cycle time.
 */
#define FAST_IECU_SAS_1E5h                          0

/**
 * Initialise message IECU_SAS_1E5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_SAS_1E5h(buf) { \
	INITSIG_IECU_SAS_1E5h_StrgWhlAngV(buf); \
	INITSIG_IECU_SAS_1E5h_StrgWhlAng(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_ESC_1E9h Message IECU_ESC_1E9h (0x1e9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_ESC_1E9h_VehDynYawRateV
 * - \ref SIG_IECU_ESC_1E9h_VehDynYawRate
 *
 * @{
 */

/**
 * Message IECU_ESC_1E9h configuration tuple.
 */
#define MSG_IECU_ESC_1E9h                           0x1e9, 0, 8

/**
 * Message IECU_ESC_1E9h id.
 */
#define ID_IECU_ESC_1E9h                            0x1e9

/**
 * Message IECU_ESC_1E9h extended id bit.
 */
#define EXT_IECU_ESC_1E9h                           0

/**
 * Message IECU_ESC_1E9h Data Length Count.
 */
#define DLC_IECU_ESC_1E9h                           8

/**
 * Message IECU_ESC_1E9h cycle time.
 */
#define CYCLE_IECU_ESC_1E9h                         0

/**
 * Message IECU_ESC_1E9h fast cycle time.
 */
#define FAST_IECU_ESC_1E9h                          0

/**
 * Initialise message IECU_ESC_1E9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_ESC_1E9h(buf) { \
	INITSIG_IECU_ESC_1E9h_VehDynYawRateV(buf); \
	INITSIG_IECU_ESC_1E9h_VehDynYawRate(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_ESC_1FCh Message IECU_ESC_1FCh (0x1fc)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_ESC_1FCh_LongdAccSnsrVal
 * - \ref SIG_IECU_ESC_1FCh_LatAccSnsrVal
 *
 * @{
 */

/**
 * Message IECU_ESC_1FCh configuration tuple.
 */
#define MSG_IECU_ESC_1FCh                           0x1fc, 0, 8

/**
 * Message IECU_ESC_1FCh id.
 */
#define ID_IECU_ESC_1FCh                            0x1fc

/**
 * Message IECU_ESC_1FCh extended id bit.
 */
#define EXT_IECU_ESC_1FCh                           0

/**
 * Message IECU_ESC_1FCh Data Length Count.
 */
#define DLC_IECU_ESC_1FCh                           8

/**
 * Message IECU_ESC_1FCh cycle time.
 */
#define CYCLE_IECU_ESC_1FCh                         0

/**
 * Message IECU_ESC_1FCh fast cycle time.
 */
#define FAST_IECU_ESC_1FCh                          0

/**
 * Initialise message IECU_ESC_1FCh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_ESC_1FCh(buf) { \
	INITSIG_IECU_ESC_1FCh_LongdAccSnsrVal(buf); \
	INITSIG_IECU_ESC_1FCh_LatAccSnsrVal(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_ESC_23Ch Message IECU_ESC_23Ch (0x23c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_ESC_23Ch_VehicleSpeedStatus
 * - \ref SIG_IECU_ESC_23Ch_VehicleSpeed
 *
 * @{
 */

/**
 * Message IECU_ESC_23Ch configuration tuple.
 */
#define MSG_IECU_ESC_23Ch                           0x23c, 0, 8

/**
 * Message IECU_ESC_23Ch id.
 */
#define ID_IECU_ESC_23Ch                            0x23c

/**
 * Message IECU_ESC_23Ch extended id bit.
 */
#define EXT_IECU_ESC_23Ch                           0

/**
 * Message IECU_ESC_23Ch Data Length Count.
 */
#define DLC_IECU_ESC_23Ch                           8

/**
 * Message IECU_ESC_23Ch cycle time.
 */
#define CYCLE_IECU_ESC_23Ch                         0

/**
 * Message IECU_ESC_23Ch fast cycle time.
 */
#define FAST_IECU_ESC_23Ch                          0

/**
 * Initialise message IECU_ESC_23Ch buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_ESC_23Ch(buf) { \
	INITSIG_IECU_ESC_23Ch_VehicleSpeedStatus(buf); \
	INITSIG_IECU_ESC_23Ch_VehicleSpeed(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_Tester_7DFh Message IECU_Tester_7DFh (0x7df)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_Tester_7DFh_TesterDiagRequestData_Fun
 *
 * @{
 */

/**
 * Message IECU_Tester_7DFh configuration tuple.
 */
#define MSG_IECU_Tester_7DFh                        0x7df, 0, 8

/**
 * Message IECU_Tester_7DFh id.
 */
#define ID_IECU_Tester_7DFh                         0x7df

/**
 * Message IECU_Tester_7DFh extended id bit.
 */
#define EXT_IECU_Tester_7DFh                        0

/**
 * Message IECU_Tester_7DFh Data Length Count.
 */
#define DLC_IECU_Tester_7DFh                        8

/**
 * Message IECU_Tester_7DFh cycle time.
 */
#define CYCLE_IECU_Tester_7DFh                      0

/**
 * Message IECU_Tester_7DFh fast cycle time.
 */
#define FAST_IECU_Tester_7DFh                       0

/**
 * Initialise message IECU_Tester_7DFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_Tester_7DFh(buf) { \
	INITSIG_IECU_Tester_7DFh_TesterDiagRequestData_Fun(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_Tester_704h Message IECU_Tester_704h (0x704)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_Tester_704h_TesterDiagRequestData_SRR_FL
 *
 * @{
 */

/**
 * Message IECU_Tester_704h configuration tuple.
 */
#define MSG_IECU_Tester_704h                        0x704, 0, 8

/**
 * Message IECU_Tester_704h id.
 */
#define ID_IECU_Tester_704h                         0x704

/**
 * Message IECU_Tester_704h extended id bit.
 */
#define EXT_IECU_Tester_704h                        0

/**
 * Message IECU_Tester_704h Data Length Count.
 */
#define DLC_IECU_Tester_704h                        8

/**
 * Message IECU_Tester_704h cycle time.
 */
#define CYCLE_IECU_Tester_704h                      0

/**
 * Message IECU_Tester_704h fast cycle time.
 */
#define FAST_IECU_Tester_704h                       0

/**
 * Initialise message IECU_Tester_704h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_Tester_704h(buf) { \
	INITSIG_IECU_Tester_704h_TesterDiagRequestData_SRR_FL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_784h Message SRR_FL_784h (0x784)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_784h_SRR_FLDiagResponseData
 *
 * @{
 */

/**
 * Message SRR_FL_784h configuration tuple.
 */
#define MSG_SRR_FL_784h                             0x784, 0, 8

/**
 * Message SRR_FL_784h id.
 */
#define ID_SRR_FL_784h                              0x784

/**
 * Message SRR_FL_784h extended id bit.
 */
#define EXT_SRR_FL_784h                             0

/**
 * Message SRR_FL_784h Data Length Count.
 */
#define DLC_SRR_FL_784h                             8

/**
 * Message SRR_FL_784h cycle time.
 */
#define CYCLE_SRR_FL_784h                           0

/**
 * Message SRR_FL_784h fast cycle time.
 */
#define FAST_SRR_FL_784h                            0

/**
 * Initialise message SRR_FL_784h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_784h(buf) { \
	INITSIG_SRR_FL_784h_SRR_FLDiagResponseData(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_390h Message SRR_FL_390h (0x390)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_390h_RdrStsChks_FL
 * - \ref SIG_SRR_FL_390h_RdrStsCntr_FL
 * - \ref SIG_SRR_FL_390h_RdrStsIfVersMajor_FL
 * - \ref SIG_SRR_FL_390h_RdrStsIfVersMiddle_FL
 * - \ref SIG_SRR_FL_390h_RdrStsIfVersMinor_FL
 * - \ref SIG_SRR_FL_390h_RdrStsTiStamp_FL
 *
 * @{
 */

/**
 * Message SRR_FL_390h configuration tuple.
 */
#define MSG_SRR_FL_390h                             0x390, 0, 8

/**
 * Message SRR_FL_390h id.
 */
#define ID_SRR_FL_390h                              0x390

/**
 * Message SRR_FL_390h extended id bit.
 */
#define EXT_SRR_FL_390h                             0

/**
 * Message SRR_FL_390h Data Length Count.
 */
#define DLC_SRR_FL_390h                             8

/**
 * Message SRR_FL_390h cycle time.
 */
#define CYCLE_SRR_FL_390h                           0

/**
 * Message SRR_FL_390h fast cycle time.
 */
#define FAST_SRR_FL_390h                            0

/**
 * Initialise message SRR_FL_390h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_390h(buf) { \
	INITSIG_SRR_FL_390h_RdrStsChks_FL(buf); \
	INITSIG_SRR_FL_390h_RdrStsCntr_FL(buf); \
	INITSIG_SRR_FL_390h_RdrStsIfVersMajor_FL(buf); \
	INITSIG_SRR_FL_390h_RdrStsIfVersMiddle_FL(buf); \
	INITSIG_SRR_FL_390h_RdrStsIfVersMinor_FL(buf); \
	INITSIG_SRR_FL_390h_RdrStsTiStamp_FL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_391h Message SRR_FL_391h (0x391)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_391h_Genrl_SnsrLatency_FL
 * - \ref SIG_SRR_FL_391h_RdrSysSts_FL
 *
 * @{
 */

/**
 * Message SRR_FL_391h configuration tuple.
 */
#define MSG_SRR_FL_391h                             0x391, 0, 8

/**
 * Message SRR_FL_391h id.
 */
#define ID_SRR_FL_391h                              0x391

/**
 * Message SRR_FL_391h extended id bit.
 */
#define EXT_SRR_FL_391h                             0

/**
 * Message SRR_FL_391h Data Length Count.
 */
#define DLC_SRR_FL_391h                             8

/**
 * Message SRR_FL_391h cycle time.
 */
#define CYCLE_SRR_FL_391h                           0

/**
 * Message SRR_FL_391h fast cycle time.
 */
#define FAST_SRR_FL_391h                            0

/**
 * Initialise message SRR_FL_391h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_391h(buf) { \
	INITSIG_SRR_FL_391h_Genrl_SnsrLatency_FL(buf); \
	INITSIG_SRR_FL_391h_RdrSysSts_FL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_392h Message SRR_FL_392h (0x392)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_392h_RdrObjChks_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjCntr_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjAy_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjAx_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjCoast_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjConf_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjMtnPat_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjID_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjTyp_FL_1
 * - \ref SIG_SRR_FL_392h_RdrObjDy_FL_1
 *
 * @{
 */

/**
 * Message SRR_FL_392h configuration tuple.
 */
#define MSG_SRR_FL_392h                             0x392, 0, 8

/**
 * Message SRR_FL_392h id.
 */
#define ID_SRR_FL_392h                              0x392

/**
 * Message SRR_FL_392h extended id bit.
 */
#define EXT_SRR_FL_392h                             0

/**
 * Message SRR_FL_392h Data Length Count.
 */
#define DLC_SRR_FL_392h                             8

/**
 * Message SRR_FL_392h cycle time.
 */
#define CYCLE_SRR_FL_392h                           0

/**
 * Message SRR_FL_392h fast cycle time.
 */
#define FAST_SRR_FL_392h                            0

/**
 * Initialise message SRR_FL_392h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_392h(buf) { \
	INITSIG_SRR_FL_392h_RdrObjChks_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjCntr_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjAy_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjAx_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjCoast_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjConf_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjMtnPat_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjID_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjTyp_FL_1(buf); \
	INITSIG_SRR_FL_392h_RdrObjDy_FL_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_393h Message SRR_FL_393h (0x393)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_393h_RdrObjChks2_FL_1
 * - \ref SIG_SRR_FL_393h_RdrObjDx_FL_1
 * - \ref SIG_SRR_FL_393h_RdrObjTiAlv_FL_1
 * - \ref SIG_SRR_FL_393h_RdrObjVy_FL_1
 * - \ref SIG_SRR_FL_393h_RdrObjVx_FL_1
 * - \ref SIG_SRR_FL_393h_RdrObjWth_FL_1
 * - \ref SIG_SRR_FL_393h_RdrObjHeading_FL_1
 *
 * @{
 */

/**
 * Message SRR_FL_393h configuration tuple.
 */
#define MSG_SRR_FL_393h                             0x393, 0, 8

/**
 * Message SRR_FL_393h id.
 */
#define ID_SRR_FL_393h                              0x393

/**
 * Message SRR_FL_393h extended id bit.
 */
#define EXT_SRR_FL_393h                             0

/**
 * Message SRR_FL_393h Data Length Count.
 */
#define DLC_SRR_FL_393h                             8

/**
 * Message SRR_FL_393h cycle time.
 */
#define CYCLE_SRR_FL_393h                           0

/**
 * Message SRR_FL_393h fast cycle time.
 */
#define FAST_SRR_FL_393h                            0

/**
 * Initialise message SRR_FL_393h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_393h(buf) { \
	INITSIG_SRR_FL_393h_RdrObjChks2_FL_1(buf); \
	INITSIG_SRR_FL_393h_RdrObjDx_FL_1(buf); \
	INITSIG_SRR_FL_393h_RdrObjTiAlv_FL_1(buf); \
	INITSIG_SRR_FL_393h_RdrObjVy_FL_1(buf); \
	INITSIG_SRR_FL_393h_RdrObjVx_FL_1(buf); \
	INITSIG_SRR_FL_393h_RdrObjWth_FL_1(buf); \
	INITSIG_SRR_FL_393h_RdrObjHeading_FL_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_394h Message SRR_FL_394h (0x394)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_394h_RdrObjChks_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjCntr_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjAy_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjAx_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjCoast_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjConf_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjMtnPat_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjID_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjTyp_FL_2
 * - \ref SIG_SRR_FL_394h_RdrObjDy_FL_2
 *
 * @{
 */

/**
 * Message SRR_FL_394h configuration tuple.
 */
#define MSG_SRR_FL_394h                             0x394, 0, 8

/**
 * Message SRR_FL_394h id.
 */
#define ID_SRR_FL_394h                              0x394

/**
 * Message SRR_FL_394h extended id bit.
 */
#define EXT_SRR_FL_394h                             0

/**
 * Message SRR_FL_394h Data Length Count.
 */
#define DLC_SRR_FL_394h                             8

/**
 * Message SRR_FL_394h cycle time.
 */
#define CYCLE_SRR_FL_394h                           0

/**
 * Message SRR_FL_394h fast cycle time.
 */
#define FAST_SRR_FL_394h                            0

/**
 * Initialise message SRR_FL_394h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_394h(buf) { \
	INITSIG_SRR_FL_394h_RdrObjChks_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjCntr_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjAy_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjAx_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjCoast_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjConf_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjMtnPat_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjID_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjTyp_FL_2(buf); \
	INITSIG_SRR_FL_394h_RdrObjDy_FL_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_395h Message SRR_FL_395h (0x395)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_395h_RdrObjChks2_FL_2
 * - \ref SIG_SRR_FL_395h_RdrObjDx_FL_2
 * - \ref SIG_SRR_FL_395h_RdrObjTiAlv_FL_2
 * - \ref SIG_SRR_FL_395h_RdrObjVy_FL_2
 * - \ref SIG_SRR_FL_395h_RdrObjVx_FL_2
 * - \ref SIG_SRR_FL_395h_RdrObjWth_FL_2
 * - \ref SIG_SRR_FL_395h_RdrObjHeading_FL_2
 *
 * @{
 */

/**
 * Message SRR_FL_395h configuration tuple.
 */
#define MSG_SRR_FL_395h                             0x395, 0, 8

/**
 * Message SRR_FL_395h id.
 */
#define ID_SRR_FL_395h                              0x395

/**
 * Message SRR_FL_395h extended id bit.
 */
#define EXT_SRR_FL_395h                             0

/**
 * Message SRR_FL_395h Data Length Count.
 */
#define DLC_SRR_FL_395h                             8

/**
 * Message SRR_FL_395h cycle time.
 */
#define CYCLE_SRR_FL_395h                           0

/**
 * Message SRR_FL_395h fast cycle time.
 */
#define FAST_SRR_FL_395h                            0

/**
 * Initialise message SRR_FL_395h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_395h(buf) { \
	INITSIG_SRR_FL_395h_RdrObjChks2_FL_2(buf); \
	INITSIG_SRR_FL_395h_RdrObjDx_FL_2(buf); \
	INITSIG_SRR_FL_395h_RdrObjTiAlv_FL_2(buf); \
	INITSIG_SRR_FL_395h_RdrObjVy_FL_2(buf); \
	INITSIG_SRR_FL_395h_RdrObjVx_FL_2(buf); \
	INITSIG_SRR_FL_395h_RdrObjWth_FL_2(buf); \
	INITSIG_SRR_FL_395h_RdrObjHeading_FL_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_396h Message SRR_FL_396h (0x396)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_396h_RdrObjChks_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjCntr_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjAy_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjAx_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjCoast_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjConf_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjMtnPat_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjID_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjTyp_FL_3
 * - \ref SIG_SRR_FL_396h_RdrObjDy_FL_3
 *
 * @{
 */

/**
 * Message SRR_FL_396h configuration tuple.
 */
#define MSG_SRR_FL_396h                             0x396, 0, 8

/**
 * Message SRR_FL_396h id.
 */
#define ID_SRR_FL_396h                              0x396

/**
 * Message SRR_FL_396h extended id bit.
 */
#define EXT_SRR_FL_396h                             0

/**
 * Message SRR_FL_396h Data Length Count.
 */
#define DLC_SRR_FL_396h                             8

/**
 * Message SRR_FL_396h cycle time.
 */
#define CYCLE_SRR_FL_396h                           0

/**
 * Message SRR_FL_396h fast cycle time.
 */
#define FAST_SRR_FL_396h                            0

/**
 * Initialise message SRR_FL_396h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_396h(buf) { \
	INITSIG_SRR_FL_396h_RdrObjChks_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjCntr_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjAy_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjAx_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjCoast_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjConf_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjMtnPat_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjID_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjTyp_FL_3(buf); \
	INITSIG_SRR_FL_396h_RdrObjDy_FL_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_397h Message SRR_FL_397h (0x397)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_397h_RdrObjChks2_FL_3
 * - \ref SIG_SRR_FL_397h_RdrObjDx_FL_3
 * - \ref SIG_SRR_FL_397h_RdrObjTiAlv_FL_3
 * - \ref SIG_SRR_FL_397h_RdrObjVy_FL_3
 * - \ref SIG_SRR_FL_397h_RdrObjVx_FL_3
 * - \ref SIG_SRR_FL_397h_RdrObjWth_FL_3
 * - \ref SIG_SRR_FL_397h_RdrObjHeading_FL_3
 *
 * @{
 */

/**
 * Message SRR_FL_397h configuration tuple.
 */
#define MSG_SRR_FL_397h                             0x397, 0, 8

/**
 * Message SRR_FL_397h id.
 */
#define ID_SRR_FL_397h                              0x397

/**
 * Message SRR_FL_397h extended id bit.
 */
#define EXT_SRR_FL_397h                             0

/**
 * Message SRR_FL_397h Data Length Count.
 */
#define DLC_SRR_FL_397h                             8

/**
 * Message SRR_FL_397h cycle time.
 */
#define CYCLE_SRR_FL_397h                           0

/**
 * Message SRR_FL_397h fast cycle time.
 */
#define FAST_SRR_FL_397h                            0

/**
 * Initialise message SRR_FL_397h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_397h(buf) { \
	INITSIG_SRR_FL_397h_RdrObjChks2_FL_3(buf); \
	INITSIG_SRR_FL_397h_RdrObjDx_FL_3(buf); \
	INITSIG_SRR_FL_397h_RdrObjTiAlv_FL_3(buf); \
	INITSIG_SRR_FL_397h_RdrObjVy_FL_3(buf); \
	INITSIG_SRR_FL_397h_RdrObjVx_FL_3(buf); \
	INITSIG_SRR_FL_397h_RdrObjWth_FL_3(buf); \
	INITSIG_SRR_FL_397h_RdrObjHeading_FL_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_398h Message SRR_FL_398h (0x398)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_398h_RdrObjChks_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjCntr_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjAy_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjAx_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjCoast_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjConf_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjMtnPat_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjID_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjTyp_FL_4
 * - \ref SIG_SRR_FL_398h_RdrObjDy_FL_4
 *
 * @{
 */

/**
 * Message SRR_FL_398h configuration tuple.
 */
#define MSG_SRR_FL_398h                             0x398, 0, 8

/**
 * Message SRR_FL_398h id.
 */
#define ID_SRR_FL_398h                              0x398

/**
 * Message SRR_FL_398h extended id bit.
 */
#define EXT_SRR_FL_398h                             0

/**
 * Message SRR_FL_398h Data Length Count.
 */
#define DLC_SRR_FL_398h                             8

/**
 * Message SRR_FL_398h cycle time.
 */
#define CYCLE_SRR_FL_398h                           0

/**
 * Message SRR_FL_398h fast cycle time.
 */
#define FAST_SRR_FL_398h                            0

/**
 * Initialise message SRR_FL_398h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_398h(buf) { \
	INITSIG_SRR_FL_398h_RdrObjChks_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjCntr_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjAy_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjAx_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjCoast_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjConf_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjMtnPat_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjID_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjTyp_FL_4(buf); \
	INITSIG_SRR_FL_398h_RdrObjDy_FL_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_399h Message SRR_FL_399h (0x399)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_399h_RdrObjChks2_FL_4
 * - \ref SIG_SRR_FL_399h_RdrObjDx_FL_4
 * - \ref SIG_SRR_FL_399h_RdrObjTiAlv_FL_4
 * - \ref SIG_SRR_FL_399h_RdrObjVy_FL_4
 * - \ref SIG_SRR_FL_399h_RdrObjVx_FL_4
 * - \ref SIG_SRR_FL_399h_RdrObjWth_FL_4
 * - \ref SIG_SRR_FL_399h_RdrObjHeading_FL_4
 *
 * @{
 */

/**
 * Message SRR_FL_399h configuration tuple.
 */
#define MSG_SRR_FL_399h                             0x399, 0, 8

/**
 * Message SRR_FL_399h id.
 */
#define ID_SRR_FL_399h                              0x399

/**
 * Message SRR_FL_399h extended id bit.
 */
#define EXT_SRR_FL_399h                             0

/**
 * Message SRR_FL_399h Data Length Count.
 */
#define DLC_SRR_FL_399h                             8

/**
 * Message SRR_FL_399h cycle time.
 */
#define CYCLE_SRR_FL_399h                           0

/**
 * Message SRR_FL_399h fast cycle time.
 */
#define FAST_SRR_FL_399h                            0

/**
 * Initialise message SRR_FL_399h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_399h(buf) { \
	INITSIG_SRR_FL_399h_RdrObjChks2_FL_4(buf); \
	INITSIG_SRR_FL_399h_RdrObjDx_FL_4(buf); \
	INITSIG_SRR_FL_399h_RdrObjTiAlv_FL_4(buf); \
	INITSIG_SRR_FL_399h_RdrObjVy_FL_4(buf); \
	INITSIG_SRR_FL_399h_RdrObjVx_FL_4(buf); \
	INITSIG_SRR_FL_399h_RdrObjWth_FL_4(buf); \
	INITSIG_SRR_FL_399h_RdrObjHeading_FL_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_39Ah Message SRR_FL_39Ah (0x39a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_39Ah_RdrObjChks_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjCntr_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjAy_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjAx_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjCoast_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjConf_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjMtnPat_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjID_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjTyp_FL_5
 * - \ref SIG_SRR_FL_39Ah_RdrObjDy_FL_5
 *
 * @{
 */

/**
 * Message SRR_FL_39Ah configuration tuple.
 */
#define MSG_SRR_FL_39Ah                             0x39a, 0, 8

/**
 * Message SRR_FL_39Ah id.
 */
#define ID_SRR_FL_39Ah                              0x39a

/**
 * Message SRR_FL_39Ah extended id bit.
 */
#define EXT_SRR_FL_39Ah                             0

/**
 * Message SRR_FL_39Ah Data Length Count.
 */
#define DLC_SRR_FL_39Ah                             8

/**
 * Message SRR_FL_39Ah cycle time.
 */
#define CYCLE_SRR_FL_39Ah                           0

/**
 * Message SRR_FL_39Ah fast cycle time.
 */
#define FAST_SRR_FL_39Ah                            0

/**
 * Initialise message SRR_FL_39Ah buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_39Ah(buf) { \
	INITSIG_SRR_FL_39Ah_RdrObjChks_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjCntr_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjAy_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjAx_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjCoast_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjConf_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjMtnPat_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjID_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjTyp_FL_5(buf); \
	INITSIG_SRR_FL_39Ah_RdrObjDy_FL_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_39Bh Message SRR_FL_39Bh (0x39b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_39Bh_RdrObjChks2_FL_5
 * - \ref SIG_SRR_FL_39Bh_RdrObjDx_FL_5
 * - \ref SIG_SRR_FL_39Bh_RdrObjTiAlv_FL_5
 * - \ref SIG_SRR_FL_39Bh_RdrObjVy_FL_5
 * - \ref SIG_SRR_FL_39Bh_RdrObjVx_FL_5
 * - \ref SIG_SRR_FL_39Bh_RdrObjWth_FL_5
 * - \ref SIG_SRR_FL_39Bh_RdrObjHeading_FL_5
 *
 * @{
 */

/**
 * Message SRR_FL_39Bh configuration tuple.
 */
#define MSG_SRR_FL_39Bh                             0x39b, 0, 8

/**
 * Message SRR_FL_39Bh id.
 */
#define ID_SRR_FL_39Bh                              0x39b

/**
 * Message SRR_FL_39Bh extended id bit.
 */
#define EXT_SRR_FL_39Bh                             0

/**
 * Message SRR_FL_39Bh Data Length Count.
 */
#define DLC_SRR_FL_39Bh                             8

/**
 * Message SRR_FL_39Bh cycle time.
 */
#define CYCLE_SRR_FL_39Bh                           0

/**
 * Message SRR_FL_39Bh fast cycle time.
 */
#define FAST_SRR_FL_39Bh                            0

/**
 * Initialise message SRR_FL_39Bh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_39Bh(buf) { \
	INITSIG_SRR_FL_39Bh_RdrObjChks2_FL_5(buf); \
	INITSIG_SRR_FL_39Bh_RdrObjDx_FL_5(buf); \
	INITSIG_SRR_FL_39Bh_RdrObjTiAlv_FL_5(buf); \
	INITSIG_SRR_FL_39Bh_RdrObjVy_FL_5(buf); \
	INITSIG_SRR_FL_39Bh_RdrObjVx_FL_5(buf); \
	INITSIG_SRR_FL_39Bh_RdrObjWth_FL_5(buf); \
	INITSIG_SRR_FL_39Bh_RdrObjHeading_FL_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_39Ch Message SRR_FL_39Ch (0x39c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_39Ch_RdrObjChks_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjCntr_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjAy_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjAx_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjCoast_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjConf_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjMtnPat_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjID_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjTyp_FL_6
 * - \ref SIG_SRR_FL_39Ch_RdrObjDy_FL_6
 *
 * @{
 */

/**
 * Message SRR_FL_39Ch configuration tuple.
 */
#define MSG_SRR_FL_39Ch                             0x39c, 0, 8

/**
 * Message SRR_FL_39Ch id.
 */
#define ID_SRR_FL_39Ch                              0x39c

/**
 * Message SRR_FL_39Ch extended id bit.
 */
#define EXT_SRR_FL_39Ch                             0

/**
 * Message SRR_FL_39Ch Data Length Count.
 */
#define DLC_SRR_FL_39Ch                             8

/**
 * Message SRR_FL_39Ch cycle time.
 */
#define CYCLE_SRR_FL_39Ch                           0

/**
 * Message SRR_FL_39Ch fast cycle time.
 */
#define FAST_SRR_FL_39Ch                            0

/**
 * Initialise message SRR_FL_39Ch buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_39Ch(buf) { \
	INITSIG_SRR_FL_39Ch_RdrObjChks_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjCntr_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjAy_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjAx_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjCoast_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjConf_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjMtnPat_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjID_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjTyp_FL_6(buf); \
	INITSIG_SRR_FL_39Ch_RdrObjDy_FL_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_39Dh Message SRR_FL_39Dh (0x39d)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_39Dh_RdrObjChks2_FL_6
 * - \ref SIG_SRR_FL_39Dh_RdrObjDx_FL_6
 * - \ref SIG_SRR_FL_39Dh_RdrObjTiAlv_FL_6
 * - \ref SIG_SRR_FL_39Dh_RdrObjVy_FL_6
 * - \ref SIG_SRR_FL_39Dh_RdrObjVx_FL_6
 * - \ref SIG_SRR_FL_39Dh_RdrObjWth_FL_6
 * - \ref SIG_SRR_FL_39Dh_RdrObjHeading_FL_6
 *
 * @{
 */

/**
 * Message SRR_FL_39Dh configuration tuple.
 */
#define MSG_SRR_FL_39Dh                             0x39d, 0, 8

/**
 * Message SRR_FL_39Dh id.
 */
#define ID_SRR_FL_39Dh                              0x39d

/**
 * Message SRR_FL_39Dh extended id bit.
 */
#define EXT_SRR_FL_39Dh                             0

/**
 * Message SRR_FL_39Dh Data Length Count.
 */
#define DLC_SRR_FL_39Dh                             8

/**
 * Message SRR_FL_39Dh cycle time.
 */
#define CYCLE_SRR_FL_39Dh                           0

/**
 * Message SRR_FL_39Dh fast cycle time.
 */
#define FAST_SRR_FL_39Dh                            0

/**
 * Initialise message SRR_FL_39Dh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_39Dh(buf) { \
	INITSIG_SRR_FL_39Dh_RdrObjChks2_FL_6(buf); \
	INITSIG_SRR_FL_39Dh_RdrObjDx_FL_6(buf); \
	INITSIG_SRR_FL_39Dh_RdrObjTiAlv_FL_6(buf); \
	INITSIG_SRR_FL_39Dh_RdrObjVy_FL_6(buf); \
	INITSIG_SRR_FL_39Dh_RdrObjVx_FL_6(buf); \
	INITSIG_SRR_FL_39Dh_RdrObjWth_FL_6(buf); \
	INITSIG_SRR_FL_39Dh_RdrObjHeading_FL_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_39Eh Message SRR_FL_39Eh (0x39e)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_39Eh_RdrObjChks_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjCntr_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjAy_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjAx_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjCoast_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjConf_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjMtnPat_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjID_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjTyp_FL_7
 * - \ref SIG_SRR_FL_39Eh_RdrObjDy_FL_7
 *
 * @{
 */

/**
 * Message SRR_FL_39Eh configuration tuple.
 */
#define MSG_SRR_FL_39Eh                             0x39e, 0, 8

/**
 * Message SRR_FL_39Eh id.
 */
#define ID_SRR_FL_39Eh                              0x39e

/**
 * Message SRR_FL_39Eh extended id bit.
 */
#define EXT_SRR_FL_39Eh                             0

/**
 * Message SRR_FL_39Eh Data Length Count.
 */
#define DLC_SRR_FL_39Eh                             8

/**
 * Message SRR_FL_39Eh cycle time.
 */
#define CYCLE_SRR_FL_39Eh                           0

/**
 * Message SRR_FL_39Eh fast cycle time.
 */
#define FAST_SRR_FL_39Eh                            0

/**
 * Initialise message SRR_FL_39Eh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_39Eh(buf) { \
	INITSIG_SRR_FL_39Eh_RdrObjChks_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjCntr_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjAy_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjAx_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjCoast_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjConf_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjMtnPat_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjID_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjTyp_FL_7(buf); \
	INITSIG_SRR_FL_39Eh_RdrObjDy_FL_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_39Fh Message SRR_FL_39Fh (0x39f)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_39Fh_RdrObjChks2_FL_7
 * - \ref SIG_SRR_FL_39Fh_RdrObjDx_FL_7
 * - \ref SIG_SRR_FL_39Fh_RdrObjTiAlv_FL_7
 * - \ref SIG_SRR_FL_39Fh_RdrObjVy_FL_7
 * - \ref SIG_SRR_FL_39Fh_RdrObjVx_FL_7
 * - \ref SIG_SRR_FL_39Fh_RdrObjWth_FL_7
 * - \ref SIG_SRR_FL_39Fh_RdrObjHeading_FL_7
 *
 * @{
 */

/**
 * Message SRR_FL_39Fh configuration tuple.
 */
#define MSG_SRR_FL_39Fh                             0x39f, 0, 8

/**
 * Message SRR_FL_39Fh id.
 */
#define ID_SRR_FL_39Fh                              0x39f

/**
 * Message SRR_FL_39Fh extended id bit.
 */
#define EXT_SRR_FL_39Fh                             0

/**
 * Message SRR_FL_39Fh Data Length Count.
 */
#define DLC_SRR_FL_39Fh                             8

/**
 * Message SRR_FL_39Fh cycle time.
 */
#define CYCLE_SRR_FL_39Fh                           0

/**
 * Message SRR_FL_39Fh fast cycle time.
 */
#define FAST_SRR_FL_39Fh                            0

/**
 * Initialise message SRR_FL_39Fh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_39Fh(buf) { \
	INITSIG_SRR_FL_39Fh_RdrObjChks2_FL_7(buf); \
	INITSIG_SRR_FL_39Fh_RdrObjDx_FL_7(buf); \
	INITSIG_SRR_FL_39Fh_RdrObjTiAlv_FL_7(buf); \
	INITSIG_SRR_FL_39Fh_RdrObjVy_FL_7(buf); \
	INITSIG_SRR_FL_39Fh_RdrObjVx_FL_7(buf); \
	INITSIG_SRR_FL_39Fh_RdrObjWth_FL_7(buf); \
	INITSIG_SRR_FL_39Fh_RdrObjHeading_FL_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A0h Message SRR_FL_3A0h (0x3a0)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A0h_RdrObjChks_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjCntr_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjAy_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjAx_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjCoast_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjConf_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjMtnPat_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjID_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjTyp_FL_8
 * - \ref SIG_SRR_FL_3A0h_RdrObjDy_FL_8
 *
 * @{
 */

/**
 * Message SRR_FL_3A0h configuration tuple.
 */
#define MSG_SRR_FL_3A0h                             0x3a0, 0, 8

/**
 * Message SRR_FL_3A0h id.
 */
#define ID_SRR_FL_3A0h                              0x3a0

/**
 * Message SRR_FL_3A0h extended id bit.
 */
#define EXT_SRR_FL_3A0h                             0

/**
 * Message SRR_FL_3A0h Data Length Count.
 */
#define DLC_SRR_FL_3A0h                             8

/**
 * Message SRR_FL_3A0h cycle time.
 */
#define CYCLE_SRR_FL_3A0h                           0

/**
 * Message SRR_FL_3A0h fast cycle time.
 */
#define FAST_SRR_FL_3A0h                            0

/**
 * Initialise message SRR_FL_3A0h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A0h(buf) { \
	INITSIG_SRR_FL_3A0h_RdrObjChks_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjCntr_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjAy_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjAx_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjCoast_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjConf_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjMtnPat_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjID_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjTyp_FL_8(buf); \
	INITSIG_SRR_FL_3A0h_RdrObjDy_FL_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A1h Message SRR_FL_3A1h (0x3a1)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A1h_RdrObjChks2_FL_8
 * - \ref SIG_SRR_FL_3A1h_RdrObjDx_FL_8
 * - \ref SIG_SRR_FL_3A1h_RdrObjTiAlv_FL_8
 * - \ref SIG_SRR_FL_3A1h_RdrObjVy_FL_8
 * - \ref SIG_SRR_FL_3A1h_RdrObjVx_FL_8
 * - \ref SIG_SRR_FL_3A1h_RdrObjWth_FL_8
 * - \ref SIG_SRR_FL_3A1h_RdrObjHeading_FL_8
 *
 * @{
 */

/**
 * Message SRR_FL_3A1h configuration tuple.
 */
#define MSG_SRR_FL_3A1h                             0x3a1, 0, 8

/**
 * Message SRR_FL_3A1h id.
 */
#define ID_SRR_FL_3A1h                              0x3a1

/**
 * Message SRR_FL_3A1h extended id bit.
 */
#define EXT_SRR_FL_3A1h                             0

/**
 * Message SRR_FL_3A1h Data Length Count.
 */
#define DLC_SRR_FL_3A1h                             8

/**
 * Message SRR_FL_3A1h cycle time.
 */
#define CYCLE_SRR_FL_3A1h                           0

/**
 * Message SRR_FL_3A1h fast cycle time.
 */
#define FAST_SRR_FL_3A1h                            0

/**
 * Initialise message SRR_FL_3A1h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A1h(buf) { \
	INITSIG_SRR_FL_3A1h_RdrObjChks2_FL_8(buf); \
	INITSIG_SRR_FL_3A1h_RdrObjDx_FL_8(buf); \
	INITSIG_SRR_FL_3A1h_RdrObjTiAlv_FL_8(buf); \
	INITSIG_SRR_FL_3A1h_RdrObjVy_FL_8(buf); \
	INITSIG_SRR_FL_3A1h_RdrObjVx_FL_8(buf); \
	INITSIG_SRR_FL_3A1h_RdrObjWth_FL_8(buf); \
	INITSIG_SRR_FL_3A1h_RdrObjHeading_FL_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A2h Message SRR_FL_3A2h (0x3a2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A2h_RdrObjChks_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjCntr_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjAy_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjAx_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjCoast_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjConf_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjMtnPat_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjID_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjTyp_FL_9
 * - \ref SIG_SRR_FL_3A2h_RdrObjDy_FL_9
 *
 * @{
 */

/**
 * Message SRR_FL_3A2h configuration tuple.
 */
#define MSG_SRR_FL_3A2h                             0x3a2, 0, 8

/**
 * Message SRR_FL_3A2h id.
 */
#define ID_SRR_FL_3A2h                              0x3a2

/**
 * Message SRR_FL_3A2h extended id bit.
 */
#define EXT_SRR_FL_3A2h                             0

/**
 * Message SRR_FL_3A2h Data Length Count.
 */
#define DLC_SRR_FL_3A2h                             8

/**
 * Message SRR_FL_3A2h cycle time.
 */
#define CYCLE_SRR_FL_3A2h                           0

/**
 * Message SRR_FL_3A2h fast cycle time.
 */
#define FAST_SRR_FL_3A2h                            0

/**
 * Initialise message SRR_FL_3A2h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A2h(buf) { \
	INITSIG_SRR_FL_3A2h_RdrObjChks_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjCntr_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjAy_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjAx_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjCoast_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjConf_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjMtnPat_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjID_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjTyp_FL_9(buf); \
	INITSIG_SRR_FL_3A2h_RdrObjDy_FL_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A3h Message SRR_FL_3A3h (0x3a3)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A3h_RdrObjChks2_FL_9
 * - \ref SIG_SRR_FL_3A3h_RdrObjDx_FL_9
 * - \ref SIG_SRR_FL_3A3h_RdrObjTiAlv_FL_9
 * - \ref SIG_SRR_FL_3A3h_RdrObjVy_FL_9
 * - \ref SIG_SRR_FL_3A3h_RdrObjVx_FL_9
 * - \ref SIG_SRR_FL_3A3h_RdrObjWth_FL_9
 * - \ref SIG_SRR_FL_3A3h_RdrObjHeading_FL_9
 *
 * @{
 */

/**
 * Message SRR_FL_3A3h configuration tuple.
 */
#define MSG_SRR_FL_3A3h                             0x3a3, 0, 8

/**
 * Message SRR_FL_3A3h id.
 */
#define ID_SRR_FL_3A3h                              0x3a3

/**
 * Message SRR_FL_3A3h extended id bit.
 */
#define EXT_SRR_FL_3A3h                             0

/**
 * Message SRR_FL_3A3h Data Length Count.
 */
#define DLC_SRR_FL_3A3h                             8

/**
 * Message SRR_FL_3A3h cycle time.
 */
#define CYCLE_SRR_FL_3A3h                           0

/**
 * Message SRR_FL_3A3h fast cycle time.
 */
#define FAST_SRR_FL_3A3h                            0

/**
 * Initialise message SRR_FL_3A3h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A3h(buf) { \
	INITSIG_SRR_FL_3A3h_RdrObjChks2_FL_9(buf); \
	INITSIG_SRR_FL_3A3h_RdrObjDx_FL_9(buf); \
	INITSIG_SRR_FL_3A3h_RdrObjTiAlv_FL_9(buf); \
	INITSIG_SRR_FL_3A3h_RdrObjVy_FL_9(buf); \
	INITSIG_SRR_FL_3A3h_RdrObjVx_FL_9(buf); \
	INITSIG_SRR_FL_3A3h_RdrObjWth_FL_9(buf); \
	INITSIG_SRR_FL_3A3h_RdrObjHeading_FL_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A4h Message SRR_FL_3A4h (0x3a4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A4h_RdrObjChks_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjCntr_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjAy_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjAx_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjCoast_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjConf_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjMtnPat_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjID_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjTyp_FL_10
 * - \ref SIG_SRR_FL_3A4h_RdrObjDy_FL_10
 *
 * @{
 */

/**
 * Message SRR_FL_3A4h configuration tuple.
 */
#define MSG_SRR_FL_3A4h                             0x3a4, 0, 8

/**
 * Message SRR_FL_3A4h id.
 */
#define ID_SRR_FL_3A4h                              0x3a4

/**
 * Message SRR_FL_3A4h extended id bit.
 */
#define EXT_SRR_FL_3A4h                             0

/**
 * Message SRR_FL_3A4h Data Length Count.
 */
#define DLC_SRR_FL_3A4h                             8

/**
 * Message SRR_FL_3A4h cycle time.
 */
#define CYCLE_SRR_FL_3A4h                           0

/**
 * Message SRR_FL_3A4h fast cycle time.
 */
#define FAST_SRR_FL_3A4h                            0

/**
 * Initialise message SRR_FL_3A4h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A4h(buf) { \
	INITSIG_SRR_FL_3A4h_RdrObjChks_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjCntr_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjAy_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjAx_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjCoast_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjConf_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjMtnPat_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjID_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjTyp_FL_10(buf); \
	INITSIG_SRR_FL_3A4h_RdrObjDy_FL_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A5h Message SRR_FL_3A5h (0x3a5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A5h_RdrObjChks2_FL_10
 * - \ref SIG_SRR_FL_3A5h_RdrObjDx_FL_10
 * - \ref SIG_SRR_FL_3A5h_RdrObjTiAlv_FL_10
 * - \ref SIG_SRR_FL_3A5h_RdrObjVy_FL_10
 * - \ref SIG_SRR_FL_3A5h_RdrObjVx_FL_10
 * - \ref SIG_SRR_FL_3A5h_RdrObjWth_FL_10
 * - \ref SIG_SRR_FL_3A5h_RdrObjHeading_FL_10
 *
 * @{
 */

/**
 * Message SRR_FL_3A5h configuration tuple.
 */
#define MSG_SRR_FL_3A5h                             0x3a5, 0, 8

/**
 * Message SRR_FL_3A5h id.
 */
#define ID_SRR_FL_3A5h                              0x3a5

/**
 * Message SRR_FL_3A5h extended id bit.
 */
#define EXT_SRR_FL_3A5h                             0

/**
 * Message SRR_FL_3A5h Data Length Count.
 */
#define DLC_SRR_FL_3A5h                             8

/**
 * Message SRR_FL_3A5h cycle time.
 */
#define CYCLE_SRR_FL_3A5h                           0

/**
 * Message SRR_FL_3A5h fast cycle time.
 */
#define FAST_SRR_FL_3A5h                            0

/**
 * Initialise message SRR_FL_3A5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A5h(buf) { \
	INITSIG_SRR_FL_3A5h_RdrObjChks2_FL_10(buf); \
	INITSIG_SRR_FL_3A5h_RdrObjDx_FL_10(buf); \
	INITSIG_SRR_FL_3A5h_RdrObjTiAlv_FL_10(buf); \
	INITSIG_SRR_FL_3A5h_RdrObjVy_FL_10(buf); \
	INITSIG_SRR_FL_3A5h_RdrObjVx_FL_10(buf); \
	INITSIG_SRR_FL_3A5h_RdrObjWth_FL_10(buf); \
	INITSIG_SRR_FL_3A5h_RdrObjHeading_FL_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A6h Message SRR_FL_3A6h (0x3a6)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A6h_RdrObjChks_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjCntr_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjAy_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjAx_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjCoast_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjConf_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjMtnPat_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjID_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjTyp_FL_11
 * - \ref SIG_SRR_FL_3A6h_RdrObjDy_FL_11
 *
 * @{
 */

/**
 * Message SRR_FL_3A6h configuration tuple.
 */
#define MSG_SRR_FL_3A6h                             0x3a6, 0, 8

/**
 * Message SRR_FL_3A6h id.
 */
#define ID_SRR_FL_3A6h                              0x3a6

/**
 * Message SRR_FL_3A6h extended id bit.
 */
#define EXT_SRR_FL_3A6h                             0

/**
 * Message SRR_FL_3A6h Data Length Count.
 */
#define DLC_SRR_FL_3A6h                             8

/**
 * Message SRR_FL_3A6h cycle time.
 */
#define CYCLE_SRR_FL_3A6h                           0

/**
 * Message SRR_FL_3A6h fast cycle time.
 */
#define FAST_SRR_FL_3A6h                            0

/**
 * Initialise message SRR_FL_3A6h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A6h(buf) { \
	INITSIG_SRR_FL_3A6h_RdrObjChks_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjCntr_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjAy_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjAx_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjCoast_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjConf_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjMtnPat_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjID_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjTyp_FL_11(buf); \
	INITSIG_SRR_FL_3A6h_RdrObjDy_FL_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A7h Message SRR_FL_3A7h (0x3a7)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A7h_RdrObjChks2_FL_11
 * - \ref SIG_SRR_FL_3A7h_RdrObjDx_FL_11
 * - \ref SIG_SRR_FL_3A7h_RdrObjTiAlv_FL_11
 * - \ref SIG_SRR_FL_3A7h_RdrObjVy_FL_11
 * - \ref SIG_SRR_FL_3A7h_RdrObjVx_FL_11
 * - \ref SIG_SRR_FL_3A7h_RdrObjWth_FL_11
 * - \ref SIG_SRR_FL_3A7h_RdrObjHeading_FL_11
 *
 * @{
 */

/**
 * Message SRR_FL_3A7h configuration tuple.
 */
#define MSG_SRR_FL_3A7h                             0x3a7, 0, 8

/**
 * Message SRR_FL_3A7h id.
 */
#define ID_SRR_FL_3A7h                              0x3a7

/**
 * Message SRR_FL_3A7h extended id bit.
 */
#define EXT_SRR_FL_3A7h                             0

/**
 * Message SRR_FL_3A7h Data Length Count.
 */
#define DLC_SRR_FL_3A7h                             8

/**
 * Message SRR_FL_3A7h cycle time.
 */
#define CYCLE_SRR_FL_3A7h                           0

/**
 * Message SRR_FL_3A7h fast cycle time.
 */
#define FAST_SRR_FL_3A7h                            0

/**
 * Initialise message SRR_FL_3A7h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A7h(buf) { \
	INITSIG_SRR_FL_3A7h_RdrObjChks2_FL_11(buf); \
	INITSIG_SRR_FL_3A7h_RdrObjDx_FL_11(buf); \
	INITSIG_SRR_FL_3A7h_RdrObjTiAlv_FL_11(buf); \
	INITSIG_SRR_FL_3A7h_RdrObjVy_FL_11(buf); \
	INITSIG_SRR_FL_3A7h_RdrObjVx_FL_11(buf); \
	INITSIG_SRR_FL_3A7h_RdrObjWth_FL_11(buf); \
	INITSIG_SRR_FL_3A7h_RdrObjHeading_FL_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A8h Message SRR_FL_3A8h (0x3a8)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A8h_RdrObjChks_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjCntr_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjAy_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjAx_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjCoast_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjConf_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjMtnPat_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjID_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjTyp_FL_12
 * - \ref SIG_SRR_FL_3A8h_RdrObjDy_FL_12
 *
 * @{
 */

/**
 * Message SRR_FL_3A8h configuration tuple.
 */
#define MSG_SRR_FL_3A8h                             0x3a8, 0, 8

/**
 * Message SRR_FL_3A8h id.
 */
#define ID_SRR_FL_3A8h                              0x3a8

/**
 * Message SRR_FL_3A8h extended id bit.
 */
#define EXT_SRR_FL_3A8h                             0

/**
 * Message SRR_FL_3A8h Data Length Count.
 */
#define DLC_SRR_FL_3A8h                             8

/**
 * Message SRR_FL_3A8h cycle time.
 */
#define CYCLE_SRR_FL_3A8h                           0

/**
 * Message SRR_FL_3A8h fast cycle time.
 */
#define FAST_SRR_FL_3A8h                            0

/**
 * Initialise message SRR_FL_3A8h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A8h(buf) { \
	INITSIG_SRR_FL_3A8h_RdrObjChks_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjCntr_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjAy_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjAx_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjCoast_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjConf_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjMtnPat_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjID_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjTyp_FL_12(buf); \
	INITSIG_SRR_FL_3A8h_RdrObjDy_FL_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3A9h Message SRR_FL_3A9h (0x3a9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3A9h_RdrObjChks2_FL_12
 * - \ref SIG_SRR_FL_3A9h_RdrObjDx_FL_12
 * - \ref SIG_SRR_FL_3A9h_RdrObjTiAlv_FL_12
 * - \ref SIG_SRR_FL_3A9h_RdrObjVy_FL_12
 * - \ref SIG_SRR_FL_3A9h_RdrObjVx_FL_12
 * - \ref SIG_SRR_FL_3A9h_RdrObjWth_FL_12
 * - \ref SIG_SRR_FL_3A9h_RdrObjHeading_FL_12
 *
 * @{
 */

/**
 * Message SRR_FL_3A9h configuration tuple.
 */
#define MSG_SRR_FL_3A9h                             0x3a9, 0, 8

/**
 * Message SRR_FL_3A9h id.
 */
#define ID_SRR_FL_3A9h                              0x3a9

/**
 * Message SRR_FL_3A9h extended id bit.
 */
#define EXT_SRR_FL_3A9h                             0

/**
 * Message SRR_FL_3A9h Data Length Count.
 */
#define DLC_SRR_FL_3A9h                             8

/**
 * Message SRR_FL_3A9h cycle time.
 */
#define CYCLE_SRR_FL_3A9h                           0

/**
 * Message SRR_FL_3A9h fast cycle time.
 */
#define FAST_SRR_FL_3A9h                            0

/**
 * Initialise message SRR_FL_3A9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3A9h(buf) { \
	INITSIG_SRR_FL_3A9h_RdrObjChks2_FL_12(buf); \
	INITSIG_SRR_FL_3A9h_RdrObjDx_FL_12(buf); \
	INITSIG_SRR_FL_3A9h_RdrObjTiAlv_FL_12(buf); \
	INITSIG_SRR_FL_3A9h_RdrObjVy_FL_12(buf); \
	INITSIG_SRR_FL_3A9h_RdrObjVx_FL_12(buf); \
	INITSIG_SRR_FL_3A9h_RdrObjWth_FL_12(buf); \
	INITSIG_SRR_FL_3A9h_RdrObjHeading_FL_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3AAh Message SRR_FL_3AAh (0x3aa)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3AAh_RdrObjChks_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjCntr_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjAy_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjAx_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjCoast_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjConf_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjMtnPat_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjID_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjTyp_FL_13
 * - \ref SIG_SRR_FL_3AAh_RdrObjDy_FL_13
 *
 * @{
 */

/**
 * Message SRR_FL_3AAh configuration tuple.
 */
#define MSG_SRR_FL_3AAh                             0x3aa, 0, 8

/**
 * Message SRR_FL_3AAh id.
 */
#define ID_SRR_FL_3AAh                              0x3aa

/**
 * Message SRR_FL_3AAh extended id bit.
 */
#define EXT_SRR_FL_3AAh                             0

/**
 * Message SRR_FL_3AAh Data Length Count.
 */
#define DLC_SRR_FL_3AAh                             8

/**
 * Message SRR_FL_3AAh cycle time.
 */
#define CYCLE_SRR_FL_3AAh                           0

/**
 * Message SRR_FL_3AAh fast cycle time.
 */
#define FAST_SRR_FL_3AAh                            0

/**
 * Initialise message SRR_FL_3AAh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3AAh(buf) { \
	INITSIG_SRR_FL_3AAh_RdrObjChks_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjCntr_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjAy_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjAx_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjCoast_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjConf_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjMtnPat_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjID_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjTyp_FL_13(buf); \
	INITSIG_SRR_FL_3AAh_RdrObjDy_FL_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3ABh Message SRR_FL_3ABh (0x3ab)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3ABh_RdrObjChks2_FL_13
 * - \ref SIG_SRR_FL_3ABh_RdrObjDx_FL_13
 * - \ref SIG_SRR_FL_3ABh_RdrObjTiAlv_FL_13
 * - \ref SIG_SRR_FL_3ABh_RdrObjVy_FL_13
 * - \ref SIG_SRR_FL_3ABh_RdrObjVx_FL_13
 * - \ref SIG_SRR_FL_3ABh_RdrObjWth_FL_13
 * - \ref SIG_SRR_FL_3ABh_RdrObjHeading_FL_13
 *
 * @{
 */

/**
 * Message SRR_FL_3ABh configuration tuple.
 */
#define MSG_SRR_FL_3ABh                             0x3ab, 0, 8

/**
 * Message SRR_FL_3ABh id.
 */
#define ID_SRR_FL_3ABh                              0x3ab

/**
 * Message SRR_FL_3ABh extended id bit.
 */
#define EXT_SRR_FL_3ABh                             0

/**
 * Message SRR_FL_3ABh Data Length Count.
 */
#define DLC_SRR_FL_3ABh                             8

/**
 * Message SRR_FL_3ABh cycle time.
 */
#define CYCLE_SRR_FL_3ABh                           0

/**
 * Message SRR_FL_3ABh fast cycle time.
 */
#define FAST_SRR_FL_3ABh                            0

/**
 * Initialise message SRR_FL_3ABh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3ABh(buf) { \
	INITSIG_SRR_FL_3ABh_RdrObjChks2_FL_13(buf); \
	INITSIG_SRR_FL_3ABh_RdrObjDx_FL_13(buf); \
	INITSIG_SRR_FL_3ABh_RdrObjTiAlv_FL_13(buf); \
	INITSIG_SRR_FL_3ABh_RdrObjVy_FL_13(buf); \
	INITSIG_SRR_FL_3ABh_RdrObjVx_FL_13(buf); \
	INITSIG_SRR_FL_3ABh_RdrObjWth_FL_13(buf); \
	INITSIG_SRR_FL_3ABh_RdrObjHeading_FL_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3ACh Message SRR_FL_3ACh (0x3ac)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3ACh_RdrObjChks_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjCntr_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjAy_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjAx_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjCoast_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjConf_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjMtnPat_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjID_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjTyp_FL_14
 * - \ref SIG_SRR_FL_3ACh_RdrObjDy_FL_14
 *
 * @{
 */

/**
 * Message SRR_FL_3ACh configuration tuple.
 */
#define MSG_SRR_FL_3ACh                             0x3ac, 0, 8

/**
 * Message SRR_FL_3ACh id.
 */
#define ID_SRR_FL_3ACh                              0x3ac

/**
 * Message SRR_FL_3ACh extended id bit.
 */
#define EXT_SRR_FL_3ACh                             0

/**
 * Message SRR_FL_3ACh Data Length Count.
 */
#define DLC_SRR_FL_3ACh                             8

/**
 * Message SRR_FL_3ACh cycle time.
 */
#define CYCLE_SRR_FL_3ACh                           0

/**
 * Message SRR_FL_3ACh fast cycle time.
 */
#define FAST_SRR_FL_3ACh                            0

/**
 * Initialise message SRR_FL_3ACh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3ACh(buf) { \
	INITSIG_SRR_FL_3ACh_RdrObjChks_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjCntr_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjAy_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjAx_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjCoast_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjConf_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjMtnPat_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjID_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjTyp_FL_14(buf); \
	INITSIG_SRR_FL_3ACh_RdrObjDy_FL_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3ADh Message SRR_FL_3ADh (0x3ad)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3ADh_RdrObjChks2_FL_14
 * - \ref SIG_SRR_FL_3ADh_RdrObjDx_FL_14
 * - \ref SIG_SRR_FL_3ADh_RdrObjTiAlv_FL_14
 * - \ref SIG_SRR_FL_3ADh_RdrObjVy_FL_14
 * - \ref SIG_SRR_FL_3ADh_RdrObjVx_FL_14
 * - \ref SIG_SRR_FL_3ADh_RdrObjWth_FL_14
 * - \ref SIG_SRR_FL_3ADh_RdrObjHeading_FL_14
 *
 * @{
 */

/**
 * Message SRR_FL_3ADh configuration tuple.
 */
#define MSG_SRR_FL_3ADh                             0x3ad, 0, 8

/**
 * Message SRR_FL_3ADh id.
 */
#define ID_SRR_FL_3ADh                              0x3ad

/**
 * Message SRR_FL_3ADh extended id bit.
 */
#define EXT_SRR_FL_3ADh                             0

/**
 * Message SRR_FL_3ADh Data Length Count.
 */
#define DLC_SRR_FL_3ADh                             8

/**
 * Message SRR_FL_3ADh cycle time.
 */
#define CYCLE_SRR_FL_3ADh                           0

/**
 * Message SRR_FL_3ADh fast cycle time.
 */
#define FAST_SRR_FL_3ADh                            0

/**
 * Initialise message SRR_FL_3ADh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3ADh(buf) { \
	INITSIG_SRR_FL_3ADh_RdrObjChks2_FL_14(buf); \
	INITSIG_SRR_FL_3ADh_RdrObjDx_FL_14(buf); \
	INITSIG_SRR_FL_3ADh_RdrObjTiAlv_FL_14(buf); \
	INITSIG_SRR_FL_3ADh_RdrObjVy_FL_14(buf); \
	INITSIG_SRR_FL_3ADh_RdrObjVx_FL_14(buf); \
	INITSIG_SRR_FL_3ADh_RdrObjWth_FL_14(buf); \
	INITSIG_SRR_FL_3ADh_RdrObjHeading_FL_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3AEh Message SRR_FL_3AEh (0x3ae)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3AEh_RdrObjChks_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjCntr_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjAy_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjAx_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjCoast_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjConf_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjMtnPat_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjID_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjTyp_FL_15
 * - \ref SIG_SRR_FL_3AEh_RdrObjDy_FL_15
 *
 * @{
 */

/**
 * Message SRR_FL_3AEh configuration tuple.
 */
#define MSG_SRR_FL_3AEh                             0x3ae, 0, 8

/**
 * Message SRR_FL_3AEh id.
 */
#define ID_SRR_FL_3AEh                              0x3ae

/**
 * Message SRR_FL_3AEh extended id bit.
 */
#define EXT_SRR_FL_3AEh                             0

/**
 * Message SRR_FL_3AEh Data Length Count.
 */
#define DLC_SRR_FL_3AEh                             8

/**
 * Message SRR_FL_3AEh cycle time.
 */
#define CYCLE_SRR_FL_3AEh                           0

/**
 * Message SRR_FL_3AEh fast cycle time.
 */
#define FAST_SRR_FL_3AEh                            0

/**
 * Initialise message SRR_FL_3AEh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3AEh(buf) { \
	INITSIG_SRR_FL_3AEh_RdrObjChks_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjCntr_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjAy_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjAx_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjCoast_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjConf_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjMtnPat_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjID_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjTyp_FL_15(buf); \
	INITSIG_SRR_FL_3AEh_RdrObjDy_FL_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FL_3AFh Message SRR_FL_3AFh (0x3af)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FL_3AFh_RdrObjChks2_FL_15
 * - \ref SIG_SRR_FL_3AFh_RdrObjDx_FL_15
 * - \ref SIG_SRR_FL_3AFh_RdrObjTiAlv_FL_15
 * - \ref SIG_SRR_FL_3AFh_RdrObjVy_FL_15
 * - \ref SIG_SRR_FL_3AFh_RdrObjVx_FL_15
 * - \ref SIG_SRR_FL_3AFh_RdrObjWth_FL_15
 * - \ref SIG_SRR_FL_3AFh_RdrObjHeading_FL_15
 *
 * @{
 */

/**
 * Message SRR_FL_3AFh configuration tuple.
 */
#define MSG_SRR_FL_3AFh                             0x3af, 0, 8

/**
 * Message SRR_FL_3AFh id.
 */
#define ID_SRR_FL_3AFh                              0x3af

/**
 * Message SRR_FL_3AFh extended id bit.
 */
#define EXT_SRR_FL_3AFh                             0

/**
 * Message SRR_FL_3AFh Data Length Count.
 */
#define DLC_SRR_FL_3AFh                             8

/**
 * Message SRR_FL_3AFh cycle time.
 */
#define CYCLE_SRR_FL_3AFh                           0

/**
 * Message SRR_FL_3AFh fast cycle time.
 */
#define FAST_SRR_FL_3AFh                            0

/**
 * Initialise message SRR_FL_3AFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FL_3AFh(buf) { \
	INITSIG_SRR_FL_3AFh_RdrObjChks2_FL_15(buf); \
	INITSIG_SRR_FL_3AFh_RdrObjDx_FL_15(buf); \
	INITSIG_SRR_FL_3AFh_RdrObjTiAlv_FL_15(buf); \
	INITSIG_SRR_FL_3AFh_RdrObjVy_FL_15(buf); \
	INITSIG_SRR_FL_3AFh_RdrObjVx_FL_15(buf); \
	INITSIG_SRR_FL_3AFh_RdrObjWth_FL_15(buf); \
	INITSIG_SRR_FL_3AFh_RdrObjHeading_FL_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_Tester_705h Message IECU_Tester_705h (0x705)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_Tester_705h_TesterDiagRequestData_SRR_FR
 *
 * @{
 */

/**
 * Message IECU_Tester_705h configuration tuple.
 */
#define MSG_IECU_Tester_705h                        0x705, 0, 8

/**
 * Message IECU_Tester_705h id.
 */
#define ID_IECU_Tester_705h                         0x705

/**
 * Message IECU_Tester_705h extended id bit.
 */
#define EXT_IECU_Tester_705h                        0

/**
 * Message IECU_Tester_705h Data Length Count.
 */
#define DLC_IECU_Tester_705h                        8

/**
 * Message IECU_Tester_705h cycle time.
 */
#define CYCLE_IECU_Tester_705h                      0

/**
 * Message IECU_Tester_705h fast cycle time.
 */
#define FAST_IECU_Tester_705h                       0

/**
 * Initialise message IECU_Tester_705h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_Tester_705h(buf) { \
	INITSIG_IECU_Tester_705h_TesterDiagRequestData_SRR_FR(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_785h Message SRR_FR_785h (0x785)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_785h_SRR_FRDiagResponseData
 *
 * @{
 */

/**
 * Message SRR_FR_785h configuration tuple.
 */
#define MSG_SRR_FR_785h                             0x785, 0, 8

/**
 * Message SRR_FR_785h id.
 */
#define ID_SRR_FR_785h                              0x785

/**
 * Message SRR_FR_785h extended id bit.
 */
#define EXT_SRR_FR_785h                             0

/**
 * Message SRR_FR_785h Data Length Count.
 */
#define DLC_SRR_FR_785h                             8

/**
 * Message SRR_FR_785h cycle time.
 */
#define CYCLE_SRR_FR_785h                           0

/**
 * Message SRR_FR_785h fast cycle time.
 */
#define FAST_SRR_FR_785h                            0

/**
 * Initialise message SRR_FR_785h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_785h(buf) { \
	INITSIG_SRR_FR_785h_SRR_FRDiagResponseData(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B0h Message SRR_FR_3B0h (0x3b0)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B0h_RdrStsChks_RR
 * - \ref SIG_SRR_FR_3B0h_RdrStsCntr_RR
 * - \ref SIG_SRR_FR_3B0h_RdrStsIfVersMajor_RR
 * - \ref SIG_SRR_FR_3B0h_RdrStsIfVersMiddle_RR
 * - \ref SIG_SRR_FR_3B0h_RdrStsIfVersMinor_RR
 * - \ref SIG_SRR_FR_3B0h_RdrStsTiStamp_RR
 *
 * @{
 */

/**
 * Message SRR_FR_3B0h configuration tuple.
 */
#define MSG_SRR_FR_3B0h                             0x3b0, 0, 8

/**
 * Message SRR_FR_3B0h id.
 */
#define ID_SRR_FR_3B0h                              0x3b0

/**
 * Message SRR_FR_3B0h extended id bit.
 */
#define EXT_SRR_FR_3B0h                             0

/**
 * Message SRR_FR_3B0h Data Length Count.
 */
#define DLC_SRR_FR_3B0h                             8

/**
 * Message SRR_FR_3B0h cycle time.
 */
#define CYCLE_SRR_FR_3B0h                           0

/**
 * Message SRR_FR_3B0h fast cycle time.
 */
#define FAST_SRR_FR_3B0h                            0

/**
 * Initialise message SRR_FR_3B0h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B0h(buf) { \
	INITSIG_SRR_FR_3B0h_RdrStsChks_RR(buf); \
	INITSIG_SRR_FR_3B0h_RdrStsCntr_RR(buf); \
	INITSIG_SRR_FR_3B0h_RdrStsIfVersMajor_RR(buf); \
	INITSIG_SRR_FR_3B0h_RdrStsIfVersMiddle_RR(buf); \
	INITSIG_SRR_FR_3B0h_RdrStsIfVersMinor_RR(buf); \
	INITSIG_SRR_FR_3B0h_RdrStsTiStamp_RR(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B1h Message SRR_FR_3B1h (0x3b1)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B1h_Genrl_SnsrLatency_RR
 * - \ref SIG_SRR_FR_3B1h_RdrSysSts_RR
 *
 * @{
 */

/**
 * Message SRR_FR_3B1h configuration tuple.
 */
#define MSG_SRR_FR_3B1h                             0x3b1, 0, 8

/**
 * Message SRR_FR_3B1h id.
 */
#define ID_SRR_FR_3B1h                              0x3b1

/**
 * Message SRR_FR_3B1h extended id bit.
 */
#define EXT_SRR_FR_3B1h                             0

/**
 * Message SRR_FR_3B1h Data Length Count.
 */
#define DLC_SRR_FR_3B1h                             8

/**
 * Message SRR_FR_3B1h cycle time.
 */
#define CYCLE_SRR_FR_3B1h                           0

/**
 * Message SRR_FR_3B1h fast cycle time.
 */
#define FAST_SRR_FR_3B1h                            0

/**
 * Initialise message SRR_FR_3B1h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B1h(buf) { \
	INITSIG_SRR_FR_3B1h_Genrl_SnsrLatency_RR(buf); \
	INITSIG_SRR_FR_3B1h_RdrSysSts_RR(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B2h Message SRR_FR_3B2h (0x3b2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B2h_RdrObjChks_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjCntr_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjAy_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjAx_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjCoast_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjConf_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjMtnPat_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjID_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjTyp_FR_1
 * - \ref SIG_SRR_FR_3B2h_RdrObjDy_FR_1
 *
 * @{
 */

/**
 * Message SRR_FR_3B2h configuration tuple.
 */
#define MSG_SRR_FR_3B2h                             0x3b2, 0, 8

/**
 * Message SRR_FR_3B2h id.
 */
#define ID_SRR_FR_3B2h                              0x3b2

/**
 * Message SRR_FR_3B2h extended id bit.
 */
#define EXT_SRR_FR_3B2h                             0

/**
 * Message SRR_FR_3B2h Data Length Count.
 */
#define DLC_SRR_FR_3B2h                             8

/**
 * Message SRR_FR_3B2h cycle time.
 */
#define CYCLE_SRR_FR_3B2h                           0

/**
 * Message SRR_FR_3B2h fast cycle time.
 */
#define FAST_SRR_FR_3B2h                            0

/**
 * Initialise message SRR_FR_3B2h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B2h(buf) { \
	INITSIG_SRR_FR_3B2h_RdrObjChks_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjCntr_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjAy_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjAx_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjCoast_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjConf_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjMtnPat_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjID_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjTyp_FR_1(buf); \
	INITSIG_SRR_FR_3B2h_RdrObjDy_FR_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B3h Message SRR_FR_3B3h (0x3b3)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B3h_RdrObjChks2_FR_1
 * - \ref SIG_SRR_FR_3B3h_RdrObjDx_FR_1
 * - \ref SIG_SRR_FR_3B3h_RdrObjTiAlv_FR_1
 * - \ref SIG_SRR_FR_3B3h_RdrObjVy_FR_1
 * - \ref SIG_SRR_FR_3B3h_RdrObjVx_FR_1
 * - \ref SIG_SRR_FR_3B3h_RdrObjWth_FR_1
 * - \ref SIG_SRR_FR_3B3h_RdrObjHeading_FR_1
 *
 * @{
 */

/**
 * Message SRR_FR_3B3h configuration tuple.
 */
#define MSG_SRR_FR_3B3h                             0x3b3, 0, 8

/**
 * Message SRR_FR_3B3h id.
 */
#define ID_SRR_FR_3B3h                              0x3b3

/**
 * Message SRR_FR_3B3h extended id bit.
 */
#define EXT_SRR_FR_3B3h                             0

/**
 * Message SRR_FR_3B3h Data Length Count.
 */
#define DLC_SRR_FR_3B3h                             8

/**
 * Message SRR_FR_3B3h cycle time.
 */
#define CYCLE_SRR_FR_3B3h                           0

/**
 * Message SRR_FR_3B3h fast cycle time.
 */
#define FAST_SRR_FR_3B3h                            0

/**
 * Initialise message SRR_FR_3B3h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B3h(buf) { \
	INITSIG_SRR_FR_3B3h_RdrObjChks2_FR_1(buf); \
	INITSIG_SRR_FR_3B3h_RdrObjDx_FR_1(buf); \
	INITSIG_SRR_FR_3B3h_RdrObjTiAlv_FR_1(buf); \
	INITSIG_SRR_FR_3B3h_RdrObjVy_FR_1(buf); \
	INITSIG_SRR_FR_3B3h_RdrObjVx_FR_1(buf); \
	INITSIG_SRR_FR_3B3h_RdrObjWth_FR_1(buf); \
	INITSIG_SRR_FR_3B3h_RdrObjHeading_FR_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B4h Message SRR_FR_3B4h (0x3b4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B4h_RdrObjChks_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjCntr_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjAy_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjAx_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjCoast_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjConf_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjMtnPat_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjID_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjTyp_FR_2
 * - \ref SIG_SRR_FR_3B4h_RdrObjDy_FR_2
 *
 * @{
 */

/**
 * Message SRR_FR_3B4h configuration tuple.
 */
#define MSG_SRR_FR_3B4h                             0x3b4, 0, 8

/**
 * Message SRR_FR_3B4h id.
 */
#define ID_SRR_FR_3B4h                              0x3b4

/**
 * Message SRR_FR_3B4h extended id bit.
 */
#define EXT_SRR_FR_3B4h                             0

/**
 * Message SRR_FR_3B4h Data Length Count.
 */
#define DLC_SRR_FR_3B4h                             8

/**
 * Message SRR_FR_3B4h cycle time.
 */
#define CYCLE_SRR_FR_3B4h                           0

/**
 * Message SRR_FR_3B4h fast cycle time.
 */
#define FAST_SRR_FR_3B4h                            0

/**
 * Initialise message SRR_FR_3B4h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B4h(buf) { \
	INITSIG_SRR_FR_3B4h_RdrObjChks_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjCntr_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjAy_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjAx_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjCoast_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjConf_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjMtnPat_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjID_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjTyp_FR_2(buf); \
	INITSIG_SRR_FR_3B4h_RdrObjDy_FR_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B5h Message SRR_FR_3B5h (0x3b5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B5h_RdrObjChks2_FR_2
 * - \ref SIG_SRR_FR_3B5h_RdrObjDx_FR_2
 * - \ref SIG_SRR_FR_3B5h_RdrObjTiAlv_FR_2
 * - \ref SIG_SRR_FR_3B5h_RdrObjVy_FR_2
 * - \ref SIG_SRR_FR_3B5h_RdrObjVx_FR_2
 * - \ref SIG_SRR_FR_3B5h_RdrObjWth_FR_2
 * - \ref SIG_SRR_FR_3B5h_RdrObjHeading_FR_2
 *
 * @{
 */

/**
 * Message SRR_FR_3B5h configuration tuple.
 */
#define MSG_SRR_FR_3B5h                             0x3b5, 0, 8

/**
 * Message SRR_FR_3B5h id.
 */
#define ID_SRR_FR_3B5h                              0x3b5

/**
 * Message SRR_FR_3B5h extended id bit.
 */
#define EXT_SRR_FR_3B5h                             0

/**
 * Message SRR_FR_3B5h Data Length Count.
 */
#define DLC_SRR_FR_3B5h                             8

/**
 * Message SRR_FR_3B5h cycle time.
 */
#define CYCLE_SRR_FR_3B5h                           0

/**
 * Message SRR_FR_3B5h fast cycle time.
 */
#define FAST_SRR_FR_3B5h                            0

/**
 * Initialise message SRR_FR_3B5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B5h(buf) { \
	INITSIG_SRR_FR_3B5h_RdrObjChks2_FR_2(buf); \
	INITSIG_SRR_FR_3B5h_RdrObjDx_FR_2(buf); \
	INITSIG_SRR_FR_3B5h_RdrObjTiAlv_FR_2(buf); \
	INITSIG_SRR_FR_3B5h_RdrObjVy_FR_2(buf); \
	INITSIG_SRR_FR_3B5h_RdrObjVx_FR_2(buf); \
	INITSIG_SRR_FR_3B5h_RdrObjWth_FR_2(buf); \
	INITSIG_SRR_FR_3B5h_RdrObjHeading_FR_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B6h Message SRR_FR_3B6h (0x3b6)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B6h_RdrObjChks_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjCntr_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjAy_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjAx_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjCoast_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjConf_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjMtnPat_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjID_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjTyp_FR_3
 * - \ref SIG_SRR_FR_3B6h_RdrObjDy_FR_3
 *
 * @{
 */

/**
 * Message SRR_FR_3B6h configuration tuple.
 */
#define MSG_SRR_FR_3B6h                             0x3b6, 0, 8

/**
 * Message SRR_FR_3B6h id.
 */
#define ID_SRR_FR_3B6h                              0x3b6

/**
 * Message SRR_FR_3B6h extended id bit.
 */
#define EXT_SRR_FR_3B6h                             0

/**
 * Message SRR_FR_3B6h Data Length Count.
 */
#define DLC_SRR_FR_3B6h                             8

/**
 * Message SRR_FR_3B6h cycle time.
 */
#define CYCLE_SRR_FR_3B6h                           0

/**
 * Message SRR_FR_3B6h fast cycle time.
 */
#define FAST_SRR_FR_3B6h                            0

/**
 * Initialise message SRR_FR_3B6h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B6h(buf) { \
	INITSIG_SRR_FR_3B6h_RdrObjChks_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjCntr_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjAy_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjAx_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjCoast_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjConf_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjMtnPat_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjID_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjTyp_FR_3(buf); \
	INITSIG_SRR_FR_3B6h_RdrObjDy_FR_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B7h Message SRR_FR_3B7h (0x3b7)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B7h_RdrObjChks2_FR_3
 * - \ref SIG_SRR_FR_3B7h_RdrObjDx_FR_3
 * - \ref SIG_SRR_FR_3B7h_RdrObjTiAlv_FR_3
 * - \ref SIG_SRR_FR_3B7h_RdrObjVy_FR_3
 * - \ref SIG_SRR_FR_3B7h_RdrObjVx_FR_3
 * - \ref SIG_SRR_FR_3B7h_RdrObjWth_FR_3
 * - \ref SIG_SRR_FR_3B7h_RdrObjHeading_FR_3
 *
 * @{
 */

/**
 * Message SRR_FR_3B7h configuration tuple.
 */
#define MSG_SRR_FR_3B7h                             0x3b7, 0, 8

/**
 * Message SRR_FR_3B7h id.
 */
#define ID_SRR_FR_3B7h                              0x3b7

/**
 * Message SRR_FR_3B7h extended id bit.
 */
#define EXT_SRR_FR_3B7h                             0

/**
 * Message SRR_FR_3B7h Data Length Count.
 */
#define DLC_SRR_FR_3B7h                             8

/**
 * Message SRR_FR_3B7h cycle time.
 */
#define CYCLE_SRR_FR_3B7h                           0

/**
 * Message SRR_FR_3B7h fast cycle time.
 */
#define FAST_SRR_FR_3B7h                            0

/**
 * Initialise message SRR_FR_3B7h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B7h(buf) { \
	INITSIG_SRR_FR_3B7h_RdrObjChks2_FR_3(buf); \
	INITSIG_SRR_FR_3B7h_RdrObjDx_FR_3(buf); \
	INITSIG_SRR_FR_3B7h_RdrObjTiAlv_FR_3(buf); \
	INITSIG_SRR_FR_3B7h_RdrObjVy_FR_3(buf); \
	INITSIG_SRR_FR_3B7h_RdrObjVx_FR_3(buf); \
	INITSIG_SRR_FR_3B7h_RdrObjWth_FR_3(buf); \
	INITSIG_SRR_FR_3B7h_RdrObjHeading_FR_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B8h Message SRR_FR_3B8h (0x3b8)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B8h_RdrObjChks_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjCntr_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjAy_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjAx_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjCoast_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjConf_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjMtnPat_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjID_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjTyp_FR_4
 * - \ref SIG_SRR_FR_3B8h_RdrObjDy_FR_4
 *
 * @{
 */

/**
 * Message SRR_FR_3B8h configuration tuple.
 */
#define MSG_SRR_FR_3B8h                             0x3b8, 0, 8

/**
 * Message SRR_FR_3B8h id.
 */
#define ID_SRR_FR_3B8h                              0x3b8

/**
 * Message SRR_FR_3B8h extended id bit.
 */
#define EXT_SRR_FR_3B8h                             0

/**
 * Message SRR_FR_3B8h Data Length Count.
 */
#define DLC_SRR_FR_3B8h                             8

/**
 * Message SRR_FR_3B8h cycle time.
 */
#define CYCLE_SRR_FR_3B8h                           0

/**
 * Message SRR_FR_3B8h fast cycle time.
 */
#define FAST_SRR_FR_3B8h                            0

/**
 * Initialise message SRR_FR_3B8h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B8h(buf) { \
	INITSIG_SRR_FR_3B8h_RdrObjChks_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjCntr_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjAy_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjAx_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjCoast_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjConf_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjMtnPat_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjID_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjTyp_FR_4(buf); \
	INITSIG_SRR_FR_3B8h_RdrObjDy_FR_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3B9h Message SRR_FR_3B9h (0x3b9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3B9h_RdrObjChks2_FR_4
 * - \ref SIG_SRR_FR_3B9h_RdrObjDx_FR_4
 * - \ref SIG_SRR_FR_3B9h_RdrObjTiAlv_FR_4
 * - \ref SIG_SRR_FR_3B9h_RdrObjVy_FR_4
 * - \ref SIG_SRR_FR_3B9h_RdrObjVx_FR_4
 * - \ref SIG_SRR_FR_3B9h_RdrObjWth_FR_4
 * - \ref SIG_SRR_FR_3B9h_RdrObjHeading_FR_4
 *
 * @{
 */

/**
 * Message SRR_FR_3B9h configuration tuple.
 */
#define MSG_SRR_FR_3B9h                             0x3b9, 0, 8

/**
 * Message SRR_FR_3B9h id.
 */
#define ID_SRR_FR_3B9h                              0x3b9

/**
 * Message SRR_FR_3B9h extended id bit.
 */
#define EXT_SRR_FR_3B9h                             0

/**
 * Message SRR_FR_3B9h Data Length Count.
 */
#define DLC_SRR_FR_3B9h                             8

/**
 * Message SRR_FR_3B9h cycle time.
 */
#define CYCLE_SRR_FR_3B9h                           0

/**
 * Message SRR_FR_3B9h fast cycle time.
 */
#define FAST_SRR_FR_3B9h                            0

/**
 * Initialise message SRR_FR_3B9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3B9h(buf) { \
	INITSIG_SRR_FR_3B9h_RdrObjChks2_FR_4(buf); \
	INITSIG_SRR_FR_3B9h_RdrObjDx_FR_4(buf); \
	INITSIG_SRR_FR_3B9h_RdrObjTiAlv_FR_4(buf); \
	INITSIG_SRR_FR_3B9h_RdrObjVy_FR_4(buf); \
	INITSIG_SRR_FR_3B9h_RdrObjVx_FR_4(buf); \
	INITSIG_SRR_FR_3B9h_RdrObjWth_FR_4(buf); \
	INITSIG_SRR_FR_3B9h_RdrObjHeading_FR_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3BAh Message SRR_FR_3BAh (0x3ba)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3BAh_RdrObjChks_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjCntr_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjAy_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjAx_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjCoast_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjConf_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjMtnPat_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjID_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjTyp_FR_5
 * - \ref SIG_SRR_FR_3BAh_RdrObjDy_FR_5
 *
 * @{
 */

/**
 * Message SRR_FR_3BAh configuration tuple.
 */
#define MSG_SRR_FR_3BAh                             0x3ba, 0, 8

/**
 * Message SRR_FR_3BAh id.
 */
#define ID_SRR_FR_3BAh                              0x3ba

/**
 * Message SRR_FR_3BAh extended id bit.
 */
#define EXT_SRR_FR_3BAh                             0

/**
 * Message SRR_FR_3BAh Data Length Count.
 */
#define DLC_SRR_FR_3BAh                             8

/**
 * Message SRR_FR_3BAh cycle time.
 */
#define CYCLE_SRR_FR_3BAh                           0

/**
 * Message SRR_FR_3BAh fast cycle time.
 */
#define FAST_SRR_FR_3BAh                            0

/**
 * Initialise message SRR_FR_3BAh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3BAh(buf) { \
	INITSIG_SRR_FR_3BAh_RdrObjChks_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjCntr_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjAy_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjAx_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjCoast_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjConf_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjMtnPat_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjID_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjTyp_FR_5(buf); \
	INITSIG_SRR_FR_3BAh_RdrObjDy_FR_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3BBh Message SRR_FR_3BBh (0x3bb)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3BBh_RdrObjChks2_FR_5
 * - \ref SIG_SRR_FR_3BBh_RdrObjDx_FR_5
 * - \ref SIG_SRR_FR_3BBh_RdrObjTiAlv_FR_5
 * - \ref SIG_SRR_FR_3BBh_RdrObjVy_FR_5
 * - \ref SIG_SRR_FR_3BBh_RdrObjVx_FR_5
 * - \ref SIG_SRR_FR_3BBh_RdrObjWth_FR_5
 * - \ref SIG_SRR_FR_3BBh_RdrObjHeading_FR_5
 *
 * @{
 */

/**
 * Message SRR_FR_3BBh configuration tuple.
 */
#define MSG_SRR_FR_3BBh                             0x3bb, 0, 8

/**
 * Message SRR_FR_3BBh id.
 */
#define ID_SRR_FR_3BBh                              0x3bb

/**
 * Message SRR_FR_3BBh extended id bit.
 */
#define EXT_SRR_FR_3BBh                             0

/**
 * Message SRR_FR_3BBh Data Length Count.
 */
#define DLC_SRR_FR_3BBh                             8

/**
 * Message SRR_FR_3BBh cycle time.
 */
#define CYCLE_SRR_FR_3BBh                           0

/**
 * Message SRR_FR_3BBh fast cycle time.
 */
#define FAST_SRR_FR_3BBh                            0

/**
 * Initialise message SRR_FR_3BBh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3BBh(buf) { \
	INITSIG_SRR_FR_3BBh_RdrObjChks2_FR_5(buf); \
	INITSIG_SRR_FR_3BBh_RdrObjDx_FR_5(buf); \
	INITSIG_SRR_FR_3BBh_RdrObjTiAlv_FR_5(buf); \
	INITSIG_SRR_FR_3BBh_RdrObjVy_FR_5(buf); \
	INITSIG_SRR_FR_3BBh_RdrObjVx_FR_5(buf); \
	INITSIG_SRR_FR_3BBh_RdrObjWth_FR_5(buf); \
	INITSIG_SRR_FR_3BBh_RdrObjHeading_FR_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3BCh Message SRR_FR_3BCh (0x3bc)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3BCh_RdrObjChks_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjCntr_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjAy_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjAx_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjCoast_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjConf_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjMtnPat_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjID_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjTyp_FR_6
 * - \ref SIG_SRR_FR_3BCh_RdrObjDy_FR_6
 *
 * @{
 */

/**
 * Message SRR_FR_3BCh configuration tuple.
 */
#define MSG_SRR_FR_3BCh                             0x3bc, 0, 8

/**
 * Message SRR_FR_3BCh id.
 */
#define ID_SRR_FR_3BCh                              0x3bc

/**
 * Message SRR_FR_3BCh extended id bit.
 */
#define EXT_SRR_FR_3BCh                             0

/**
 * Message SRR_FR_3BCh Data Length Count.
 */
#define DLC_SRR_FR_3BCh                             8

/**
 * Message SRR_FR_3BCh cycle time.
 */
#define CYCLE_SRR_FR_3BCh                           0

/**
 * Message SRR_FR_3BCh fast cycle time.
 */
#define FAST_SRR_FR_3BCh                            0

/**
 * Initialise message SRR_FR_3BCh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3BCh(buf) { \
	INITSIG_SRR_FR_3BCh_RdrObjChks_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjCntr_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjAy_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjAx_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjCoast_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjConf_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjMtnPat_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjID_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjTyp_FR_6(buf); \
	INITSIG_SRR_FR_3BCh_RdrObjDy_FR_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3BDh Message SRR_FR_3BDh (0x3bd)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3BDh_RdrObjChks2_FR_6
 * - \ref SIG_SRR_FR_3BDh_RdrObjDx_FR_6
 * - \ref SIG_SRR_FR_3BDh_RdrObjTiAlv_FR_6
 * - \ref SIG_SRR_FR_3BDh_RdrObjVy_FR_6
 * - \ref SIG_SRR_FR_3BDh_RdrObjVx_FR_6
 * - \ref SIG_SRR_FR_3BDh_RdrObjWth_FR_6
 * - \ref SIG_SRR_FR_3BDh_RdrObjHeading_FR_6
 *
 * @{
 */

/**
 * Message SRR_FR_3BDh configuration tuple.
 */
#define MSG_SRR_FR_3BDh                             0x3bd, 0, 8

/**
 * Message SRR_FR_3BDh id.
 */
#define ID_SRR_FR_3BDh                              0x3bd

/**
 * Message SRR_FR_3BDh extended id bit.
 */
#define EXT_SRR_FR_3BDh                             0

/**
 * Message SRR_FR_3BDh Data Length Count.
 */
#define DLC_SRR_FR_3BDh                             8

/**
 * Message SRR_FR_3BDh cycle time.
 */
#define CYCLE_SRR_FR_3BDh                           0

/**
 * Message SRR_FR_3BDh fast cycle time.
 */
#define FAST_SRR_FR_3BDh                            0

/**
 * Initialise message SRR_FR_3BDh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3BDh(buf) { \
	INITSIG_SRR_FR_3BDh_RdrObjChks2_FR_6(buf); \
	INITSIG_SRR_FR_3BDh_RdrObjDx_FR_6(buf); \
	INITSIG_SRR_FR_3BDh_RdrObjTiAlv_FR_6(buf); \
	INITSIG_SRR_FR_3BDh_RdrObjVy_FR_6(buf); \
	INITSIG_SRR_FR_3BDh_RdrObjVx_FR_6(buf); \
	INITSIG_SRR_FR_3BDh_RdrObjWth_FR_6(buf); \
	INITSIG_SRR_FR_3BDh_RdrObjHeading_FR_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3BEh Message SRR_FR_3BEh (0x3be)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3BEh_RdrObjChks_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjCntr_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjAy_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjAx_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjCoast_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjConf_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjMtnPat_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjID_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjTyp_FR_7
 * - \ref SIG_SRR_FR_3BEh_RdrObjDy_FR_7
 *
 * @{
 */

/**
 * Message SRR_FR_3BEh configuration tuple.
 */
#define MSG_SRR_FR_3BEh                             0x3be, 0, 8

/**
 * Message SRR_FR_3BEh id.
 */
#define ID_SRR_FR_3BEh                              0x3be

/**
 * Message SRR_FR_3BEh extended id bit.
 */
#define EXT_SRR_FR_3BEh                             0

/**
 * Message SRR_FR_3BEh Data Length Count.
 */
#define DLC_SRR_FR_3BEh                             8

/**
 * Message SRR_FR_3BEh cycle time.
 */
#define CYCLE_SRR_FR_3BEh                           0

/**
 * Message SRR_FR_3BEh fast cycle time.
 */
#define FAST_SRR_FR_3BEh                            0

/**
 * Initialise message SRR_FR_3BEh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3BEh(buf) { \
	INITSIG_SRR_FR_3BEh_RdrObjChks_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjCntr_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjAy_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjAx_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjCoast_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjConf_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjMtnPat_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjID_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjTyp_FR_7(buf); \
	INITSIG_SRR_FR_3BEh_RdrObjDy_FR_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3BFh Message SRR_FR_3BFh (0x3bf)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3BFh_RdrObjChks2_FR_7
 * - \ref SIG_SRR_FR_3BFh_RdrObjDx_FR_7
 * - \ref SIG_SRR_FR_3BFh_RdrObjTiAlv_FR_7
 * - \ref SIG_SRR_FR_3BFh_RdrObjVy_FR_7
 * - \ref SIG_SRR_FR_3BFh_RdrObjVx_FR_7
 * - \ref SIG_SRR_FR_3BFh_RdrObjWth_FR_7
 * - \ref SIG_SRR_FR_3BFh_RdrObjHeading_FR_7
 *
 * @{
 */

/**
 * Message SRR_FR_3BFh configuration tuple.
 */
#define MSG_SRR_FR_3BFh                             0x3bf, 0, 8

/**
 * Message SRR_FR_3BFh id.
 */
#define ID_SRR_FR_3BFh                              0x3bf

/**
 * Message SRR_FR_3BFh extended id bit.
 */
#define EXT_SRR_FR_3BFh                             0

/**
 * Message SRR_FR_3BFh Data Length Count.
 */
#define DLC_SRR_FR_3BFh                             8

/**
 * Message SRR_FR_3BFh cycle time.
 */
#define CYCLE_SRR_FR_3BFh                           0

/**
 * Message SRR_FR_3BFh fast cycle time.
 */
#define FAST_SRR_FR_3BFh                            0

/**
 * Initialise message SRR_FR_3BFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3BFh(buf) { \
	INITSIG_SRR_FR_3BFh_RdrObjChks2_FR_7(buf); \
	INITSIG_SRR_FR_3BFh_RdrObjDx_FR_7(buf); \
	INITSIG_SRR_FR_3BFh_RdrObjTiAlv_FR_7(buf); \
	INITSIG_SRR_FR_3BFh_RdrObjVy_FR_7(buf); \
	INITSIG_SRR_FR_3BFh_RdrObjVx_FR_7(buf); \
	INITSIG_SRR_FR_3BFh_RdrObjWth_FR_7(buf); \
	INITSIG_SRR_FR_3BFh_RdrObjHeading_FR_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C0h Message SRR_FR_3C0h (0x3c0)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C0h_RdrObjChks_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjCntr_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjAy_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjAx_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjCoast_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjConf_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjMtnPat_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjID_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjTyp_FR_8
 * - \ref SIG_SRR_FR_3C0h_RdrObjDy_FR_8
 *
 * @{
 */

/**
 * Message SRR_FR_3C0h configuration tuple.
 */
#define MSG_SRR_FR_3C0h                             0x3c0, 0, 8

/**
 * Message SRR_FR_3C0h id.
 */
#define ID_SRR_FR_3C0h                              0x3c0

/**
 * Message SRR_FR_3C0h extended id bit.
 */
#define EXT_SRR_FR_3C0h                             0

/**
 * Message SRR_FR_3C0h Data Length Count.
 */
#define DLC_SRR_FR_3C0h                             8

/**
 * Message SRR_FR_3C0h cycle time.
 */
#define CYCLE_SRR_FR_3C0h                           0

/**
 * Message SRR_FR_3C0h fast cycle time.
 */
#define FAST_SRR_FR_3C0h                            0

/**
 * Initialise message SRR_FR_3C0h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C0h(buf) { \
	INITSIG_SRR_FR_3C0h_RdrObjChks_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjCntr_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjAy_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjAx_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjCoast_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjConf_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjMtnPat_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjID_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjTyp_FR_8(buf); \
	INITSIG_SRR_FR_3C0h_RdrObjDy_FR_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C1h Message SRR_FR_3C1h (0x3c1)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C1h_RdrObjChks2_FR_8
 * - \ref SIG_SRR_FR_3C1h_RdrObjDx_FR_8
 * - \ref SIG_SRR_FR_3C1h_RdrObjTiAlv_FR_8
 * - \ref SIG_SRR_FR_3C1h_RdrObjVy_FR_8
 * - \ref SIG_SRR_FR_3C1h_RdrObjVx_FR_8
 * - \ref SIG_SRR_FR_3C1h_RdrObjWth_FR_8
 * - \ref SIG_SRR_FR_3C1h_RdrObjHeading_FR_8
 *
 * @{
 */

/**
 * Message SRR_FR_3C1h configuration tuple.
 */
#define MSG_SRR_FR_3C1h                             0x3c1, 0, 8

/**
 * Message SRR_FR_3C1h id.
 */
#define ID_SRR_FR_3C1h                              0x3c1

/**
 * Message SRR_FR_3C1h extended id bit.
 */
#define EXT_SRR_FR_3C1h                             0

/**
 * Message SRR_FR_3C1h Data Length Count.
 */
#define DLC_SRR_FR_3C1h                             8

/**
 * Message SRR_FR_3C1h cycle time.
 */
#define CYCLE_SRR_FR_3C1h                           0

/**
 * Message SRR_FR_3C1h fast cycle time.
 */
#define FAST_SRR_FR_3C1h                            0

/**
 * Initialise message SRR_FR_3C1h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C1h(buf) { \
	INITSIG_SRR_FR_3C1h_RdrObjChks2_FR_8(buf); \
	INITSIG_SRR_FR_3C1h_RdrObjDx_FR_8(buf); \
	INITSIG_SRR_FR_3C1h_RdrObjTiAlv_FR_8(buf); \
	INITSIG_SRR_FR_3C1h_RdrObjVy_FR_8(buf); \
	INITSIG_SRR_FR_3C1h_RdrObjVx_FR_8(buf); \
	INITSIG_SRR_FR_3C1h_RdrObjWth_FR_8(buf); \
	INITSIG_SRR_FR_3C1h_RdrObjHeading_FR_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C2h Message SRR_FR_3C2h (0x3c2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C2h_RdrObjChks_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjCntr_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjAy_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjAx_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjCoast_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjConf_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjMtnPat_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjID_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjTyp_FR_9
 * - \ref SIG_SRR_FR_3C2h_RdrObjDy_FR_9
 *
 * @{
 */

/**
 * Message SRR_FR_3C2h configuration tuple.
 */
#define MSG_SRR_FR_3C2h                             0x3c2, 0, 8

/**
 * Message SRR_FR_3C2h id.
 */
#define ID_SRR_FR_3C2h                              0x3c2

/**
 * Message SRR_FR_3C2h extended id bit.
 */
#define EXT_SRR_FR_3C2h                             0

/**
 * Message SRR_FR_3C2h Data Length Count.
 */
#define DLC_SRR_FR_3C2h                             8

/**
 * Message SRR_FR_3C2h cycle time.
 */
#define CYCLE_SRR_FR_3C2h                           0

/**
 * Message SRR_FR_3C2h fast cycle time.
 */
#define FAST_SRR_FR_3C2h                            0

/**
 * Initialise message SRR_FR_3C2h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C2h(buf) { \
	INITSIG_SRR_FR_3C2h_RdrObjChks_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjCntr_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjAy_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjAx_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjCoast_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjConf_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjMtnPat_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjID_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjTyp_FR_9(buf); \
	INITSIG_SRR_FR_3C2h_RdrObjDy_FR_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C3h Message SRR_FR_3C3h (0x3c3)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C3h_RdrObjChks2_FR_9
 * - \ref SIG_SRR_FR_3C3h_RdrObjDx_FR_9
 * - \ref SIG_SRR_FR_3C3h_RdrObjTiAlv_FR_9
 * - \ref SIG_SRR_FR_3C3h_RdrObjVy_FR_9
 * - \ref SIG_SRR_FR_3C3h_RdrObjVx_FR_9
 * - \ref SIG_SRR_FR_3C3h_RdrObjWth_FR_9
 * - \ref SIG_SRR_FR_3C3h_RdrObjHeading_FR_9
 *
 * @{
 */

/**
 * Message SRR_FR_3C3h configuration tuple.
 */
#define MSG_SRR_FR_3C3h                             0x3c3, 0, 8

/**
 * Message SRR_FR_3C3h id.
 */
#define ID_SRR_FR_3C3h                              0x3c3

/**
 * Message SRR_FR_3C3h extended id bit.
 */
#define EXT_SRR_FR_3C3h                             0

/**
 * Message SRR_FR_3C3h Data Length Count.
 */
#define DLC_SRR_FR_3C3h                             8

/**
 * Message SRR_FR_3C3h cycle time.
 */
#define CYCLE_SRR_FR_3C3h                           0

/**
 * Message SRR_FR_3C3h fast cycle time.
 */
#define FAST_SRR_FR_3C3h                            0

/**
 * Initialise message SRR_FR_3C3h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C3h(buf) { \
	INITSIG_SRR_FR_3C3h_RdrObjChks2_FR_9(buf); \
	INITSIG_SRR_FR_3C3h_RdrObjDx_FR_9(buf); \
	INITSIG_SRR_FR_3C3h_RdrObjTiAlv_FR_9(buf); \
	INITSIG_SRR_FR_3C3h_RdrObjVy_FR_9(buf); \
	INITSIG_SRR_FR_3C3h_RdrObjVx_FR_9(buf); \
	INITSIG_SRR_FR_3C3h_RdrObjWth_FR_9(buf); \
	INITSIG_SRR_FR_3C3h_RdrObjHeading_FR_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C4h Message SRR_FR_3C4h (0x3c4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C4h_RdrObjChks_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjCntr_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjAy_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjAx_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjCoast_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjConf_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjMtnPat_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjID_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjTyp_FR_10
 * - \ref SIG_SRR_FR_3C4h_RdrObjDy_FR_10
 *
 * @{
 */

/**
 * Message SRR_FR_3C4h configuration tuple.
 */
#define MSG_SRR_FR_3C4h                             0x3c4, 0, 8

/**
 * Message SRR_FR_3C4h id.
 */
#define ID_SRR_FR_3C4h                              0x3c4

/**
 * Message SRR_FR_3C4h extended id bit.
 */
#define EXT_SRR_FR_3C4h                             0

/**
 * Message SRR_FR_3C4h Data Length Count.
 */
#define DLC_SRR_FR_3C4h                             8

/**
 * Message SRR_FR_3C4h cycle time.
 */
#define CYCLE_SRR_FR_3C4h                           0

/**
 * Message SRR_FR_3C4h fast cycle time.
 */
#define FAST_SRR_FR_3C4h                            0

/**
 * Initialise message SRR_FR_3C4h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C4h(buf) { \
	INITSIG_SRR_FR_3C4h_RdrObjChks_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjCntr_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjAy_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjAx_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjCoast_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjConf_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjMtnPat_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjID_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjTyp_FR_10(buf); \
	INITSIG_SRR_FR_3C4h_RdrObjDy_FR_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C5h Message SRR_FR_3C5h (0x3c5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C5h_RdrObjChks2_FR_10
 * - \ref SIG_SRR_FR_3C5h_RdrObjDx_FR_10
 * - \ref SIG_SRR_FR_3C5h_RdrObjTiAlv_FR_10
 * - \ref SIG_SRR_FR_3C5h_RdrObjVy_FR_10
 * - \ref SIG_SRR_FR_3C5h_RdrObjVx_FR_10
 * - \ref SIG_SRR_FR_3C5h_RdrObjWth_FR_10
 * - \ref SIG_SRR_FR_3C5h_RdrObjHeading_FR_10
 *
 * @{
 */

/**
 * Message SRR_FR_3C5h configuration tuple.
 */
#define MSG_SRR_FR_3C5h                             0x3c5, 0, 8

/**
 * Message SRR_FR_3C5h id.
 */
#define ID_SRR_FR_3C5h                              0x3c5

/**
 * Message SRR_FR_3C5h extended id bit.
 */
#define EXT_SRR_FR_3C5h                             0

/**
 * Message SRR_FR_3C5h Data Length Count.
 */
#define DLC_SRR_FR_3C5h                             8

/**
 * Message SRR_FR_3C5h cycle time.
 */
#define CYCLE_SRR_FR_3C5h                           0

/**
 * Message SRR_FR_3C5h fast cycle time.
 */
#define FAST_SRR_FR_3C5h                            0

/**
 * Initialise message SRR_FR_3C5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C5h(buf) { \
	INITSIG_SRR_FR_3C5h_RdrObjChks2_FR_10(buf); \
	INITSIG_SRR_FR_3C5h_RdrObjDx_FR_10(buf); \
	INITSIG_SRR_FR_3C5h_RdrObjTiAlv_FR_10(buf); \
	INITSIG_SRR_FR_3C5h_RdrObjVy_FR_10(buf); \
	INITSIG_SRR_FR_3C5h_RdrObjVx_FR_10(buf); \
	INITSIG_SRR_FR_3C5h_RdrObjWth_FR_10(buf); \
	INITSIG_SRR_FR_3C5h_RdrObjHeading_FR_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C6h Message SRR_FR_3C6h (0x3c6)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C6h_RdrObjChks_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjCntr_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjAy_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjAx_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjCoast_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjConf_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjMtnPat_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjID_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjTyp_FR_11
 * - \ref SIG_SRR_FR_3C6h_RdrObjDy_FR_11
 *
 * @{
 */

/**
 * Message SRR_FR_3C6h configuration tuple.
 */
#define MSG_SRR_FR_3C6h                             0x3c6, 0, 8

/**
 * Message SRR_FR_3C6h id.
 */
#define ID_SRR_FR_3C6h                              0x3c6

/**
 * Message SRR_FR_3C6h extended id bit.
 */
#define EXT_SRR_FR_3C6h                             0

/**
 * Message SRR_FR_3C6h Data Length Count.
 */
#define DLC_SRR_FR_3C6h                             8

/**
 * Message SRR_FR_3C6h cycle time.
 */
#define CYCLE_SRR_FR_3C6h                           0

/**
 * Message SRR_FR_3C6h fast cycle time.
 */
#define FAST_SRR_FR_3C6h                            0

/**
 * Initialise message SRR_FR_3C6h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C6h(buf) { \
	INITSIG_SRR_FR_3C6h_RdrObjChks_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjCntr_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjAy_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjAx_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjCoast_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjConf_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjMtnPat_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjID_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjTyp_FR_11(buf); \
	INITSIG_SRR_FR_3C6h_RdrObjDy_FR_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C7h Message SRR_FR_3C7h (0x3c7)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C7h_RdrObjChks2_FR_11
 * - \ref SIG_SRR_FR_3C7h_RdrObjDx_FR_11
 * - \ref SIG_SRR_FR_3C7h_RdrObjTiAlv_FR_11
 * - \ref SIG_SRR_FR_3C7h_RdrObjVy_FR_11
 * - \ref SIG_SRR_FR_3C7h_RdrObjVx_FR_11
 * - \ref SIG_SRR_FR_3C7h_RdrObjWth_FR_11
 * - \ref SIG_SRR_FR_3C7h_RdrObjHeading_FR_11
 *
 * @{
 */

/**
 * Message SRR_FR_3C7h configuration tuple.
 */
#define MSG_SRR_FR_3C7h                             0x3c7, 0, 8

/**
 * Message SRR_FR_3C7h id.
 */
#define ID_SRR_FR_3C7h                              0x3c7

/**
 * Message SRR_FR_3C7h extended id bit.
 */
#define EXT_SRR_FR_3C7h                             0

/**
 * Message SRR_FR_3C7h Data Length Count.
 */
#define DLC_SRR_FR_3C7h                             8

/**
 * Message SRR_FR_3C7h cycle time.
 */
#define CYCLE_SRR_FR_3C7h                           0

/**
 * Message SRR_FR_3C7h fast cycle time.
 */
#define FAST_SRR_FR_3C7h                            0

/**
 * Initialise message SRR_FR_3C7h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C7h(buf) { \
	INITSIG_SRR_FR_3C7h_RdrObjChks2_FR_11(buf); \
	INITSIG_SRR_FR_3C7h_RdrObjDx_FR_11(buf); \
	INITSIG_SRR_FR_3C7h_RdrObjTiAlv_FR_11(buf); \
	INITSIG_SRR_FR_3C7h_RdrObjVy_FR_11(buf); \
	INITSIG_SRR_FR_3C7h_RdrObjVx_FR_11(buf); \
	INITSIG_SRR_FR_3C7h_RdrObjWth_FR_11(buf); \
	INITSIG_SRR_FR_3C7h_RdrObjHeading_FR_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C8h Message SRR_FR_3C8h (0x3c8)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C8h_RdrObjChks_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjCntr_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjAy_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjAx_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjCoast_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjConf_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjMtnPat_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjID_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjTyp_FR_12
 * - \ref SIG_SRR_FR_3C8h_RdrObjDy_FR_12
 *
 * @{
 */

/**
 * Message SRR_FR_3C8h configuration tuple.
 */
#define MSG_SRR_FR_3C8h                             0x3c8, 0, 8

/**
 * Message SRR_FR_3C8h id.
 */
#define ID_SRR_FR_3C8h                              0x3c8

/**
 * Message SRR_FR_3C8h extended id bit.
 */
#define EXT_SRR_FR_3C8h                             0

/**
 * Message SRR_FR_3C8h Data Length Count.
 */
#define DLC_SRR_FR_3C8h                             8

/**
 * Message SRR_FR_3C8h cycle time.
 */
#define CYCLE_SRR_FR_3C8h                           0

/**
 * Message SRR_FR_3C8h fast cycle time.
 */
#define FAST_SRR_FR_3C8h                            0

/**
 * Initialise message SRR_FR_3C8h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C8h(buf) { \
	INITSIG_SRR_FR_3C8h_RdrObjChks_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjCntr_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjAy_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjAx_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjCoast_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjConf_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjMtnPat_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjID_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjTyp_FR_12(buf); \
	INITSIG_SRR_FR_3C8h_RdrObjDy_FR_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3C9h Message SRR_FR_3C9h (0x3c9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3C9h_RdrObjChks2_FR_12
 * - \ref SIG_SRR_FR_3C9h_RdrObjDx_FR_12
 * - \ref SIG_SRR_FR_3C9h_RdrObjTiAlv_FR_12
 * - \ref SIG_SRR_FR_3C9h_RdrObjVy_FR_12
 * - \ref SIG_SRR_FR_3C9h_RdrObjVx_FR_12
 * - \ref SIG_SRR_FR_3C9h_RdrObjWth_FR_12
 * - \ref SIG_SRR_FR_3C9h_RdrObjHeading_FR_12
 *
 * @{
 */

/**
 * Message SRR_FR_3C9h configuration tuple.
 */
#define MSG_SRR_FR_3C9h                             0x3c9, 0, 8

/**
 * Message SRR_FR_3C9h id.
 */
#define ID_SRR_FR_3C9h                              0x3c9

/**
 * Message SRR_FR_3C9h extended id bit.
 */
#define EXT_SRR_FR_3C9h                             0

/**
 * Message SRR_FR_3C9h Data Length Count.
 */
#define DLC_SRR_FR_3C9h                             8

/**
 * Message SRR_FR_3C9h cycle time.
 */
#define CYCLE_SRR_FR_3C9h                           0

/**
 * Message SRR_FR_3C9h fast cycle time.
 */
#define FAST_SRR_FR_3C9h                            0

/**
 * Initialise message SRR_FR_3C9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3C9h(buf) { \
	INITSIG_SRR_FR_3C9h_RdrObjChks2_FR_12(buf); \
	INITSIG_SRR_FR_3C9h_RdrObjDx_FR_12(buf); \
	INITSIG_SRR_FR_3C9h_RdrObjTiAlv_FR_12(buf); \
	INITSIG_SRR_FR_3C9h_RdrObjVy_FR_12(buf); \
	INITSIG_SRR_FR_3C9h_RdrObjVx_FR_12(buf); \
	INITSIG_SRR_FR_3C9h_RdrObjWth_FR_12(buf); \
	INITSIG_SRR_FR_3C9h_RdrObjHeading_FR_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3CAh Message SRR_FR_3CAh (0x3ca)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3CAh_RdrObjChks_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjCntr_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjAy_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjAx_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjCoast_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjConf_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjMtnPat_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjID_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjTyp_FR_13
 * - \ref SIG_SRR_FR_3CAh_RdrObjDy_FR_13
 *
 * @{
 */

/**
 * Message SRR_FR_3CAh configuration tuple.
 */
#define MSG_SRR_FR_3CAh                             0x3ca, 0, 8

/**
 * Message SRR_FR_3CAh id.
 */
#define ID_SRR_FR_3CAh                              0x3ca

/**
 * Message SRR_FR_3CAh extended id bit.
 */
#define EXT_SRR_FR_3CAh                             0

/**
 * Message SRR_FR_3CAh Data Length Count.
 */
#define DLC_SRR_FR_3CAh                             8

/**
 * Message SRR_FR_3CAh cycle time.
 */
#define CYCLE_SRR_FR_3CAh                           0

/**
 * Message SRR_FR_3CAh fast cycle time.
 */
#define FAST_SRR_FR_3CAh                            0

/**
 * Initialise message SRR_FR_3CAh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3CAh(buf) { \
	INITSIG_SRR_FR_3CAh_RdrObjChks_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjCntr_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjAy_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjAx_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjCoast_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjConf_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjMtnPat_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjID_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjTyp_FR_13(buf); \
	INITSIG_SRR_FR_3CAh_RdrObjDy_FR_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3CBh Message SRR_FR_3CBh (0x3cb)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3CBh_RdrObjChks2_FR_13
 * - \ref SIG_SRR_FR_3CBh_RdrObjDx_FR_13
 * - \ref SIG_SRR_FR_3CBh_RdrObjTiAlv_FR_13
 * - \ref SIG_SRR_FR_3CBh_RdrObjVy_FR_13
 * - \ref SIG_SRR_FR_3CBh_RdrObjVx_FR_13
 * - \ref SIG_SRR_FR_3CBh_RdrObjWth_FR_13
 * - \ref SIG_SRR_FR_3CBh_RdrObjHeading_FR_13
 *
 * @{
 */

/**
 * Message SRR_FR_3CBh configuration tuple.
 */
#define MSG_SRR_FR_3CBh                             0x3cb, 0, 8

/**
 * Message SRR_FR_3CBh id.
 */
#define ID_SRR_FR_3CBh                              0x3cb

/**
 * Message SRR_FR_3CBh extended id bit.
 */
#define EXT_SRR_FR_3CBh                             0

/**
 * Message SRR_FR_3CBh Data Length Count.
 */
#define DLC_SRR_FR_3CBh                             8

/**
 * Message SRR_FR_3CBh cycle time.
 */
#define CYCLE_SRR_FR_3CBh                           0

/**
 * Message SRR_FR_3CBh fast cycle time.
 */
#define FAST_SRR_FR_3CBh                            0

/**
 * Initialise message SRR_FR_3CBh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3CBh(buf) { \
	INITSIG_SRR_FR_3CBh_RdrObjChks2_FR_13(buf); \
	INITSIG_SRR_FR_3CBh_RdrObjDx_FR_13(buf); \
	INITSIG_SRR_FR_3CBh_RdrObjTiAlv_FR_13(buf); \
	INITSIG_SRR_FR_3CBh_RdrObjVy_FR_13(buf); \
	INITSIG_SRR_FR_3CBh_RdrObjVx_FR_13(buf); \
	INITSIG_SRR_FR_3CBh_RdrObjWth_FR_13(buf); \
	INITSIG_SRR_FR_3CBh_RdrObjHeading_FR_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3CCh Message SRR_FR_3CCh (0x3cc)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3CCh_RdrObjChks_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjCntr_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjAy_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjAx_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjCoast_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjConf_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjMtnPat_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjID_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjTyp_FR_14
 * - \ref SIG_SRR_FR_3CCh_RdrObjDy_FR_14
 *
 * @{
 */

/**
 * Message SRR_FR_3CCh configuration tuple.
 */
#define MSG_SRR_FR_3CCh                             0x3cc, 0, 8

/**
 * Message SRR_FR_3CCh id.
 */
#define ID_SRR_FR_3CCh                              0x3cc

/**
 * Message SRR_FR_3CCh extended id bit.
 */
#define EXT_SRR_FR_3CCh                             0

/**
 * Message SRR_FR_3CCh Data Length Count.
 */
#define DLC_SRR_FR_3CCh                             8

/**
 * Message SRR_FR_3CCh cycle time.
 */
#define CYCLE_SRR_FR_3CCh                           0

/**
 * Message SRR_FR_3CCh fast cycle time.
 */
#define FAST_SRR_FR_3CCh                            0

/**
 * Initialise message SRR_FR_3CCh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3CCh(buf) { \
	INITSIG_SRR_FR_3CCh_RdrObjChks_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjCntr_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjAy_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjAx_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjCoast_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjConf_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjMtnPat_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjID_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjTyp_FR_14(buf); \
	INITSIG_SRR_FR_3CCh_RdrObjDy_FR_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3CDh Message SRR_FR_3CDh (0x3cd)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3CDh_RdrObjChks2_FR_14
 * - \ref SIG_SRR_FR_3CDh_RdrObjDx_FR_14
 * - \ref SIG_SRR_FR_3CDh_RdrObjTiAlv_FR_14
 * - \ref SIG_SRR_FR_3CDh_RdrObjVy_FR_14
 * - \ref SIG_SRR_FR_3CDh_RdrObjVx_FR_14
 * - \ref SIG_SRR_FR_3CDh_RdrObjWth_FR_14
 * - \ref SIG_SRR_FR_3CDh_RdrObjHeading_FR_14
 *
 * @{
 */

/**
 * Message SRR_FR_3CDh configuration tuple.
 */
#define MSG_SRR_FR_3CDh                             0x3cd, 0, 8

/**
 * Message SRR_FR_3CDh id.
 */
#define ID_SRR_FR_3CDh                              0x3cd

/**
 * Message SRR_FR_3CDh extended id bit.
 */
#define EXT_SRR_FR_3CDh                             0

/**
 * Message SRR_FR_3CDh Data Length Count.
 */
#define DLC_SRR_FR_3CDh                             8

/**
 * Message SRR_FR_3CDh cycle time.
 */
#define CYCLE_SRR_FR_3CDh                           0

/**
 * Message SRR_FR_3CDh fast cycle time.
 */
#define FAST_SRR_FR_3CDh                            0

/**
 * Initialise message SRR_FR_3CDh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3CDh(buf) { \
	INITSIG_SRR_FR_3CDh_RdrObjChks2_FR_14(buf); \
	INITSIG_SRR_FR_3CDh_RdrObjDx_FR_14(buf); \
	INITSIG_SRR_FR_3CDh_RdrObjTiAlv_FR_14(buf); \
	INITSIG_SRR_FR_3CDh_RdrObjVy_FR_14(buf); \
	INITSIG_SRR_FR_3CDh_RdrObjVx_FR_14(buf); \
	INITSIG_SRR_FR_3CDh_RdrObjWth_FR_14(buf); \
	INITSIG_SRR_FR_3CDh_RdrObjHeading_FR_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3CEh Message SRR_FR_3CEh (0x3ce)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3CEh_RdrObjChks_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjCntr_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjAy_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjAx_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjCoast_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjConf_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjMtnPat_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjID_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjTyp_FR_15
 * - \ref SIG_SRR_FR_3CEh_RdrObjDy_FR_15
 *
 * @{
 */

/**
 * Message SRR_FR_3CEh configuration tuple.
 */
#define MSG_SRR_FR_3CEh                             0x3ce, 0, 8

/**
 * Message SRR_FR_3CEh id.
 */
#define ID_SRR_FR_3CEh                              0x3ce

/**
 * Message SRR_FR_3CEh extended id bit.
 */
#define EXT_SRR_FR_3CEh                             0

/**
 * Message SRR_FR_3CEh Data Length Count.
 */
#define DLC_SRR_FR_3CEh                             8

/**
 * Message SRR_FR_3CEh cycle time.
 */
#define CYCLE_SRR_FR_3CEh                           0

/**
 * Message SRR_FR_3CEh fast cycle time.
 */
#define FAST_SRR_FR_3CEh                            0

/**
 * Initialise message SRR_FR_3CEh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3CEh(buf) { \
	INITSIG_SRR_FR_3CEh_RdrObjChks_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjCntr_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjAy_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjAx_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjCoast_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjConf_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjMtnPat_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjID_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjTyp_FR_15(buf); \
	INITSIG_SRR_FR_3CEh_RdrObjDy_FR_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_FR_3CFh Message SRR_FR_3CFh (0x3cf)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_FR_3CFh_RdrObjChks2_FR_15
 * - \ref SIG_SRR_FR_3CFh_RdrObjDx_FR_15
 * - \ref SIG_SRR_FR_3CFh_RdrObjTiAlv_FR_15
 * - \ref SIG_SRR_FR_3CFh_RdrObjVy_FR_15
 * - \ref SIG_SRR_FR_3CFh_RdrObjVx_FR_15
 * - \ref SIG_SRR_FR_3CFh_RdrObjWth_FR_15
 * - \ref SIG_SRR_FR_3CFh_RdrObjHeading_FR_15
 *
 * @{
 */

/**
 * Message SRR_FR_3CFh configuration tuple.
 */
#define MSG_SRR_FR_3CFh                             0x3cf, 0, 8

/**
 * Message SRR_FR_3CFh id.
 */
#define ID_SRR_FR_3CFh                              0x3cf

/**
 * Message SRR_FR_3CFh extended id bit.
 */
#define EXT_SRR_FR_3CFh                             0

/**
 * Message SRR_FR_3CFh Data Length Count.
 */
#define DLC_SRR_FR_3CFh                             8

/**
 * Message SRR_FR_3CFh cycle time.
 */
#define CYCLE_SRR_FR_3CFh                           0

/**
 * Message SRR_FR_3CFh fast cycle time.
 */
#define FAST_SRR_FR_3CFh                            0

/**
 * Initialise message SRR_FR_3CFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_FR_3CFh(buf) { \
	INITSIG_SRR_FR_3CFh_RdrObjChks2_FR_15(buf); \
	INITSIG_SRR_FR_3CFh_RdrObjDx_FR_15(buf); \
	INITSIG_SRR_FR_3CFh_RdrObjTiAlv_FR_15(buf); \
	INITSIG_SRR_FR_3CFh_RdrObjVy_FR_15(buf); \
	INITSIG_SRR_FR_3CFh_RdrObjVx_FR_15(buf); \
	INITSIG_SRR_FR_3CFh_RdrObjWth_FR_15(buf); \
	INITSIG_SRR_FR_3CFh_RdrObjHeading_FR_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_Tester_708h Message IECU_Tester_708h (0x708)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_Tester_708h_TesterDiagRequestData_SRR_RL
 *
 * @{
 */

/**
 * Message IECU_Tester_708h configuration tuple.
 */
#define MSG_IECU_Tester_708h                        0x708, 0, 8

/**
 * Message IECU_Tester_708h id.
 */
#define ID_IECU_Tester_708h                         0x708

/**
 * Message IECU_Tester_708h extended id bit.
 */
#define EXT_IECU_Tester_708h                        0

/**
 * Message IECU_Tester_708h Data Length Count.
 */
#define DLC_IECU_Tester_708h                        8

/**
 * Message IECU_Tester_708h cycle time.
 */
#define CYCLE_IECU_Tester_708h                      0

/**
 * Message IECU_Tester_708h fast cycle time.
 */
#define FAST_IECU_Tester_708h                       0

/**
 * Initialise message IECU_Tester_708h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_Tester_708h(buf) { \
	INITSIG_IECU_Tester_708h_TesterDiagRequestData_SRR_RL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_788h Message SRR_RL_788h (0x788)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_788h_SRR_RLDiagResponseData
 *
 * @{
 */

/**
 * Message SRR_RL_788h configuration tuple.
 */
#define MSG_SRR_RL_788h                             0x788, 0, 8

/**
 * Message SRR_RL_788h id.
 */
#define ID_SRR_RL_788h                              0x788

/**
 * Message SRR_RL_788h extended id bit.
 */
#define EXT_SRR_RL_788h                             0

/**
 * Message SRR_RL_788h Data Length Count.
 */
#define DLC_SRR_RL_788h                             8

/**
 * Message SRR_RL_788h cycle time.
 */
#define CYCLE_SRR_RL_788h                           0

/**
 * Message SRR_RL_788h fast cycle time.
 */
#define FAST_SRR_RL_788h                            0

/**
 * Initialise message SRR_RL_788h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_788h(buf) { \
	INITSIG_SRR_RL_788h_SRR_RLDiagResponseData(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_590h Message SRR_RL_590h (0x590)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_590h_RdrStsChks_RL
 * - \ref SIG_SRR_RL_590h_RdrStsCntr_RL
 * - \ref SIG_SRR_RL_590h_RdrStsIfVersMajor_RL
 * - \ref SIG_SRR_RL_590h_RdrStsIfVersMiddle_RL
 * - \ref SIG_SRR_RL_590h_RdrStsIfVersMinor_RL
 * - \ref SIG_SRR_RL_590h_RdrStsTiStamp_RL
 *
 * @{
 */

/**
 * Message SRR_RL_590h configuration tuple.
 */
#define MSG_SRR_RL_590h                             0x590, 0, 8

/**
 * Message SRR_RL_590h id.
 */
#define ID_SRR_RL_590h                              0x590

/**
 * Message SRR_RL_590h extended id bit.
 */
#define EXT_SRR_RL_590h                             0

/**
 * Message SRR_RL_590h Data Length Count.
 */
#define DLC_SRR_RL_590h                             8

/**
 * Message SRR_RL_590h cycle time.
 */
#define CYCLE_SRR_RL_590h                           0

/**
 * Message SRR_RL_590h fast cycle time.
 */
#define FAST_SRR_RL_590h                            0

/**
 * Initialise message SRR_RL_590h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_590h(buf) { \
	INITSIG_SRR_RL_590h_RdrStsChks_RL(buf); \
	INITSIG_SRR_RL_590h_RdrStsCntr_RL(buf); \
	INITSIG_SRR_RL_590h_RdrStsIfVersMajor_RL(buf); \
	INITSIG_SRR_RL_590h_RdrStsIfVersMiddle_RL(buf); \
	INITSIG_SRR_RL_590h_RdrStsIfVersMinor_RL(buf); \
	INITSIG_SRR_RL_590h_RdrStsTiStamp_RL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_591h Message SRR_RL_591h (0x591)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_591h_Genrl_SnsrLatency_RL
 * - \ref SIG_SRR_RL_591h_RdrSysSts_RL
 *
 * @{
 */

/**
 * Message SRR_RL_591h configuration tuple.
 */
#define MSG_SRR_RL_591h                             0x591, 0, 8

/**
 * Message SRR_RL_591h id.
 */
#define ID_SRR_RL_591h                              0x591

/**
 * Message SRR_RL_591h extended id bit.
 */
#define EXT_SRR_RL_591h                             0

/**
 * Message SRR_RL_591h Data Length Count.
 */
#define DLC_SRR_RL_591h                             8

/**
 * Message SRR_RL_591h cycle time.
 */
#define CYCLE_SRR_RL_591h                           0

/**
 * Message SRR_RL_591h fast cycle time.
 */
#define FAST_SRR_RL_591h                            0

/**
 * Initialise message SRR_RL_591h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_591h(buf) { \
	INITSIG_SRR_RL_591h_Genrl_SnsrLatency_RL(buf); \
	INITSIG_SRR_RL_591h_RdrSysSts_RL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_592h Message SRR_RL_592h (0x592)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_592h_RdrObjChks_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjCntr_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjAy_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjAx_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjCoast_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjConf_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjMtnPat_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjID_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjTyp_RL_1
 * - \ref SIG_SRR_RL_592h_RdrObjDy_RL_1
 *
 * @{
 */

/**
 * Message SRR_RL_592h configuration tuple.
 */
#define MSG_SRR_RL_592h                             0x592, 0, 8

/**
 * Message SRR_RL_592h id.
 */
#define ID_SRR_RL_592h                              0x592

/**
 * Message SRR_RL_592h extended id bit.
 */
#define EXT_SRR_RL_592h                             0

/**
 * Message SRR_RL_592h Data Length Count.
 */
#define DLC_SRR_RL_592h                             8

/**
 * Message SRR_RL_592h cycle time.
 */
#define CYCLE_SRR_RL_592h                           0

/**
 * Message SRR_RL_592h fast cycle time.
 */
#define FAST_SRR_RL_592h                            0

/**
 * Initialise message SRR_RL_592h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_592h(buf) { \
	INITSIG_SRR_RL_592h_RdrObjChks_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjCntr_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjAy_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjAx_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjCoast_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjConf_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjMtnPat_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjID_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjTyp_RL_1(buf); \
	INITSIG_SRR_RL_592h_RdrObjDy_RL_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_593h Message SRR_RL_593h (0x593)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_593h_RdrObjChks2_RL_1
 * - \ref SIG_SRR_RL_593h_RdrObjDx_RL_1
 * - \ref SIG_SRR_RL_593h_RdrObjTiAlv_RL_1
 * - \ref SIG_SRR_RL_593h_RdrObjVy_RL_1
 * - \ref SIG_SRR_RL_593h_RdrObjVx_RL_1
 * - \ref SIG_SRR_RL_593h_RdrObjWth_RL_1
 * - \ref SIG_SRR_RL_593h_RdrObjHeading_RL_1
 *
 * @{
 */

/**
 * Message SRR_RL_593h configuration tuple.
 */
#define MSG_SRR_RL_593h                             0x593, 0, 8

/**
 * Message SRR_RL_593h id.
 */
#define ID_SRR_RL_593h                              0x593

/**
 * Message SRR_RL_593h extended id bit.
 */
#define EXT_SRR_RL_593h                             0

/**
 * Message SRR_RL_593h Data Length Count.
 */
#define DLC_SRR_RL_593h                             8

/**
 * Message SRR_RL_593h cycle time.
 */
#define CYCLE_SRR_RL_593h                           0

/**
 * Message SRR_RL_593h fast cycle time.
 */
#define FAST_SRR_RL_593h                            0

/**
 * Initialise message SRR_RL_593h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_593h(buf) { \
	INITSIG_SRR_RL_593h_RdrObjChks2_RL_1(buf); \
	INITSIG_SRR_RL_593h_RdrObjDx_RL_1(buf); \
	INITSIG_SRR_RL_593h_RdrObjTiAlv_RL_1(buf); \
	INITSIG_SRR_RL_593h_RdrObjVy_RL_1(buf); \
	INITSIG_SRR_RL_593h_RdrObjVx_RL_1(buf); \
	INITSIG_SRR_RL_593h_RdrObjWth_RL_1(buf); \
	INITSIG_SRR_RL_593h_RdrObjHeading_RL_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_594h Message SRR_RL_594h (0x594)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_594h_RdrObjChks_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjCntr_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjAy_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjAx_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjCoast_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjConf_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjMtnPat_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjID_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjTyp_RL_2
 * - \ref SIG_SRR_RL_594h_RdrObjDy_RL_2
 *
 * @{
 */

/**
 * Message SRR_RL_594h configuration tuple.
 */
#define MSG_SRR_RL_594h                             0x594, 0, 8

/**
 * Message SRR_RL_594h id.
 */
#define ID_SRR_RL_594h                              0x594

/**
 * Message SRR_RL_594h extended id bit.
 */
#define EXT_SRR_RL_594h                             0

/**
 * Message SRR_RL_594h Data Length Count.
 */
#define DLC_SRR_RL_594h                             8

/**
 * Message SRR_RL_594h cycle time.
 */
#define CYCLE_SRR_RL_594h                           0

/**
 * Message SRR_RL_594h fast cycle time.
 */
#define FAST_SRR_RL_594h                            0

/**
 * Initialise message SRR_RL_594h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_594h(buf) { \
	INITSIG_SRR_RL_594h_RdrObjChks_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjCntr_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjAy_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjAx_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjCoast_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjConf_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjMtnPat_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjID_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjTyp_RL_2(buf); \
	INITSIG_SRR_RL_594h_RdrObjDy_RL_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_595h Message SRR_RL_595h (0x595)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_595h_RdrObjChks2_RL_2
 * - \ref SIG_SRR_RL_595h_RdrObjDx_RL_2
 * - \ref SIG_SRR_RL_595h_RdrObjTiAlv_RL_2
 * - \ref SIG_SRR_RL_595h_RdrObjVy_RL_2
 * - \ref SIG_SRR_RL_595h_RdrObjVx_RL_2
 * - \ref SIG_SRR_RL_595h_RdrObjWth_RL_2
 * - \ref SIG_SRR_RL_595h_RdrObjHeading_RL_2
 *
 * @{
 */

/**
 * Message SRR_RL_595h configuration tuple.
 */
#define MSG_SRR_RL_595h                             0x595, 0, 8

/**
 * Message SRR_RL_595h id.
 */
#define ID_SRR_RL_595h                              0x595

/**
 * Message SRR_RL_595h extended id bit.
 */
#define EXT_SRR_RL_595h                             0

/**
 * Message SRR_RL_595h Data Length Count.
 */
#define DLC_SRR_RL_595h                             8

/**
 * Message SRR_RL_595h cycle time.
 */
#define CYCLE_SRR_RL_595h                           0

/**
 * Message SRR_RL_595h fast cycle time.
 */
#define FAST_SRR_RL_595h                            0

/**
 * Initialise message SRR_RL_595h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_595h(buf) { \
	INITSIG_SRR_RL_595h_RdrObjChks2_RL_2(buf); \
	INITSIG_SRR_RL_595h_RdrObjDx_RL_2(buf); \
	INITSIG_SRR_RL_595h_RdrObjTiAlv_RL_2(buf); \
	INITSIG_SRR_RL_595h_RdrObjVy_RL_2(buf); \
	INITSIG_SRR_RL_595h_RdrObjVx_RL_2(buf); \
	INITSIG_SRR_RL_595h_RdrObjWth_RL_2(buf); \
	INITSIG_SRR_RL_595h_RdrObjHeading_RL_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_596h Message SRR_RL_596h (0x596)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_596h_RdrObjChks_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjCntr_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjAy_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjAx_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjCoast_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjConf_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjMtnPat_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjID_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjTyp_RL_3
 * - \ref SIG_SRR_RL_596h_RdrObjDy_RL_3
 *
 * @{
 */

/**
 * Message SRR_RL_596h configuration tuple.
 */
#define MSG_SRR_RL_596h                             0x596, 0, 8

/**
 * Message SRR_RL_596h id.
 */
#define ID_SRR_RL_596h                              0x596

/**
 * Message SRR_RL_596h extended id bit.
 */
#define EXT_SRR_RL_596h                             0

/**
 * Message SRR_RL_596h Data Length Count.
 */
#define DLC_SRR_RL_596h                             8

/**
 * Message SRR_RL_596h cycle time.
 */
#define CYCLE_SRR_RL_596h                           0

/**
 * Message SRR_RL_596h fast cycle time.
 */
#define FAST_SRR_RL_596h                            0

/**
 * Initialise message SRR_RL_596h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_596h(buf) { \
	INITSIG_SRR_RL_596h_RdrObjChks_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjCntr_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjAy_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjAx_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjCoast_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjConf_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjMtnPat_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjID_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjTyp_RL_3(buf); \
	INITSIG_SRR_RL_596h_RdrObjDy_RL_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_597h Message SRR_RL_597h (0x597)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_597h_RdrObjChks2_RL_3
 * - \ref SIG_SRR_RL_597h_RdrObjDx_RL_3
 * - \ref SIG_SRR_RL_597h_RdrObjTiAlv_RL_3
 * - \ref SIG_SRR_RL_597h_RdrObjVy_RL_3
 * - \ref SIG_SRR_RL_597h_RdrObjVx_RL_3
 * - \ref SIG_SRR_RL_597h_RdrObjWth_RL_3
 * - \ref SIG_SRR_RL_597h_RdrObjHeading_RL_3
 *
 * @{
 */

/**
 * Message SRR_RL_597h configuration tuple.
 */
#define MSG_SRR_RL_597h                             0x597, 0, 8

/**
 * Message SRR_RL_597h id.
 */
#define ID_SRR_RL_597h                              0x597

/**
 * Message SRR_RL_597h extended id bit.
 */
#define EXT_SRR_RL_597h                             0

/**
 * Message SRR_RL_597h Data Length Count.
 */
#define DLC_SRR_RL_597h                             8

/**
 * Message SRR_RL_597h cycle time.
 */
#define CYCLE_SRR_RL_597h                           0

/**
 * Message SRR_RL_597h fast cycle time.
 */
#define FAST_SRR_RL_597h                            0

/**
 * Initialise message SRR_RL_597h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_597h(buf) { \
	INITSIG_SRR_RL_597h_RdrObjChks2_RL_3(buf); \
	INITSIG_SRR_RL_597h_RdrObjDx_RL_3(buf); \
	INITSIG_SRR_RL_597h_RdrObjTiAlv_RL_3(buf); \
	INITSIG_SRR_RL_597h_RdrObjVy_RL_3(buf); \
	INITSIG_SRR_RL_597h_RdrObjVx_RL_3(buf); \
	INITSIG_SRR_RL_597h_RdrObjWth_RL_3(buf); \
	INITSIG_SRR_RL_597h_RdrObjHeading_RL_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_598h Message SRR_RL_598h (0x598)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_598h_RdrObjChks_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjCntr_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjAy_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjAx_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjCoast_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjConf_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjMtnPat_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjID_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjTyp_RL_4
 * - \ref SIG_SRR_RL_598h_RdrObjDy_RL_4
 *
 * @{
 */

/**
 * Message SRR_RL_598h configuration tuple.
 */
#define MSG_SRR_RL_598h                             0x598, 0, 8

/**
 * Message SRR_RL_598h id.
 */
#define ID_SRR_RL_598h                              0x598

/**
 * Message SRR_RL_598h extended id bit.
 */
#define EXT_SRR_RL_598h                             0

/**
 * Message SRR_RL_598h Data Length Count.
 */
#define DLC_SRR_RL_598h                             8

/**
 * Message SRR_RL_598h cycle time.
 */
#define CYCLE_SRR_RL_598h                           0

/**
 * Message SRR_RL_598h fast cycle time.
 */
#define FAST_SRR_RL_598h                            0

/**
 * Initialise message SRR_RL_598h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_598h(buf) { \
	INITSIG_SRR_RL_598h_RdrObjChks_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjCntr_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjAy_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjAx_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjCoast_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjConf_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjMtnPat_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjID_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjTyp_RL_4(buf); \
	INITSIG_SRR_RL_598h_RdrObjDy_RL_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_599h Message SRR_RL_599h (0x599)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_599h_RdrObjChks2_RL_4
 * - \ref SIG_SRR_RL_599h_RdrObjDx_RL_4
 * - \ref SIG_SRR_RL_599h_RdrObjTiAlv_RL_4
 * - \ref SIG_SRR_RL_599h_RdrObjVy_RL_4
 * - \ref SIG_SRR_RL_599h_RdrObjVx_RL_4
 * - \ref SIG_SRR_RL_599h_RdrObjWth_RL_4
 * - \ref SIG_SRR_RL_599h_RdrObjHeading_RL_4
 *
 * @{
 */

/**
 * Message SRR_RL_599h configuration tuple.
 */
#define MSG_SRR_RL_599h                             0x599, 0, 8

/**
 * Message SRR_RL_599h id.
 */
#define ID_SRR_RL_599h                              0x599

/**
 * Message SRR_RL_599h extended id bit.
 */
#define EXT_SRR_RL_599h                             0

/**
 * Message SRR_RL_599h Data Length Count.
 */
#define DLC_SRR_RL_599h                             8

/**
 * Message SRR_RL_599h cycle time.
 */
#define CYCLE_SRR_RL_599h                           0

/**
 * Message SRR_RL_599h fast cycle time.
 */
#define FAST_SRR_RL_599h                            0

/**
 * Initialise message SRR_RL_599h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_599h(buf) { \
	INITSIG_SRR_RL_599h_RdrObjChks2_RL_4(buf); \
	INITSIG_SRR_RL_599h_RdrObjDx_RL_4(buf); \
	INITSIG_SRR_RL_599h_RdrObjTiAlv_RL_4(buf); \
	INITSIG_SRR_RL_599h_RdrObjVy_RL_4(buf); \
	INITSIG_SRR_RL_599h_RdrObjVx_RL_4(buf); \
	INITSIG_SRR_RL_599h_RdrObjWth_RL_4(buf); \
	INITSIG_SRR_RL_599h_RdrObjHeading_RL_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_59Ah Message SRR_RL_59Ah (0x59a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_59Ah_RdrObjChks_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjCntr_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjAy_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjAx_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjCoast_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjConf_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjMtnPat_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjID_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjTyp_RL_5
 * - \ref SIG_SRR_RL_59Ah_RdrObjDy_RL_5
 *
 * @{
 */

/**
 * Message SRR_RL_59Ah configuration tuple.
 */
#define MSG_SRR_RL_59Ah                             0x59a, 0, 8

/**
 * Message SRR_RL_59Ah id.
 */
#define ID_SRR_RL_59Ah                              0x59a

/**
 * Message SRR_RL_59Ah extended id bit.
 */
#define EXT_SRR_RL_59Ah                             0

/**
 * Message SRR_RL_59Ah Data Length Count.
 */
#define DLC_SRR_RL_59Ah                             8

/**
 * Message SRR_RL_59Ah cycle time.
 */
#define CYCLE_SRR_RL_59Ah                           0

/**
 * Message SRR_RL_59Ah fast cycle time.
 */
#define FAST_SRR_RL_59Ah                            0

/**
 * Initialise message SRR_RL_59Ah buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_59Ah(buf) { \
	INITSIG_SRR_RL_59Ah_RdrObjChks_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjCntr_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjAy_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjAx_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjCoast_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjConf_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjMtnPat_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjID_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjTyp_RL_5(buf); \
	INITSIG_SRR_RL_59Ah_RdrObjDy_RL_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_59Bh Message SRR_RL_59Bh (0x59b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_59Bh_RdrObjChks2_RL_5
 * - \ref SIG_SRR_RL_59Bh_RdrObjDx_RL_5
 * - \ref SIG_SRR_RL_59Bh_RdrObjTiAlv_RL_5
 * - \ref SIG_SRR_RL_59Bh_RdrObjVy_RL_5
 * - \ref SIG_SRR_RL_59Bh_RdrObjVx_RL_5
 * - \ref SIG_SRR_RL_59Bh_RdrObjWth_RL_5
 * - \ref SIG_SRR_RL_59Bh_RdrObjHeading_RL_5
 *
 * @{
 */

/**
 * Message SRR_RL_59Bh configuration tuple.
 */
#define MSG_SRR_RL_59Bh                             0x59b, 0, 8

/**
 * Message SRR_RL_59Bh id.
 */
#define ID_SRR_RL_59Bh                              0x59b

/**
 * Message SRR_RL_59Bh extended id bit.
 */
#define EXT_SRR_RL_59Bh                             0

/**
 * Message SRR_RL_59Bh Data Length Count.
 */
#define DLC_SRR_RL_59Bh                             8

/**
 * Message SRR_RL_59Bh cycle time.
 */
#define CYCLE_SRR_RL_59Bh                           0

/**
 * Message SRR_RL_59Bh fast cycle time.
 */
#define FAST_SRR_RL_59Bh                            0

/**
 * Initialise message SRR_RL_59Bh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_59Bh(buf) { \
	INITSIG_SRR_RL_59Bh_RdrObjChks2_RL_5(buf); \
	INITSIG_SRR_RL_59Bh_RdrObjDx_RL_5(buf); \
	INITSIG_SRR_RL_59Bh_RdrObjTiAlv_RL_5(buf); \
	INITSIG_SRR_RL_59Bh_RdrObjVy_RL_5(buf); \
	INITSIG_SRR_RL_59Bh_RdrObjVx_RL_5(buf); \
	INITSIG_SRR_RL_59Bh_RdrObjWth_RL_5(buf); \
	INITSIG_SRR_RL_59Bh_RdrObjHeading_RL_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_59Ch Message SRR_RL_59Ch (0x59c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_59Ch_RdrObjChks_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjCntr_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjAy_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjAx_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjCoast_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjConf_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjMtnPat_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjID_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjTyp_RL_6
 * - \ref SIG_SRR_RL_59Ch_RdrObjDy_RL_6
 *
 * @{
 */

/**
 * Message SRR_RL_59Ch configuration tuple.
 */
#define MSG_SRR_RL_59Ch                             0x59c, 0, 8

/**
 * Message SRR_RL_59Ch id.
 */
#define ID_SRR_RL_59Ch                              0x59c

/**
 * Message SRR_RL_59Ch extended id bit.
 */
#define EXT_SRR_RL_59Ch                             0

/**
 * Message SRR_RL_59Ch Data Length Count.
 */
#define DLC_SRR_RL_59Ch                             8

/**
 * Message SRR_RL_59Ch cycle time.
 */
#define CYCLE_SRR_RL_59Ch                           0

/**
 * Message SRR_RL_59Ch fast cycle time.
 */
#define FAST_SRR_RL_59Ch                            0

/**
 * Initialise message SRR_RL_59Ch buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_59Ch(buf) { \
	INITSIG_SRR_RL_59Ch_RdrObjChks_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjCntr_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjAy_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjAx_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjCoast_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjConf_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjMtnPat_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjID_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjTyp_RL_6(buf); \
	INITSIG_SRR_RL_59Ch_RdrObjDy_RL_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_59Dh Message SRR_RL_59Dh (0x59d)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_59Dh_RdrObjChks2_RL_6
 * - \ref SIG_SRR_RL_59Dh_RdrObjDx_RL_6
 * - \ref SIG_SRR_RL_59Dh_RdrObjTiAlv_RL_6
 * - \ref SIG_SRR_RL_59Dh_RdrObjVy_RL_6
 * - \ref SIG_SRR_RL_59Dh_RdrObjVx_RL_6
 * - \ref SIG_SRR_RL_59Dh_RdrObjWth_RL_6
 * - \ref SIG_SRR_RL_59Dh_RdrObjHeading_RL_6
 *
 * @{
 */

/**
 * Message SRR_RL_59Dh configuration tuple.
 */
#define MSG_SRR_RL_59Dh                             0x59d, 0, 8

/**
 * Message SRR_RL_59Dh id.
 */
#define ID_SRR_RL_59Dh                              0x59d

/**
 * Message SRR_RL_59Dh extended id bit.
 */
#define EXT_SRR_RL_59Dh                             0

/**
 * Message SRR_RL_59Dh Data Length Count.
 */
#define DLC_SRR_RL_59Dh                             8

/**
 * Message SRR_RL_59Dh cycle time.
 */
#define CYCLE_SRR_RL_59Dh                           0

/**
 * Message SRR_RL_59Dh fast cycle time.
 */
#define FAST_SRR_RL_59Dh                            0

/**
 * Initialise message SRR_RL_59Dh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_59Dh(buf) { \
	INITSIG_SRR_RL_59Dh_RdrObjChks2_RL_6(buf); \
	INITSIG_SRR_RL_59Dh_RdrObjDx_RL_6(buf); \
	INITSIG_SRR_RL_59Dh_RdrObjTiAlv_RL_6(buf); \
	INITSIG_SRR_RL_59Dh_RdrObjVy_RL_6(buf); \
	INITSIG_SRR_RL_59Dh_RdrObjVx_RL_6(buf); \
	INITSIG_SRR_RL_59Dh_RdrObjWth_RL_6(buf); \
	INITSIG_SRR_RL_59Dh_RdrObjHeading_RL_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_59Eh Message SRR_RL_59Eh (0x59e)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_59Eh_RdrObjChks_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjCntr_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjAy_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjAx_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjCoast_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjConf_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjMtnPat_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjID_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjTyp_RL_7
 * - \ref SIG_SRR_RL_59Eh_RdrObjDy_RL_7
 *
 * @{
 */

/**
 * Message SRR_RL_59Eh configuration tuple.
 */
#define MSG_SRR_RL_59Eh                             0x59e, 0, 8

/**
 * Message SRR_RL_59Eh id.
 */
#define ID_SRR_RL_59Eh                              0x59e

/**
 * Message SRR_RL_59Eh extended id bit.
 */
#define EXT_SRR_RL_59Eh                             0

/**
 * Message SRR_RL_59Eh Data Length Count.
 */
#define DLC_SRR_RL_59Eh                             8

/**
 * Message SRR_RL_59Eh cycle time.
 */
#define CYCLE_SRR_RL_59Eh                           0

/**
 * Message SRR_RL_59Eh fast cycle time.
 */
#define FAST_SRR_RL_59Eh                            0

/**
 * Initialise message SRR_RL_59Eh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_59Eh(buf) { \
	INITSIG_SRR_RL_59Eh_RdrObjChks_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjCntr_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjAy_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjAx_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjCoast_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjConf_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjMtnPat_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjID_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjTyp_RL_7(buf); \
	INITSIG_SRR_RL_59Eh_RdrObjDy_RL_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_59Fh Message SRR_RL_59Fh (0x59f)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_59Fh_RdrObjChks2_RL_7
 * - \ref SIG_SRR_RL_59Fh_RdrObjDx_RL_7
 * - \ref SIG_SRR_RL_59Fh_RdrObjTiAlv_RL_7
 * - \ref SIG_SRR_RL_59Fh_RdrObjVy_RL_7
 * - \ref SIG_SRR_RL_59Fh_RdrObjVx_RL_7
 * - \ref SIG_SRR_RL_59Fh_RdrObjWth_RL_7
 * - \ref SIG_SRR_RL_59Fh_RdrObjHeading_RL_7
 *
 * @{
 */

/**
 * Message SRR_RL_59Fh configuration tuple.
 */
#define MSG_SRR_RL_59Fh                             0x59f, 0, 8

/**
 * Message SRR_RL_59Fh id.
 */
#define ID_SRR_RL_59Fh                              0x59f

/**
 * Message SRR_RL_59Fh extended id bit.
 */
#define EXT_SRR_RL_59Fh                             0

/**
 * Message SRR_RL_59Fh Data Length Count.
 */
#define DLC_SRR_RL_59Fh                             8

/**
 * Message SRR_RL_59Fh cycle time.
 */
#define CYCLE_SRR_RL_59Fh                           0

/**
 * Message SRR_RL_59Fh fast cycle time.
 */
#define FAST_SRR_RL_59Fh                            0

/**
 * Initialise message SRR_RL_59Fh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_59Fh(buf) { \
	INITSIG_SRR_RL_59Fh_RdrObjChks2_RL_7(buf); \
	INITSIG_SRR_RL_59Fh_RdrObjDx_RL_7(buf); \
	INITSIG_SRR_RL_59Fh_RdrObjTiAlv_RL_7(buf); \
	INITSIG_SRR_RL_59Fh_RdrObjVy_RL_7(buf); \
	INITSIG_SRR_RL_59Fh_RdrObjVx_RL_7(buf); \
	INITSIG_SRR_RL_59Fh_RdrObjWth_RL_7(buf); \
	INITSIG_SRR_RL_59Fh_RdrObjHeading_RL_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A0h Message SRR_RL_5A0h (0x5a0)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A0h_RdrObjChks_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjCntr_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjAy_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjAx_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjCoast_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjConf_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjMtnPat_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjID_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjTyp_RL_8
 * - \ref SIG_SRR_RL_5A0h_RdrObjDy_RL_8
 *
 * @{
 */

/**
 * Message SRR_RL_5A0h configuration tuple.
 */
#define MSG_SRR_RL_5A0h                             0x5a0, 0, 8

/**
 * Message SRR_RL_5A0h id.
 */
#define ID_SRR_RL_5A0h                              0x5a0

/**
 * Message SRR_RL_5A0h extended id bit.
 */
#define EXT_SRR_RL_5A0h                             0

/**
 * Message SRR_RL_5A0h Data Length Count.
 */
#define DLC_SRR_RL_5A0h                             8

/**
 * Message SRR_RL_5A0h cycle time.
 */
#define CYCLE_SRR_RL_5A0h                           0

/**
 * Message SRR_RL_5A0h fast cycle time.
 */
#define FAST_SRR_RL_5A0h                            0

/**
 * Initialise message SRR_RL_5A0h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A0h(buf) { \
	INITSIG_SRR_RL_5A0h_RdrObjChks_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjCntr_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjAy_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjAx_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjCoast_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjConf_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjMtnPat_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjID_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjTyp_RL_8(buf); \
	INITSIG_SRR_RL_5A0h_RdrObjDy_RL_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A1h Message SRR_RL_5A1h (0x5a1)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A1h_RdrObjChks2_RL_8
 * - \ref SIG_SRR_RL_5A1h_RdrObjDx_RL_8
 * - \ref SIG_SRR_RL_5A1h_RdrObjTiAlv_RL_8
 * - \ref SIG_SRR_RL_5A1h_RdrObjVy_RL_8
 * - \ref SIG_SRR_RL_5A1h_RdrObjVx_RL_8
 * - \ref SIG_SRR_RL_5A1h_RdrObjWth_RL_8
 * - \ref SIG_SRR_RL_5A1h_RdrObjHeading_RL_8
 *
 * @{
 */

/**
 * Message SRR_RL_5A1h configuration tuple.
 */
#define MSG_SRR_RL_5A1h                             0x5a1, 0, 8

/**
 * Message SRR_RL_5A1h id.
 */
#define ID_SRR_RL_5A1h                              0x5a1

/**
 * Message SRR_RL_5A1h extended id bit.
 */
#define EXT_SRR_RL_5A1h                             0

/**
 * Message SRR_RL_5A1h Data Length Count.
 */
#define DLC_SRR_RL_5A1h                             8

/**
 * Message SRR_RL_5A1h cycle time.
 */
#define CYCLE_SRR_RL_5A1h                           0

/**
 * Message SRR_RL_5A1h fast cycle time.
 */
#define FAST_SRR_RL_5A1h                            0

/**
 * Initialise message SRR_RL_5A1h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A1h(buf) { \
	INITSIG_SRR_RL_5A1h_RdrObjChks2_RL_8(buf); \
	INITSIG_SRR_RL_5A1h_RdrObjDx_RL_8(buf); \
	INITSIG_SRR_RL_5A1h_RdrObjTiAlv_RL_8(buf); \
	INITSIG_SRR_RL_5A1h_RdrObjVy_RL_8(buf); \
	INITSIG_SRR_RL_5A1h_RdrObjVx_RL_8(buf); \
	INITSIG_SRR_RL_5A1h_RdrObjWth_RL_8(buf); \
	INITSIG_SRR_RL_5A1h_RdrObjHeading_RL_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A2h Message SRR_RL_5A2h (0x5a2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A2h_RdrObjChks_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjCntr_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjAy_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjAx_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjCoast_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjConf_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjMtnPat_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjID_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjTyp_RL_9
 * - \ref SIG_SRR_RL_5A2h_RdrObjDy_RL_9
 *
 * @{
 */

/**
 * Message SRR_RL_5A2h configuration tuple.
 */
#define MSG_SRR_RL_5A2h                             0x5a2, 0, 8

/**
 * Message SRR_RL_5A2h id.
 */
#define ID_SRR_RL_5A2h                              0x5a2

/**
 * Message SRR_RL_5A2h extended id bit.
 */
#define EXT_SRR_RL_5A2h                             0

/**
 * Message SRR_RL_5A2h Data Length Count.
 */
#define DLC_SRR_RL_5A2h                             8

/**
 * Message SRR_RL_5A2h cycle time.
 */
#define CYCLE_SRR_RL_5A2h                           0

/**
 * Message SRR_RL_5A2h fast cycle time.
 */
#define FAST_SRR_RL_5A2h                            0

/**
 * Initialise message SRR_RL_5A2h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A2h(buf) { \
	INITSIG_SRR_RL_5A2h_RdrObjChks_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjCntr_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjAy_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjAx_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjCoast_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjConf_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjMtnPat_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjID_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjTyp_RL_9(buf); \
	INITSIG_SRR_RL_5A2h_RdrObjDy_RL_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A3h Message SRR_RL_5A3h (0x5a3)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A3h_RdrObjChks2_RL_9
 * - \ref SIG_SRR_RL_5A3h_RdrObjDx_RL_9
 * - \ref SIG_SRR_RL_5A3h_RdrObjTiAlv_RL_9
 * - \ref SIG_SRR_RL_5A3h_RdrObjVy_RL_9
 * - \ref SIG_SRR_RL_5A3h_RdrObjVx_RL_9
 * - \ref SIG_SRR_RL_5A3h_RdrObjWth_RL_9
 * - \ref SIG_SRR_RL_5A3h_RdrObjHeading_RL_9
 *
 * @{
 */

/**
 * Message SRR_RL_5A3h configuration tuple.
 */
#define MSG_SRR_RL_5A3h                             0x5a3, 0, 8

/**
 * Message SRR_RL_5A3h id.
 */
#define ID_SRR_RL_5A3h                              0x5a3

/**
 * Message SRR_RL_5A3h extended id bit.
 */
#define EXT_SRR_RL_5A3h                             0

/**
 * Message SRR_RL_5A3h Data Length Count.
 */
#define DLC_SRR_RL_5A3h                             8

/**
 * Message SRR_RL_5A3h cycle time.
 */
#define CYCLE_SRR_RL_5A3h                           0

/**
 * Message SRR_RL_5A3h fast cycle time.
 */
#define FAST_SRR_RL_5A3h                            0

/**
 * Initialise message SRR_RL_5A3h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A3h(buf) { \
	INITSIG_SRR_RL_5A3h_RdrObjChks2_RL_9(buf); \
	INITSIG_SRR_RL_5A3h_RdrObjDx_RL_9(buf); \
	INITSIG_SRR_RL_5A3h_RdrObjTiAlv_RL_9(buf); \
	INITSIG_SRR_RL_5A3h_RdrObjVy_RL_9(buf); \
	INITSIG_SRR_RL_5A3h_RdrObjVx_RL_9(buf); \
	INITSIG_SRR_RL_5A3h_RdrObjWth_RL_9(buf); \
	INITSIG_SRR_RL_5A3h_RdrObjHeading_RL_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A4h Message SRR_RL_5A4h (0x5a4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A4h_RdrObjChks_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjCntr_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjAy_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjAx_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjCoast_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjConf_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjMtnPat_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjID_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjTyp_RL_10
 * - \ref SIG_SRR_RL_5A4h_RdrObjDy_RL_10
 *
 * @{
 */

/**
 * Message SRR_RL_5A4h configuration tuple.
 */
#define MSG_SRR_RL_5A4h                             0x5a4, 0, 8

/**
 * Message SRR_RL_5A4h id.
 */
#define ID_SRR_RL_5A4h                              0x5a4

/**
 * Message SRR_RL_5A4h extended id bit.
 */
#define EXT_SRR_RL_5A4h                             0

/**
 * Message SRR_RL_5A4h Data Length Count.
 */
#define DLC_SRR_RL_5A4h                             8

/**
 * Message SRR_RL_5A4h cycle time.
 */
#define CYCLE_SRR_RL_5A4h                           0

/**
 * Message SRR_RL_5A4h fast cycle time.
 */
#define FAST_SRR_RL_5A4h                            0

/**
 * Initialise message SRR_RL_5A4h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A4h(buf) { \
	INITSIG_SRR_RL_5A4h_RdrObjChks_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjCntr_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjAy_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjAx_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjCoast_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjConf_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjMtnPat_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjID_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjTyp_RL_10(buf); \
	INITSIG_SRR_RL_5A4h_RdrObjDy_RL_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A5h Message SRR_RL_5A5h (0x5a5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A5h_RdrObjChks2_RL_10
 * - \ref SIG_SRR_RL_5A5h_RdrObjDx_RL_10
 * - \ref SIG_SRR_RL_5A5h_RdrObjTiAlv_RL_10
 * - \ref SIG_SRR_RL_5A5h_RdrObjVy_RL_10
 * - \ref SIG_SRR_RL_5A5h_RdrObjVx_RL_10
 * - \ref SIG_SRR_RL_5A5h_RdrObjWth_RL_10
 * - \ref SIG_SRR_RL_5A5h_RdrObjHeading_RL_10
 *
 * @{
 */

/**
 * Message SRR_RL_5A5h configuration tuple.
 */
#define MSG_SRR_RL_5A5h                             0x5a5, 0, 8

/**
 * Message SRR_RL_5A5h id.
 */
#define ID_SRR_RL_5A5h                              0x5a5

/**
 * Message SRR_RL_5A5h extended id bit.
 */
#define EXT_SRR_RL_5A5h                             0

/**
 * Message SRR_RL_5A5h Data Length Count.
 */
#define DLC_SRR_RL_5A5h                             8

/**
 * Message SRR_RL_5A5h cycle time.
 */
#define CYCLE_SRR_RL_5A5h                           0

/**
 * Message SRR_RL_5A5h fast cycle time.
 */
#define FAST_SRR_RL_5A5h                            0

/**
 * Initialise message SRR_RL_5A5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A5h(buf) { \
	INITSIG_SRR_RL_5A5h_RdrObjChks2_RL_10(buf); \
	INITSIG_SRR_RL_5A5h_RdrObjDx_RL_10(buf); \
	INITSIG_SRR_RL_5A5h_RdrObjTiAlv_RL_10(buf); \
	INITSIG_SRR_RL_5A5h_RdrObjVy_RL_10(buf); \
	INITSIG_SRR_RL_5A5h_RdrObjVx_RL_10(buf); \
	INITSIG_SRR_RL_5A5h_RdrObjWth_RL_10(buf); \
	INITSIG_SRR_RL_5A5h_RdrObjHeading_RL_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A6h Message SRR_RL_5A6h (0x5a6)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A6h_RdrObjChks_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjCntr_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjAy_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjAx_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjCoast_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjConf_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjMtnPat_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjID_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjTyp_RL_11
 * - \ref SIG_SRR_RL_5A6h_RdrObjDy_RL_11
 *
 * @{
 */

/**
 * Message SRR_RL_5A6h configuration tuple.
 */
#define MSG_SRR_RL_5A6h                             0x5a6, 0, 8

/**
 * Message SRR_RL_5A6h id.
 */
#define ID_SRR_RL_5A6h                              0x5a6

/**
 * Message SRR_RL_5A6h extended id bit.
 */
#define EXT_SRR_RL_5A6h                             0

/**
 * Message SRR_RL_5A6h Data Length Count.
 */
#define DLC_SRR_RL_5A6h                             8

/**
 * Message SRR_RL_5A6h cycle time.
 */
#define CYCLE_SRR_RL_5A6h                           0

/**
 * Message SRR_RL_5A6h fast cycle time.
 */
#define FAST_SRR_RL_5A6h                            0

/**
 * Initialise message SRR_RL_5A6h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A6h(buf) { \
	INITSIG_SRR_RL_5A6h_RdrObjChks_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjCntr_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjAy_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjAx_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjCoast_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjConf_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjMtnPat_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjID_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjTyp_RL_11(buf); \
	INITSIG_SRR_RL_5A6h_RdrObjDy_RL_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A7h Message SRR_RL_5A7h (0x5a7)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A7h_RdrObjChks2_RL_11
 * - \ref SIG_SRR_RL_5A7h_RdrObjDx_RL_11
 * - \ref SIG_SRR_RL_5A7h_RdrObjTiAlv_RL_11
 * - \ref SIG_SRR_RL_5A7h_RdrObjVy_RL_11
 * - \ref SIG_SRR_RL_5A7h_RdrObjVx_RL_11
 * - \ref SIG_SRR_RL_5A7h_RdrObjWth_RL_11
 * - \ref SIG_SRR_RL_5A7h_RdrObjHeading_RL_11
 *
 * @{
 */

/**
 * Message SRR_RL_5A7h configuration tuple.
 */
#define MSG_SRR_RL_5A7h                             0x5a7, 0, 8

/**
 * Message SRR_RL_5A7h id.
 */
#define ID_SRR_RL_5A7h                              0x5a7

/**
 * Message SRR_RL_5A7h extended id bit.
 */
#define EXT_SRR_RL_5A7h                             0

/**
 * Message SRR_RL_5A7h Data Length Count.
 */
#define DLC_SRR_RL_5A7h                             8

/**
 * Message SRR_RL_5A7h cycle time.
 */
#define CYCLE_SRR_RL_5A7h                           0

/**
 * Message SRR_RL_5A7h fast cycle time.
 */
#define FAST_SRR_RL_5A7h                            0

/**
 * Initialise message SRR_RL_5A7h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A7h(buf) { \
	INITSIG_SRR_RL_5A7h_RdrObjChks2_RL_11(buf); \
	INITSIG_SRR_RL_5A7h_RdrObjDx_RL_11(buf); \
	INITSIG_SRR_RL_5A7h_RdrObjTiAlv_RL_11(buf); \
	INITSIG_SRR_RL_5A7h_RdrObjVy_RL_11(buf); \
	INITSIG_SRR_RL_5A7h_RdrObjVx_RL_11(buf); \
	INITSIG_SRR_RL_5A7h_RdrObjWth_RL_11(buf); \
	INITSIG_SRR_RL_5A7h_RdrObjHeading_RL_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A8h Message SRR_RL_5A8h (0x5a8)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A8h_RdrObjChks_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjCntr_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjAy_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjAx_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjCoast_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjConf_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjMtnPat_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjID_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjTyp_RL_12
 * - \ref SIG_SRR_RL_5A8h_RdrObjDy_RL_12
 *
 * @{
 */

/**
 * Message SRR_RL_5A8h configuration tuple.
 */
#define MSG_SRR_RL_5A8h                             0x5a8, 0, 8

/**
 * Message SRR_RL_5A8h id.
 */
#define ID_SRR_RL_5A8h                              0x5a8

/**
 * Message SRR_RL_5A8h extended id bit.
 */
#define EXT_SRR_RL_5A8h                             0

/**
 * Message SRR_RL_5A8h Data Length Count.
 */
#define DLC_SRR_RL_5A8h                             8

/**
 * Message SRR_RL_5A8h cycle time.
 */
#define CYCLE_SRR_RL_5A8h                           0

/**
 * Message SRR_RL_5A8h fast cycle time.
 */
#define FAST_SRR_RL_5A8h                            0

/**
 * Initialise message SRR_RL_5A8h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A8h(buf) { \
	INITSIG_SRR_RL_5A8h_RdrObjChks_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjCntr_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjAy_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjAx_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjCoast_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjConf_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjMtnPat_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjID_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjTyp_RL_12(buf); \
	INITSIG_SRR_RL_5A8h_RdrObjDy_RL_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5A9h Message SRR_RL_5A9h (0x5a9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5A9h_RdrObjChks2_RL_12
 * - \ref SIG_SRR_RL_5A9h_RdrObjDx_RL_12
 * - \ref SIG_SRR_RL_5A9h_RdrObjTiAlv_RL_12
 * - \ref SIG_SRR_RL_5A9h_RdrObjVy_RL_12
 * - \ref SIG_SRR_RL_5A9h_RdrObjVx_RL_12
 * - \ref SIG_SRR_RL_5A9h_RdrObjWth_RL_12
 * - \ref SIG_SRR_RL_5A9h_RdrObjHeading_RL_12
 *
 * @{
 */

/**
 * Message SRR_RL_5A9h configuration tuple.
 */
#define MSG_SRR_RL_5A9h                             0x5a9, 0, 8

/**
 * Message SRR_RL_5A9h id.
 */
#define ID_SRR_RL_5A9h                              0x5a9

/**
 * Message SRR_RL_5A9h extended id bit.
 */
#define EXT_SRR_RL_5A9h                             0

/**
 * Message SRR_RL_5A9h Data Length Count.
 */
#define DLC_SRR_RL_5A9h                             8

/**
 * Message SRR_RL_5A9h cycle time.
 */
#define CYCLE_SRR_RL_5A9h                           0

/**
 * Message SRR_RL_5A9h fast cycle time.
 */
#define FAST_SRR_RL_5A9h                            0

/**
 * Initialise message SRR_RL_5A9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5A9h(buf) { \
	INITSIG_SRR_RL_5A9h_RdrObjChks2_RL_12(buf); \
	INITSIG_SRR_RL_5A9h_RdrObjDx_RL_12(buf); \
	INITSIG_SRR_RL_5A9h_RdrObjTiAlv_RL_12(buf); \
	INITSIG_SRR_RL_5A9h_RdrObjVy_RL_12(buf); \
	INITSIG_SRR_RL_5A9h_RdrObjVx_RL_12(buf); \
	INITSIG_SRR_RL_5A9h_RdrObjWth_RL_12(buf); \
	INITSIG_SRR_RL_5A9h_RdrObjHeading_RL_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5AAh Message SRR_RL_5AAh (0x5aa)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5AAh_RdrObjChks_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjCntr_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjAy_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjAx_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjCoast_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjConf_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjMtnPat_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjID_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjTyp_RL_13
 * - \ref SIG_SRR_RL_5AAh_RdrObjDy_RL_13
 *
 * @{
 */

/**
 * Message SRR_RL_5AAh configuration tuple.
 */
#define MSG_SRR_RL_5AAh                             0x5aa, 0, 8

/**
 * Message SRR_RL_5AAh id.
 */
#define ID_SRR_RL_5AAh                              0x5aa

/**
 * Message SRR_RL_5AAh extended id bit.
 */
#define EXT_SRR_RL_5AAh                             0

/**
 * Message SRR_RL_5AAh Data Length Count.
 */
#define DLC_SRR_RL_5AAh                             8

/**
 * Message SRR_RL_5AAh cycle time.
 */
#define CYCLE_SRR_RL_5AAh                           0

/**
 * Message SRR_RL_5AAh fast cycle time.
 */
#define FAST_SRR_RL_5AAh                            0

/**
 * Initialise message SRR_RL_5AAh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5AAh(buf) { \
	INITSIG_SRR_RL_5AAh_RdrObjChks_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjCntr_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjAy_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjAx_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjCoast_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjConf_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjMtnPat_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjID_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjTyp_RL_13(buf); \
	INITSIG_SRR_RL_5AAh_RdrObjDy_RL_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5ABh Message SRR_RL_5ABh (0x5ab)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5ABh_RdrObjChks2_RL_13
 * - \ref SIG_SRR_RL_5ABh_RdrObjDx_RL_13
 * - \ref SIG_SRR_RL_5ABh_RdrObjTiAlv_RL_13
 * - \ref SIG_SRR_RL_5ABh_RdrObjVy_RL_13
 * - \ref SIG_SRR_RL_5ABh_RdrObjVx_RL_13
 * - \ref SIG_SRR_RL_5ABh_RdrObjWth_RL_13
 * - \ref SIG_SRR_RL_5ABh_RdrObjHeading_RL_13
 *
 * @{
 */

/**
 * Message SRR_RL_5ABh configuration tuple.
 */
#define MSG_SRR_RL_5ABh                             0x5ab, 0, 8

/**
 * Message SRR_RL_5ABh id.
 */
#define ID_SRR_RL_5ABh                              0x5ab

/**
 * Message SRR_RL_5ABh extended id bit.
 */
#define EXT_SRR_RL_5ABh                             0

/**
 * Message SRR_RL_5ABh Data Length Count.
 */
#define DLC_SRR_RL_5ABh                             8

/**
 * Message SRR_RL_5ABh cycle time.
 */
#define CYCLE_SRR_RL_5ABh                           0

/**
 * Message SRR_RL_5ABh fast cycle time.
 */
#define FAST_SRR_RL_5ABh                            0

/**
 * Initialise message SRR_RL_5ABh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5ABh(buf) { \
	INITSIG_SRR_RL_5ABh_RdrObjChks2_RL_13(buf); \
	INITSIG_SRR_RL_5ABh_RdrObjDx_RL_13(buf); \
	INITSIG_SRR_RL_5ABh_RdrObjTiAlv_RL_13(buf); \
	INITSIG_SRR_RL_5ABh_RdrObjVy_RL_13(buf); \
	INITSIG_SRR_RL_5ABh_RdrObjVx_RL_13(buf); \
	INITSIG_SRR_RL_5ABh_RdrObjWth_RL_13(buf); \
	INITSIG_SRR_RL_5ABh_RdrObjHeading_RL_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5ACh Message SRR_RL_5ACh (0x5ac)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5ACh_RdrObjChks_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjCntr_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjAy_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjAx_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjCoast_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjConf_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjMtnPat_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjID_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjTyp_RL_14
 * - \ref SIG_SRR_RL_5ACh_RdrObjDy_RL_14
 *
 * @{
 */

/**
 * Message SRR_RL_5ACh configuration tuple.
 */
#define MSG_SRR_RL_5ACh                             0x5ac, 0, 8

/**
 * Message SRR_RL_5ACh id.
 */
#define ID_SRR_RL_5ACh                              0x5ac

/**
 * Message SRR_RL_5ACh extended id bit.
 */
#define EXT_SRR_RL_5ACh                             0

/**
 * Message SRR_RL_5ACh Data Length Count.
 */
#define DLC_SRR_RL_5ACh                             8

/**
 * Message SRR_RL_5ACh cycle time.
 */
#define CYCLE_SRR_RL_5ACh                           0

/**
 * Message SRR_RL_5ACh fast cycle time.
 */
#define FAST_SRR_RL_5ACh                            0

/**
 * Initialise message SRR_RL_5ACh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5ACh(buf) { \
	INITSIG_SRR_RL_5ACh_RdrObjChks_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjCntr_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjAy_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjAx_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjCoast_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjConf_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjMtnPat_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjID_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjTyp_RL_14(buf); \
	INITSIG_SRR_RL_5ACh_RdrObjDy_RL_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5ADh Message SRR_RL_5ADh (0x5ad)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5ADh_RdrObjChks2_RL_14
 * - \ref SIG_SRR_RL_5ADh_RdrObjDx_RL_14
 * - \ref SIG_SRR_RL_5ADh_RdrObjTiAlv_RL_14
 * - \ref SIG_SRR_RL_5ADh_RdrObjVy_RL_14
 * - \ref SIG_SRR_RL_5ADh_RdrObjVx_RL_14
 * - \ref SIG_SRR_RL_5ADh_RdrObjWth_RL_14
 * - \ref SIG_SRR_RL_5ADh_RdrObjHeading_RL_14
 *
 * @{
 */

/**
 * Message SRR_RL_5ADh configuration tuple.
 */
#define MSG_SRR_RL_5ADh                             0x5ad, 0, 8

/**
 * Message SRR_RL_5ADh id.
 */
#define ID_SRR_RL_5ADh                              0x5ad

/**
 * Message SRR_RL_5ADh extended id bit.
 */
#define EXT_SRR_RL_5ADh                             0

/**
 * Message SRR_RL_5ADh Data Length Count.
 */
#define DLC_SRR_RL_5ADh                             8

/**
 * Message SRR_RL_5ADh cycle time.
 */
#define CYCLE_SRR_RL_5ADh                           0

/**
 * Message SRR_RL_5ADh fast cycle time.
 */
#define FAST_SRR_RL_5ADh                            0

/**
 * Initialise message SRR_RL_5ADh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5ADh(buf) { \
	INITSIG_SRR_RL_5ADh_RdrObjChks2_RL_14(buf); \
	INITSIG_SRR_RL_5ADh_RdrObjDx_RL_14(buf); \
	INITSIG_SRR_RL_5ADh_RdrObjTiAlv_RL_14(buf); \
	INITSIG_SRR_RL_5ADh_RdrObjVy_RL_14(buf); \
	INITSIG_SRR_RL_5ADh_RdrObjVx_RL_14(buf); \
	INITSIG_SRR_RL_5ADh_RdrObjWth_RL_14(buf); \
	INITSIG_SRR_RL_5ADh_RdrObjHeading_RL_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5AEh Message SRR_RL_5AEh (0x5ae)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5AEh_RdrObjChks_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjCntr_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjAy_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjAx_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjCoast_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjConf_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjMtnPat_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjID_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjTyp_RL_15
 * - \ref SIG_SRR_RL_5AEh_RdrObjDy_RL_15
 *
 * @{
 */

/**
 * Message SRR_RL_5AEh configuration tuple.
 */
#define MSG_SRR_RL_5AEh                             0x5ae, 0, 8

/**
 * Message SRR_RL_5AEh id.
 */
#define ID_SRR_RL_5AEh                              0x5ae

/**
 * Message SRR_RL_5AEh extended id bit.
 */
#define EXT_SRR_RL_5AEh                             0

/**
 * Message SRR_RL_5AEh Data Length Count.
 */
#define DLC_SRR_RL_5AEh                             8

/**
 * Message SRR_RL_5AEh cycle time.
 */
#define CYCLE_SRR_RL_5AEh                           0

/**
 * Message SRR_RL_5AEh fast cycle time.
 */
#define FAST_SRR_RL_5AEh                            0

/**
 * Initialise message SRR_RL_5AEh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5AEh(buf) { \
	INITSIG_SRR_RL_5AEh_RdrObjChks_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjCntr_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjAy_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjAx_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjCoast_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjConf_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjMtnPat_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjID_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjTyp_RL_15(buf); \
	INITSIG_SRR_RL_5AEh_RdrObjDy_RL_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RL_5AFh Message SRR_RL_5AFh (0x5af)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RL_5AFh_RdrObjChks2_RL_15
 * - \ref SIG_SRR_RL_5AFh_RdrObjDx_RL_15
 * - \ref SIG_SRR_RL_5AFh_RdrObjTiAlv_RL_15
 * - \ref SIG_SRR_RL_5AFh_RdrObjVy_RL_15
 * - \ref SIG_SRR_RL_5AFh_RdrObjVx_RL_15
 * - \ref SIG_SRR_RL_5AFh_RdrObjWth_RL_15
 * - \ref SIG_SRR_RL_5AFh_RdrObjHeading_RL_15
 *
 * @{
 */

/**
 * Message SRR_RL_5AFh configuration tuple.
 */
#define MSG_SRR_RL_5AFh                             0x5af, 0, 8

/**
 * Message SRR_RL_5AFh id.
 */
#define ID_SRR_RL_5AFh                              0x5af

/**
 * Message SRR_RL_5AFh extended id bit.
 */
#define EXT_SRR_RL_5AFh                             0

/**
 * Message SRR_RL_5AFh Data Length Count.
 */
#define DLC_SRR_RL_5AFh                             8

/**
 * Message SRR_RL_5AFh cycle time.
 */
#define CYCLE_SRR_RL_5AFh                           0

/**
 * Message SRR_RL_5AFh fast cycle time.
 */
#define FAST_SRR_RL_5AFh                            0

/**
 * Initialise message SRR_RL_5AFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RL_5AFh(buf) { \
	INITSIG_SRR_RL_5AFh_RdrObjChks2_RL_15(buf); \
	INITSIG_SRR_RL_5AFh_RdrObjDx_RL_15(buf); \
	INITSIG_SRR_RL_5AFh_RdrObjTiAlv_RL_15(buf); \
	INITSIG_SRR_RL_5AFh_RdrObjVy_RL_15(buf); \
	INITSIG_SRR_RL_5AFh_RdrObjVx_RL_15(buf); \
	INITSIG_SRR_RL_5AFh_RdrObjWth_RL_15(buf); \
	INITSIG_SRR_RL_5AFh_RdrObjHeading_RL_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IECU_Tester_709h Message IECU_Tester_709h (0x709)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IECU_Tester_709h_TesterDiagRequestData_SRR_RR
 *
 * @{
 */

/**
 * Message IECU_Tester_709h configuration tuple.
 */
#define MSG_IECU_Tester_709h                        0x709, 0, 8

/**
 * Message IECU_Tester_709h id.
 */
#define ID_IECU_Tester_709h                         0x709

/**
 * Message IECU_Tester_709h extended id bit.
 */
#define EXT_IECU_Tester_709h                        0

/**
 * Message IECU_Tester_709h Data Length Count.
 */
#define DLC_IECU_Tester_709h                        8

/**
 * Message IECU_Tester_709h cycle time.
 */
#define CYCLE_IECU_Tester_709h                      0

/**
 * Message IECU_Tester_709h fast cycle time.
 */
#define FAST_IECU_Tester_709h                       0

/**
 * Initialise message IECU_Tester_709h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IECU_Tester_709h(buf) { \
	INITSIG_IECU_Tester_709h_TesterDiagRequestData_SRR_RR(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_789h Message SRR_RR_789h (0x789)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_789h_SRR_RRDiagResponseData
 *
 * @{
 */

/**
 * Message SRR_RR_789h configuration tuple.
 */
#define MSG_SRR_RR_789h                             0x789, 0, 8

/**
 * Message SRR_RR_789h id.
 */
#define ID_SRR_RR_789h                              0x789

/**
 * Message SRR_RR_789h extended id bit.
 */
#define EXT_SRR_RR_789h                             0

/**
 * Message SRR_RR_789h Data Length Count.
 */
#define DLC_SRR_RR_789h                             8

/**
 * Message SRR_RR_789h cycle time.
 */
#define CYCLE_SRR_RR_789h                           0

/**
 * Message SRR_RR_789h fast cycle time.
 */
#define FAST_SRR_RR_789h                            0

/**
 * Initialise message SRR_RR_789h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_789h(buf) { \
	INITSIG_SRR_RR_789h_SRR_RRDiagResponseData(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B0h Message SRR_RR_5B0h (0x5b0)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B0h_RdrStsChks_RR
 * - \ref SIG_SRR_RR_5B0h_RdrStsCntr_RR
 * - \ref SIG_SRR_RR_5B0h_RdrStsIfVersMajor_RR
 * - \ref SIG_SRR_RR_5B0h_RdrStsIfVersMiddle_RR
 * - \ref SIG_SRR_RR_5B0h_RdrStsIfVersMinor_RR
 * - \ref SIG_SRR_RR_5B0h_RdrStsTiStamp_RR
 *
 * @{
 */

/**
 * Message SRR_RR_5B0h configuration tuple.
 */
#define MSG_SRR_RR_5B0h                             0x5b0, 0, 8

/**
 * Message SRR_RR_5B0h id.
 */
#define ID_SRR_RR_5B0h                              0x5b0

/**
 * Message SRR_RR_5B0h extended id bit.
 */
#define EXT_SRR_RR_5B0h                             0

/**
 * Message SRR_RR_5B0h Data Length Count.
 */
#define DLC_SRR_RR_5B0h                             8

/**
 * Message SRR_RR_5B0h cycle time.
 */
#define CYCLE_SRR_RR_5B0h                           0

/**
 * Message SRR_RR_5B0h fast cycle time.
 */
#define FAST_SRR_RR_5B0h                            0

/**
 * Initialise message SRR_RR_5B0h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B0h(buf) { \
	INITSIG_SRR_RR_5B0h_RdrStsChks_RR(buf); \
	INITSIG_SRR_RR_5B0h_RdrStsCntr_RR(buf); \
	INITSIG_SRR_RR_5B0h_RdrStsIfVersMajor_RR(buf); \
	INITSIG_SRR_RR_5B0h_RdrStsIfVersMiddle_RR(buf); \
	INITSIG_SRR_RR_5B0h_RdrStsIfVersMinor_RR(buf); \
	INITSIG_SRR_RR_5B0h_RdrStsTiStamp_RR(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B1h Message SRR_RR_5B1h (0x5b1)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B1h_Genrl_SnsrLatency_RR
 * - \ref SIG_SRR_RR_5B1h_RdrSysSts_RR
 *
 * @{
 */

/**
 * Message SRR_RR_5B1h configuration tuple.
 */
#define MSG_SRR_RR_5B1h                             0x5b1, 0, 8

/**
 * Message SRR_RR_5B1h id.
 */
#define ID_SRR_RR_5B1h                              0x5b1

/**
 * Message SRR_RR_5B1h extended id bit.
 */
#define EXT_SRR_RR_5B1h                             0

/**
 * Message SRR_RR_5B1h Data Length Count.
 */
#define DLC_SRR_RR_5B1h                             8

/**
 * Message SRR_RR_5B1h cycle time.
 */
#define CYCLE_SRR_RR_5B1h                           0

/**
 * Message SRR_RR_5B1h fast cycle time.
 */
#define FAST_SRR_RR_5B1h                            0

/**
 * Initialise message SRR_RR_5B1h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B1h(buf) { \
	INITSIG_SRR_RR_5B1h_Genrl_SnsrLatency_RR(buf); \
	INITSIG_SRR_RR_5B1h_RdrSysSts_RR(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B2h Message SRR_RR_5B2h (0x5b2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B2h_RdrObjChks_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjCntr_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjAy_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjAx_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjCoast_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjConf_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjMtnPat_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjID_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjTyp_RR_1
 * - \ref SIG_SRR_RR_5B2h_RdrObjDy_RR_1
 *
 * @{
 */

/**
 * Message SRR_RR_5B2h configuration tuple.
 */
#define MSG_SRR_RR_5B2h                             0x5b2, 0, 8

/**
 * Message SRR_RR_5B2h id.
 */
#define ID_SRR_RR_5B2h                              0x5b2

/**
 * Message SRR_RR_5B2h extended id bit.
 */
#define EXT_SRR_RR_5B2h                             0

/**
 * Message SRR_RR_5B2h Data Length Count.
 */
#define DLC_SRR_RR_5B2h                             8

/**
 * Message SRR_RR_5B2h cycle time.
 */
#define CYCLE_SRR_RR_5B2h                           0

/**
 * Message SRR_RR_5B2h fast cycle time.
 */
#define FAST_SRR_RR_5B2h                            0

/**
 * Initialise message SRR_RR_5B2h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B2h(buf) { \
	INITSIG_SRR_RR_5B2h_RdrObjChks_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjCntr_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjAy_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjAx_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjCoast_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjConf_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjMtnPat_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjID_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjTyp_RR_1(buf); \
	INITSIG_SRR_RR_5B2h_RdrObjDy_RR_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B3h Message SRR_RR_5B3h (0x5b3)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B3h_RdrObjChks2_RR_1
 * - \ref SIG_SRR_RR_5B3h_RdrObjDx_RR_1
 * - \ref SIG_SRR_RR_5B3h_RdrObjTiAlv_RR_1
 * - \ref SIG_SRR_RR_5B3h_RdrObjVy_RR_1
 * - \ref SIG_SRR_RR_5B3h_RdrObjVx_RR_1
 * - \ref SIG_SRR_RR_5B3h_RdrObjWth_RR_1
 * - \ref SIG_SRR_RR_5B3h_RdrObjHeading_RR_1
 *
 * @{
 */

/**
 * Message SRR_RR_5B3h configuration tuple.
 */
#define MSG_SRR_RR_5B3h                             0x5b3, 0, 8

/**
 * Message SRR_RR_5B3h id.
 */
#define ID_SRR_RR_5B3h                              0x5b3

/**
 * Message SRR_RR_5B3h extended id bit.
 */
#define EXT_SRR_RR_5B3h                             0

/**
 * Message SRR_RR_5B3h Data Length Count.
 */
#define DLC_SRR_RR_5B3h                             8

/**
 * Message SRR_RR_5B3h cycle time.
 */
#define CYCLE_SRR_RR_5B3h                           0

/**
 * Message SRR_RR_5B3h fast cycle time.
 */
#define FAST_SRR_RR_5B3h                            0

/**
 * Initialise message SRR_RR_5B3h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B3h(buf) { \
	INITSIG_SRR_RR_5B3h_RdrObjChks2_RR_1(buf); \
	INITSIG_SRR_RR_5B3h_RdrObjDx_RR_1(buf); \
	INITSIG_SRR_RR_5B3h_RdrObjTiAlv_RR_1(buf); \
	INITSIG_SRR_RR_5B3h_RdrObjVy_RR_1(buf); \
	INITSIG_SRR_RR_5B3h_RdrObjVx_RR_1(buf); \
	INITSIG_SRR_RR_5B3h_RdrObjWth_RR_1(buf); \
	INITSIG_SRR_RR_5B3h_RdrObjHeading_RR_1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B4h Message SRR_RR_5B4h (0x5b4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B4h_RdrObjChks_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjCntr_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjAy_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjAx_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjCoast_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjConf_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjMtnPat_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjID_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjTyp_RR_2
 * - \ref SIG_SRR_RR_5B4h_RdrObjDy_RR_2
 *
 * @{
 */

/**
 * Message SRR_RR_5B4h configuration tuple.
 */
#define MSG_SRR_RR_5B4h                             0x5b4, 0, 8

/**
 * Message SRR_RR_5B4h id.
 */
#define ID_SRR_RR_5B4h                              0x5b4

/**
 * Message SRR_RR_5B4h extended id bit.
 */
#define EXT_SRR_RR_5B4h                             0

/**
 * Message SRR_RR_5B4h Data Length Count.
 */
#define DLC_SRR_RR_5B4h                             8

/**
 * Message SRR_RR_5B4h cycle time.
 */
#define CYCLE_SRR_RR_5B4h                           0

/**
 * Message SRR_RR_5B4h fast cycle time.
 */
#define FAST_SRR_RR_5B4h                            0

/**
 * Initialise message SRR_RR_5B4h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B4h(buf) { \
	INITSIG_SRR_RR_5B4h_RdrObjChks_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjCntr_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjAy_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjAx_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjCoast_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjConf_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjMtnPat_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjID_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjTyp_RR_2(buf); \
	INITSIG_SRR_RR_5B4h_RdrObjDy_RR_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B5h Message SRR_RR_5B5h (0x5b5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B5h_RdrObjChks2_RR_2
 * - \ref SIG_SRR_RR_5B5h_RdrObjDx_RR_2
 * - \ref SIG_SRR_RR_5B5h_RdrObjTiAlv_RR_2
 * - \ref SIG_SRR_RR_5B5h_RdrObjVy_RR_2
 * - \ref SIG_SRR_RR_5B5h_RdrObjVx_RR_2
 * - \ref SIG_SRR_RR_5B5h_RdrObjWth_RR_2
 * - \ref SIG_SRR_RR_5B5h_RdrObjHeading_RR_2
 *
 * @{
 */

/**
 * Message SRR_RR_5B5h configuration tuple.
 */
#define MSG_SRR_RR_5B5h                             0x5b5, 0, 8

/**
 * Message SRR_RR_5B5h id.
 */
#define ID_SRR_RR_5B5h                              0x5b5

/**
 * Message SRR_RR_5B5h extended id bit.
 */
#define EXT_SRR_RR_5B5h                             0

/**
 * Message SRR_RR_5B5h Data Length Count.
 */
#define DLC_SRR_RR_5B5h                             8

/**
 * Message SRR_RR_5B5h cycle time.
 */
#define CYCLE_SRR_RR_5B5h                           0

/**
 * Message SRR_RR_5B5h fast cycle time.
 */
#define FAST_SRR_RR_5B5h                            0

/**
 * Initialise message SRR_RR_5B5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B5h(buf) { \
	INITSIG_SRR_RR_5B5h_RdrObjChks2_RR_2(buf); \
	INITSIG_SRR_RR_5B5h_RdrObjDx_RR_2(buf); \
	INITSIG_SRR_RR_5B5h_RdrObjTiAlv_RR_2(buf); \
	INITSIG_SRR_RR_5B5h_RdrObjVy_RR_2(buf); \
	INITSIG_SRR_RR_5B5h_RdrObjVx_RR_2(buf); \
	INITSIG_SRR_RR_5B5h_RdrObjWth_RR_2(buf); \
	INITSIG_SRR_RR_5B5h_RdrObjHeading_RR_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B6h Message SRR_RR_5B6h (0x5b6)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B6h_RdrObjChks_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjCntr_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjAy_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjAx_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjCoast_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjConf_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjMtnPat_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjID_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjTyp_RR_3
 * - \ref SIG_SRR_RR_5B6h_RdrObjDy_RR_3
 *
 * @{
 */

/**
 * Message SRR_RR_5B6h configuration tuple.
 */
#define MSG_SRR_RR_5B6h                             0x5b6, 0, 8

/**
 * Message SRR_RR_5B6h id.
 */
#define ID_SRR_RR_5B6h                              0x5b6

/**
 * Message SRR_RR_5B6h extended id bit.
 */
#define EXT_SRR_RR_5B6h                             0

/**
 * Message SRR_RR_5B6h Data Length Count.
 */
#define DLC_SRR_RR_5B6h                             8

/**
 * Message SRR_RR_5B6h cycle time.
 */
#define CYCLE_SRR_RR_5B6h                           0

/**
 * Message SRR_RR_5B6h fast cycle time.
 */
#define FAST_SRR_RR_5B6h                            0

/**
 * Initialise message SRR_RR_5B6h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B6h(buf) { \
	INITSIG_SRR_RR_5B6h_RdrObjChks_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjCntr_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjAy_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjAx_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjCoast_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjConf_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjMtnPat_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjID_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjTyp_RR_3(buf); \
	INITSIG_SRR_RR_5B6h_RdrObjDy_RR_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B7h Message SRR_RR_5B7h (0x5b7)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B7h_RdrObjChks2_RR_3
 * - \ref SIG_SRR_RR_5B7h_RdrObjDx_RR_3
 * - \ref SIG_SRR_RR_5B7h_RdrObjTiAlv_RR_3
 * - \ref SIG_SRR_RR_5B7h_RdrObjVy_RR_3
 * - \ref SIG_SRR_RR_5B7h_RdrObjVx_RR_3
 * - \ref SIG_SRR_RR_5B7h_RdrObjWth_RR_3
 * - \ref SIG_SRR_RR_5B7h_RdrObjHeading_RR_3
 *
 * @{
 */

/**
 * Message SRR_RR_5B7h configuration tuple.
 */
#define MSG_SRR_RR_5B7h                             0x5b7, 0, 8

/**
 * Message SRR_RR_5B7h id.
 */
#define ID_SRR_RR_5B7h                              0x5b7

/**
 * Message SRR_RR_5B7h extended id bit.
 */
#define EXT_SRR_RR_5B7h                             0

/**
 * Message SRR_RR_5B7h Data Length Count.
 */
#define DLC_SRR_RR_5B7h                             8

/**
 * Message SRR_RR_5B7h cycle time.
 */
#define CYCLE_SRR_RR_5B7h                           0

/**
 * Message SRR_RR_5B7h fast cycle time.
 */
#define FAST_SRR_RR_5B7h                            0

/**
 * Initialise message SRR_RR_5B7h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B7h(buf) { \
	INITSIG_SRR_RR_5B7h_RdrObjChks2_RR_3(buf); \
	INITSIG_SRR_RR_5B7h_RdrObjDx_RR_3(buf); \
	INITSIG_SRR_RR_5B7h_RdrObjTiAlv_RR_3(buf); \
	INITSIG_SRR_RR_5B7h_RdrObjVy_RR_3(buf); \
	INITSIG_SRR_RR_5B7h_RdrObjVx_RR_3(buf); \
	INITSIG_SRR_RR_5B7h_RdrObjWth_RR_3(buf); \
	INITSIG_SRR_RR_5B7h_RdrObjHeading_RR_3(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B8h Message SRR_RR_5B8h (0x5b8)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B8h_RdrObjChks_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjCntr_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjAy_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjAx_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjCoast_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjConf_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjMtnPat_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjID_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjTyp_RR_4
 * - \ref SIG_SRR_RR_5B8h_RdrObjDy_RR_4
 *
 * @{
 */

/**
 * Message SRR_RR_5B8h configuration tuple.
 */
#define MSG_SRR_RR_5B8h                             0x5b8, 0, 8

/**
 * Message SRR_RR_5B8h id.
 */
#define ID_SRR_RR_5B8h                              0x5b8

/**
 * Message SRR_RR_5B8h extended id bit.
 */
#define EXT_SRR_RR_5B8h                             0

/**
 * Message SRR_RR_5B8h Data Length Count.
 */
#define DLC_SRR_RR_5B8h                             8

/**
 * Message SRR_RR_5B8h cycle time.
 */
#define CYCLE_SRR_RR_5B8h                           0

/**
 * Message SRR_RR_5B8h fast cycle time.
 */
#define FAST_SRR_RR_5B8h                            0

/**
 * Initialise message SRR_RR_5B8h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B8h(buf) { \
	INITSIG_SRR_RR_5B8h_RdrObjChks_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjCntr_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjAy_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjAx_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjCoast_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjConf_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjMtnPat_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjID_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjTyp_RR_4(buf); \
	INITSIG_SRR_RR_5B8h_RdrObjDy_RR_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5B9h Message SRR_RR_5B9h (0x5b9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5B9h_RdrObjChks2_RR_4
 * - \ref SIG_SRR_RR_5B9h_RdrObjDx_RR_4
 * - \ref SIG_SRR_RR_5B9h_RdrObjTiAlv_RR_4
 * - \ref SIG_SRR_RR_5B9h_RdrObjVy_RR_4
 * - \ref SIG_SRR_RR_5B9h_RdrObjVx_RR_4
 * - \ref SIG_SRR_RR_5B9h_RdrObjWth_RR_4
 * - \ref SIG_SRR_RR_5B9h_RdrObjHeading_RR_4
 *
 * @{
 */

/**
 * Message SRR_RR_5B9h configuration tuple.
 */
#define MSG_SRR_RR_5B9h                             0x5b9, 0, 8

/**
 * Message SRR_RR_5B9h id.
 */
#define ID_SRR_RR_5B9h                              0x5b9

/**
 * Message SRR_RR_5B9h extended id bit.
 */
#define EXT_SRR_RR_5B9h                             0

/**
 * Message SRR_RR_5B9h Data Length Count.
 */
#define DLC_SRR_RR_5B9h                             8

/**
 * Message SRR_RR_5B9h cycle time.
 */
#define CYCLE_SRR_RR_5B9h                           0

/**
 * Message SRR_RR_5B9h fast cycle time.
 */
#define FAST_SRR_RR_5B9h                            0

/**
 * Initialise message SRR_RR_5B9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5B9h(buf) { \
	INITSIG_SRR_RR_5B9h_RdrObjChks2_RR_4(buf); \
	INITSIG_SRR_RR_5B9h_RdrObjDx_RR_4(buf); \
	INITSIG_SRR_RR_5B9h_RdrObjTiAlv_RR_4(buf); \
	INITSIG_SRR_RR_5B9h_RdrObjVy_RR_4(buf); \
	INITSIG_SRR_RR_5B9h_RdrObjVx_RR_4(buf); \
	INITSIG_SRR_RR_5B9h_RdrObjWth_RR_4(buf); \
	INITSIG_SRR_RR_5B9h_RdrObjHeading_RR_4(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5BAh Message SRR_RR_5BAh (0x5ba)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5BAh_RdrObjChks_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjCntr_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjAy_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjAx_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjCoast_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjConf_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjMtnPat_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjID_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjTyp_RR_5
 * - \ref SIG_SRR_RR_5BAh_RdrObjDy_RR_5
 *
 * @{
 */

/**
 * Message SRR_RR_5BAh configuration tuple.
 */
#define MSG_SRR_RR_5BAh                             0x5ba, 0, 8

/**
 * Message SRR_RR_5BAh id.
 */
#define ID_SRR_RR_5BAh                              0x5ba

/**
 * Message SRR_RR_5BAh extended id bit.
 */
#define EXT_SRR_RR_5BAh                             0

/**
 * Message SRR_RR_5BAh Data Length Count.
 */
#define DLC_SRR_RR_5BAh                             8

/**
 * Message SRR_RR_5BAh cycle time.
 */
#define CYCLE_SRR_RR_5BAh                           0

/**
 * Message SRR_RR_5BAh fast cycle time.
 */
#define FAST_SRR_RR_5BAh                            0

/**
 * Initialise message SRR_RR_5BAh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5BAh(buf) { \
	INITSIG_SRR_RR_5BAh_RdrObjChks_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjCntr_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjAy_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjAx_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjCoast_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjConf_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjMtnPat_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjID_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjTyp_RR_5(buf); \
	INITSIG_SRR_RR_5BAh_RdrObjDy_RR_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5BBh Message SRR_RR_5BBh (0x5bb)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5BBh_RdrObjChks2_RR_5
 * - \ref SIG_SRR_RR_5BBh_RdrObjDx_RR_5
 * - \ref SIG_SRR_RR_5BBh_RdrObjTiAlv_RR_5
 * - \ref SIG_SRR_RR_5BBh_RdrObjVy_RR_5
 * - \ref SIG_SRR_RR_5BBh_RdrObjVx_RR_5
 * - \ref SIG_SRR_RR_5BBh_RdrObjWth_RR_5
 * - \ref SIG_SRR_RR_5BBh_RdrObjHeading_RR_5
 *
 * @{
 */

/**
 * Message SRR_RR_5BBh configuration tuple.
 */
#define MSG_SRR_RR_5BBh                             0x5bb, 0, 8

/**
 * Message SRR_RR_5BBh id.
 */
#define ID_SRR_RR_5BBh                              0x5bb

/**
 * Message SRR_RR_5BBh extended id bit.
 */
#define EXT_SRR_RR_5BBh                             0

/**
 * Message SRR_RR_5BBh Data Length Count.
 */
#define DLC_SRR_RR_5BBh                             8

/**
 * Message SRR_RR_5BBh cycle time.
 */
#define CYCLE_SRR_RR_5BBh                           0

/**
 * Message SRR_RR_5BBh fast cycle time.
 */
#define FAST_SRR_RR_5BBh                            0

/**
 * Initialise message SRR_RR_5BBh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5BBh(buf) { \
	INITSIG_SRR_RR_5BBh_RdrObjChks2_RR_5(buf); \
	INITSIG_SRR_RR_5BBh_RdrObjDx_RR_5(buf); \
	INITSIG_SRR_RR_5BBh_RdrObjTiAlv_RR_5(buf); \
	INITSIG_SRR_RR_5BBh_RdrObjVy_RR_5(buf); \
	INITSIG_SRR_RR_5BBh_RdrObjVx_RR_5(buf); \
	INITSIG_SRR_RR_5BBh_RdrObjWth_RR_5(buf); \
	INITSIG_SRR_RR_5BBh_RdrObjHeading_RR_5(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5BCh Message SRR_RR_5BCh (0x5bc)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5BCh_RdrObjChks_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjCntr_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjAy_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjAx_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjCoast_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjConf_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjMtnPat_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjID_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjTyp_RR_6
 * - \ref SIG_SRR_RR_5BCh_RdrObjDy_RR_6
 *
 * @{
 */

/**
 * Message SRR_RR_5BCh configuration tuple.
 */
#define MSG_SRR_RR_5BCh                             0x5bc, 0, 8

/**
 * Message SRR_RR_5BCh id.
 */
#define ID_SRR_RR_5BCh                              0x5bc

/**
 * Message SRR_RR_5BCh extended id bit.
 */
#define EXT_SRR_RR_5BCh                             0

/**
 * Message SRR_RR_5BCh Data Length Count.
 */
#define DLC_SRR_RR_5BCh                             8

/**
 * Message SRR_RR_5BCh cycle time.
 */
#define CYCLE_SRR_RR_5BCh                           0

/**
 * Message SRR_RR_5BCh fast cycle time.
 */
#define FAST_SRR_RR_5BCh                            0

/**
 * Initialise message SRR_RR_5BCh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5BCh(buf) { \
	INITSIG_SRR_RR_5BCh_RdrObjChks_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjCntr_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjAy_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjAx_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjCoast_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjConf_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjMtnPat_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjID_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjTyp_RR_6(buf); \
	INITSIG_SRR_RR_5BCh_RdrObjDy_RR_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5BDh Message SRR_RR_5BDh (0x5bd)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5BDh_RdrObjChks2_RR_6
 * - \ref SIG_SRR_RR_5BDh_RdrObjDx_RR_6
 * - \ref SIG_SRR_RR_5BDh_RdrObjTiAlv_RR_6
 * - \ref SIG_SRR_RR_5BDh_RdrObjVy_RR_6
 * - \ref SIG_SRR_RR_5BDh_RdrObjVx_RR_6
 * - \ref SIG_SRR_RR_5BDh_RdrObjWth_RR_6
 * - \ref SIG_SRR_RR_5BDh_RdrObjHeading_RR_6
 *
 * @{
 */

/**
 * Message SRR_RR_5BDh configuration tuple.
 */
#define MSG_SRR_RR_5BDh                             0x5bd, 0, 8

/**
 * Message SRR_RR_5BDh id.
 */
#define ID_SRR_RR_5BDh                              0x5bd

/**
 * Message SRR_RR_5BDh extended id bit.
 */
#define EXT_SRR_RR_5BDh                             0

/**
 * Message SRR_RR_5BDh Data Length Count.
 */
#define DLC_SRR_RR_5BDh                             8

/**
 * Message SRR_RR_5BDh cycle time.
 */
#define CYCLE_SRR_RR_5BDh                           0

/**
 * Message SRR_RR_5BDh fast cycle time.
 */
#define FAST_SRR_RR_5BDh                            0

/**
 * Initialise message SRR_RR_5BDh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5BDh(buf) { \
	INITSIG_SRR_RR_5BDh_RdrObjChks2_RR_6(buf); \
	INITSIG_SRR_RR_5BDh_RdrObjDx_RR_6(buf); \
	INITSIG_SRR_RR_5BDh_RdrObjTiAlv_RR_6(buf); \
	INITSIG_SRR_RR_5BDh_RdrObjVy_RR_6(buf); \
	INITSIG_SRR_RR_5BDh_RdrObjVx_RR_6(buf); \
	INITSIG_SRR_RR_5BDh_RdrObjWth_RR_6(buf); \
	INITSIG_SRR_RR_5BDh_RdrObjHeading_RR_6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5BEh Message SRR_RR_5BEh (0x5be)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5BEh_RdrObjChks_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjCntr_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjAy_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjAx_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjCoast_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjConf_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjMtnPat_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjID_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjTyp_RR_7
 * - \ref SIG_SRR_RR_5BEh_RdrObjDy_RR_7
 *
 * @{
 */

/**
 * Message SRR_RR_5BEh configuration tuple.
 */
#define MSG_SRR_RR_5BEh                             0x5be, 0, 8

/**
 * Message SRR_RR_5BEh id.
 */
#define ID_SRR_RR_5BEh                              0x5be

/**
 * Message SRR_RR_5BEh extended id bit.
 */
#define EXT_SRR_RR_5BEh                             0

/**
 * Message SRR_RR_5BEh Data Length Count.
 */
#define DLC_SRR_RR_5BEh                             8

/**
 * Message SRR_RR_5BEh cycle time.
 */
#define CYCLE_SRR_RR_5BEh                           0

/**
 * Message SRR_RR_5BEh fast cycle time.
 */
#define FAST_SRR_RR_5BEh                            0

/**
 * Initialise message SRR_RR_5BEh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5BEh(buf) { \
	INITSIG_SRR_RR_5BEh_RdrObjChks_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjCntr_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjAy_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjAx_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjCoast_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjConf_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjMtnPat_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjID_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjTyp_RR_7(buf); \
	INITSIG_SRR_RR_5BEh_RdrObjDy_RR_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5BFh Message SRR_RR_5BFh (0x5bf)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5BFh_RdrObjChks2_RR_7
 * - \ref SIG_SRR_RR_5BFh_RdrObjDx_RR_7
 * - \ref SIG_SRR_RR_5BFh_RdrObjTiAlv_RR_7
 * - \ref SIG_SRR_RR_5BFh_RdrObjVy_RR_7
 * - \ref SIG_SRR_RR_5BFh_RdrObjVx_RR_7
 * - \ref SIG_SRR_RR_5BFh_RdrObjWth_RR_7
 * - \ref SIG_SRR_RR_5BFh_RdrObjHeading_RR_7
 *
 * @{
 */

/**
 * Message SRR_RR_5BFh configuration tuple.
 */
#define MSG_SRR_RR_5BFh                             0x5bf, 0, 8

/**
 * Message SRR_RR_5BFh id.
 */
#define ID_SRR_RR_5BFh                              0x5bf

/**
 * Message SRR_RR_5BFh extended id bit.
 */
#define EXT_SRR_RR_5BFh                             0

/**
 * Message SRR_RR_5BFh Data Length Count.
 */
#define DLC_SRR_RR_5BFh                             8

/**
 * Message SRR_RR_5BFh cycle time.
 */
#define CYCLE_SRR_RR_5BFh                           0

/**
 * Message SRR_RR_5BFh fast cycle time.
 */
#define FAST_SRR_RR_5BFh                            0

/**
 * Initialise message SRR_RR_5BFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5BFh(buf) { \
	INITSIG_SRR_RR_5BFh_RdrObjChks2_RR_7(buf); \
	INITSIG_SRR_RR_5BFh_RdrObjDx_RR_7(buf); \
	INITSIG_SRR_RR_5BFh_RdrObjTiAlv_RR_7(buf); \
	INITSIG_SRR_RR_5BFh_RdrObjVy_RR_7(buf); \
	INITSIG_SRR_RR_5BFh_RdrObjVx_RR_7(buf); \
	INITSIG_SRR_RR_5BFh_RdrObjWth_RR_7(buf); \
	INITSIG_SRR_RR_5BFh_RdrObjHeading_RR_7(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C0h Message SRR_RR_5C0h (0x5c0)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C0h_RdrObjChks_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjCntr_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjAy_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjAx_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjCoast_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjConf_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjMtnPat_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjID_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjTyp_RR_8
 * - \ref SIG_SRR_RR_5C0h_RdrObjDy_RR_8
 *
 * @{
 */

/**
 * Message SRR_RR_5C0h configuration tuple.
 */
#define MSG_SRR_RR_5C0h                             0x5c0, 0, 8

/**
 * Message SRR_RR_5C0h id.
 */
#define ID_SRR_RR_5C0h                              0x5c0

/**
 * Message SRR_RR_5C0h extended id bit.
 */
#define EXT_SRR_RR_5C0h                             0

/**
 * Message SRR_RR_5C0h Data Length Count.
 */
#define DLC_SRR_RR_5C0h                             8

/**
 * Message SRR_RR_5C0h cycle time.
 */
#define CYCLE_SRR_RR_5C0h                           0

/**
 * Message SRR_RR_5C0h fast cycle time.
 */
#define FAST_SRR_RR_5C0h                            0

/**
 * Initialise message SRR_RR_5C0h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C0h(buf) { \
	INITSIG_SRR_RR_5C0h_RdrObjChks_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjCntr_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjAy_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjAx_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjCoast_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjConf_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjMtnPat_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjID_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjTyp_RR_8(buf); \
	INITSIG_SRR_RR_5C0h_RdrObjDy_RR_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C1h Message SRR_RR_5C1h (0x5c1)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C1h_RdrObjChks2_RR_8
 * - \ref SIG_SRR_RR_5C1h_RdrObjDx_RR_8
 * - \ref SIG_SRR_RR_5C1h_RdrObjTiAlv_RR_8
 * - \ref SIG_SRR_RR_5C1h_RdrObjVy_RR_8
 * - \ref SIG_SRR_RR_5C1h_RdrObjVx_RR_8
 * - \ref SIG_SRR_RR_5C1h_RdrObjWth_RR_8
 * - \ref SIG_SRR_RR_5C1h_RdrObjHeading_RR_8
 *
 * @{
 */

/**
 * Message SRR_RR_5C1h configuration tuple.
 */
#define MSG_SRR_RR_5C1h                             0x5c1, 0, 8

/**
 * Message SRR_RR_5C1h id.
 */
#define ID_SRR_RR_5C1h                              0x5c1

/**
 * Message SRR_RR_5C1h extended id bit.
 */
#define EXT_SRR_RR_5C1h                             0

/**
 * Message SRR_RR_5C1h Data Length Count.
 */
#define DLC_SRR_RR_5C1h                             8

/**
 * Message SRR_RR_5C1h cycle time.
 */
#define CYCLE_SRR_RR_5C1h                           0

/**
 * Message SRR_RR_5C1h fast cycle time.
 */
#define FAST_SRR_RR_5C1h                            0

/**
 * Initialise message SRR_RR_5C1h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C1h(buf) { \
	INITSIG_SRR_RR_5C1h_RdrObjChks2_RR_8(buf); \
	INITSIG_SRR_RR_5C1h_RdrObjDx_RR_8(buf); \
	INITSIG_SRR_RR_5C1h_RdrObjTiAlv_RR_8(buf); \
	INITSIG_SRR_RR_5C1h_RdrObjVy_RR_8(buf); \
	INITSIG_SRR_RR_5C1h_RdrObjVx_RR_8(buf); \
	INITSIG_SRR_RR_5C1h_RdrObjWth_RR_8(buf); \
	INITSIG_SRR_RR_5C1h_RdrObjHeading_RR_8(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C2h Message SRR_RR_5C2h (0x5c2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C2h_RdrObjChks_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjCntr_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjAy_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjAx_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjCoast_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjConf_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjMtnPat_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjID_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjTyp_RR_9
 * - \ref SIG_SRR_RR_5C2h_RdrObjDy_RR_9
 *
 * @{
 */

/**
 * Message SRR_RR_5C2h configuration tuple.
 */
#define MSG_SRR_RR_5C2h                             0x5c2, 0, 8

/**
 * Message SRR_RR_5C2h id.
 */
#define ID_SRR_RR_5C2h                              0x5c2

/**
 * Message SRR_RR_5C2h extended id bit.
 */
#define EXT_SRR_RR_5C2h                             0

/**
 * Message SRR_RR_5C2h Data Length Count.
 */
#define DLC_SRR_RR_5C2h                             8

/**
 * Message SRR_RR_5C2h cycle time.
 */
#define CYCLE_SRR_RR_5C2h                           0

/**
 * Message SRR_RR_5C2h fast cycle time.
 */
#define FAST_SRR_RR_5C2h                            0

/**
 * Initialise message SRR_RR_5C2h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C2h(buf) { \
	INITSIG_SRR_RR_5C2h_RdrObjChks_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjCntr_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjAy_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjAx_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjCoast_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjConf_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjMtnPat_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjID_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjTyp_RR_9(buf); \
	INITSIG_SRR_RR_5C2h_RdrObjDy_RR_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C3h Message SRR_RR_5C3h (0x5c3)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C3h_RdrObjChks2_RR_9
 * - \ref SIG_SRR_RR_5C3h_RdrObjDx_RR_9
 * - \ref SIG_SRR_RR_5C3h_RdrObjTiAlv_RR_9
 * - \ref SIG_SRR_RR_5C3h_RdrObjVy_RR_9
 * - \ref SIG_SRR_RR_5C3h_RdrObjVx_RR_9
 * - \ref SIG_SRR_RR_5C3h_RdrObjWth_RR_9
 * - \ref SIG_SRR_RR_5C3h_RdrObjHeading_RR_9
 *
 * @{
 */

/**
 * Message SRR_RR_5C3h configuration tuple.
 */
#define MSG_SRR_RR_5C3h                             0x5c3, 0, 8

/**
 * Message SRR_RR_5C3h id.
 */
#define ID_SRR_RR_5C3h                              0x5c3

/**
 * Message SRR_RR_5C3h extended id bit.
 */
#define EXT_SRR_RR_5C3h                             0

/**
 * Message SRR_RR_5C3h Data Length Count.
 */
#define DLC_SRR_RR_5C3h                             8

/**
 * Message SRR_RR_5C3h cycle time.
 */
#define CYCLE_SRR_RR_5C3h                           0

/**
 * Message SRR_RR_5C3h fast cycle time.
 */
#define FAST_SRR_RR_5C3h                            0

/**
 * Initialise message SRR_RR_5C3h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C3h(buf) { \
	INITSIG_SRR_RR_5C3h_RdrObjChks2_RR_9(buf); \
	INITSIG_SRR_RR_5C3h_RdrObjDx_RR_9(buf); \
	INITSIG_SRR_RR_5C3h_RdrObjTiAlv_RR_9(buf); \
	INITSIG_SRR_RR_5C3h_RdrObjVy_RR_9(buf); \
	INITSIG_SRR_RR_5C3h_RdrObjVx_RR_9(buf); \
	INITSIG_SRR_RR_5C3h_RdrObjWth_RR_9(buf); \
	INITSIG_SRR_RR_5C3h_RdrObjHeading_RR_9(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C4h Message SRR_RR_5C4h (0x5c4)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C4h_RdrObjChks_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjCntr_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjAy_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjAx_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjCoast_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjConf_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjMtnPat_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjID_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjTyp_RR_10
 * - \ref SIG_SRR_RR_5C4h_RdrObjDy_RR_10
 *
 * @{
 */

/**
 * Message SRR_RR_5C4h configuration tuple.
 */
#define MSG_SRR_RR_5C4h                             0x5c4, 0, 8

/**
 * Message SRR_RR_5C4h id.
 */
#define ID_SRR_RR_5C4h                              0x5c4

/**
 * Message SRR_RR_5C4h extended id bit.
 */
#define EXT_SRR_RR_5C4h                             0

/**
 * Message SRR_RR_5C4h Data Length Count.
 */
#define DLC_SRR_RR_5C4h                             8

/**
 * Message SRR_RR_5C4h cycle time.
 */
#define CYCLE_SRR_RR_5C4h                           0

/**
 * Message SRR_RR_5C4h fast cycle time.
 */
#define FAST_SRR_RR_5C4h                            0

/**
 * Initialise message SRR_RR_5C4h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C4h(buf) { \
	INITSIG_SRR_RR_5C4h_RdrObjChks_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjCntr_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjAy_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjAx_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjCoast_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjConf_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjMtnPat_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjID_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjTyp_RR_10(buf); \
	INITSIG_SRR_RR_5C4h_RdrObjDy_RR_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C5h Message SRR_RR_5C5h (0x5c5)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C5h_RdrObjChks2_RR_10
 * - \ref SIG_SRR_RR_5C5h_RdrObjDx_RR_10
 * - \ref SIG_SRR_RR_5C5h_RdrObjTiAlv_RR_10
 * - \ref SIG_SRR_RR_5C5h_RdrObjVy_RR_10
 * - \ref SIG_SRR_RR_5C5h_RdrObjVx_RR_10
 * - \ref SIG_SRR_RR_5C5h_RdrObjWth_RR_10
 * - \ref SIG_SRR_RR_5C5h_RdrObjHeading_RR_10
 *
 * @{
 */

/**
 * Message SRR_RR_5C5h configuration tuple.
 */
#define MSG_SRR_RR_5C5h                             0x5c5, 0, 8

/**
 * Message SRR_RR_5C5h id.
 */
#define ID_SRR_RR_5C5h                              0x5c5

/**
 * Message SRR_RR_5C5h extended id bit.
 */
#define EXT_SRR_RR_5C5h                             0

/**
 * Message SRR_RR_5C5h Data Length Count.
 */
#define DLC_SRR_RR_5C5h                             8

/**
 * Message SRR_RR_5C5h cycle time.
 */
#define CYCLE_SRR_RR_5C5h                           0

/**
 * Message SRR_RR_5C5h fast cycle time.
 */
#define FAST_SRR_RR_5C5h                            0

/**
 * Initialise message SRR_RR_5C5h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C5h(buf) { \
	INITSIG_SRR_RR_5C5h_RdrObjChks2_RR_10(buf); \
	INITSIG_SRR_RR_5C5h_RdrObjDx_RR_10(buf); \
	INITSIG_SRR_RR_5C5h_RdrObjTiAlv_RR_10(buf); \
	INITSIG_SRR_RR_5C5h_RdrObjVy_RR_10(buf); \
	INITSIG_SRR_RR_5C5h_RdrObjVx_RR_10(buf); \
	INITSIG_SRR_RR_5C5h_RdrObjWth_RR_10(buf); \
	INITSIG_SRR_RR_5C5h_RdrObjHeading_RR_10(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C6h Message SRR_RR_5C6h (0x5c6)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C6h_RdrObjChks_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjCntr_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjAy_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjAx_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjCoast_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjConf_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjMtnPat_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjID_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjTyp_RR_11
 * - \ref SIG_SRR_RR_5C6h_RdrObjDy_RR_11
 *
 * @{
 */

/**
 * Message SRR_RR_5C6h configuration tuple.
 */
#define MSG_SRR_RR_5C6h                             0x5c6, 0, 8

/**
 * Message SRR_RR_5C6h id.
 */
#define ID_SRR_RR_5C6h                              0x5c6

/**
 * Message SRR_RR_5C6h extended id bit.
 */
#define EXT_SRR_RR_5C6h                             0

/**
 * Message SRR_RR_5C6h Data Length Count.
 */
#define DLC_SRR_RR_5C6h                             8

/**
 * Message SRR_RR_5C6h cycle time.
 */
#define CYCLE_SRR_RR_5C6h                           0

/**
 * Message SRR_RR_5C6h fast cycle time.
 */
#define FAST_SRR_RR_5C6h                            0

/**
 * Initialise message SRR_RR_5C6h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C6h(buf) { \
	INITSIG_SRR_RR_5C6h_RdrObjChks_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjCntr_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjAy_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjAx_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjCoast_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjConf_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjMtnPat_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjID_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjTyp_RR_11(buf); \
	INITSIG_SRR_RR_5C6h_RdrObjDy_RR_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C7h Message SRR_RR_5C7h (0x5c7)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C7h_RdrObjChks2_RR_11
 * - \ref SIG_SRR_RR_5C7h_RdrObjDx_RR_11
 * - \ref SIG_SRR_RR_5C7h_RdrObjTiAlv_RR_11
 * - \ref SIG_SRR_RR_5C7h_RdrObjVy_RR_11
 * - \ref SIG_SRR_RR_5C7h_RdrObjVx_RR_11
 * - \ref SIG_SRR_RR_5C7h_RdrObjWth_RR_11
 * - \ref SIG_SRR_RR_5C7h_RdrObjHeading_RR_11
 *
 * @{
 */

/**
 * Message SRR_RR_5C7h configuration tuple.
 */
#define MSG_SRR_RR_5C7h                             0x5c7, 0, 8

/**
 * Message SRR_RR_5C7h id.
 */
#define ID_SRR_RR_5C7h                              0x5c7

/**
 * Message SRR_RR_5C7h extended id bit.
 */
#define EXT_SRR_RR_5C7h                             0

/**
 * Message SRR_RR_5C7h Data Length Count.
 */
#define DLC_SRR_RR_5C7h                             8

/**
 * Message SRR_RR_5C7h cycle time.
 */
#define CYCLE_SRR_RR_5C7h                           0

/**
 * Message SRR_RR_5C7h fast cycle time.
 */
#define FAST_SRR_RR_5C7h                            0

/**
 * Initialise message SRR_RR_5C7h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C7h(buf) { \
	INITSIG_SRR_RR_5C7h_RdrObjChks2_RR_11(buf); \
	INITSIG_SRR_RR_5C7h_RdrObjDx_RR_11(buf); \
	INITSIG_SRR_RR_5C7h_RdrObjTiAlv_RR_11(buf); \
	INITSIG_SRR_RR_5C7h_RdrObjVy_RR_11(buf); \
	INITSIG_SRR_RR_5C7h_RdrObjVx_RR_11(buf); \
	INITSIG_SRR_RR_5C7h_RdrObjWth_RR_11(buf); \
	INITSIG_SRR_RR_5C7h_RdrObjHeading_RR_11(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C8h Message SRR_RR_5C8h (0x5c8)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C8h_RdrObjChks_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjCntr_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjAy_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjAx_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjCoast_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjConf_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjMtnPat_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjID_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjTyp_RR_12
 * - \ref SIG_SRR_RR_5C8h_RdrObjDy_RR_12
 *
 * @{
 */

/**
 * Message SRR_RR_5C8h configuration tuple.
 */
#define MSG_SRR_RR_5C8h                             0x5c8, 0, 8

/**
 * Message SRR_RR_5C8h id.
 */
#define ID_SRR_RR_5C8h                              0x5c8

/**
 * Message SRR_RR_5C8h extended id bit.
 */
#define EXT_SRR_RR_5C8h                             0

/**
 * Message SRR_RR_5C8h Data Length Count.
 */
#define DLC_SRR_RR_5C8h                             8

/**
 * Message SRR_RR_5C8h cycle time.
 */
#define CYCLE_SRR_RR_5C8h                           0

/**
 * Message SRR_RR_5C8h fast cycle time.
 */
#define FAST_SRR_RR_5C8h                            0

/**
 * Initialise message SRR_RR_5C8h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C8h(buf) { \
	INITSIG_SRR_RR_5C8h_RdrObjChks_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjCntr_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjAy_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjAx_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjCoast_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjConf_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjMtnPat_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjID_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjTyp_RR_12(buf); \
	INITSIG_SRR_RR_5C8h_RdrObjDy_RR_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5C9h Message SRR_RR_5C9h (0x5c9)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5C9h_RdrObjChks2_RR_12
 * - \ref SIG_SRR_RR_5C9h_RdrObjDx_RR_12
 * - \ref SIG_SRR_RR_5C9h_RdrObjTiAlv_RR_12
 * - \ref SIG_SRR_RR_5C9h_RdrObjVy_RR_12
 * - \ref SIG_SRR_RR_5C9h_RdrObjVx_RR_12
 * - \ref SIG_SRR_RR_5C9h_RdrObjWth_RR_12
 * - \ref SIG_SRR_RR_5C9h_RdrObjHeading_RR_12
 *
 * @{
 */

/**
 * Message SRR_RR_5C9h configuration tuple.
 */
#define MSG_SRR_RR_5C9h                             0x5c9, 0, 8

/**
 * Message SRR_RR_5C9h id.
 */
#define ID_SRR_RR_5C9h                              0x5c9

/**
 * Message SRR_RR_5C9h extended id bit.
 */
#define EXT_SRR_RR_5C9h                             0

/**
 * Message SRR_RR_5C9h Data Length Count.
 */
#define DLC_SRR_RR_5C9h                             8

/**
 * Message SRR_RR_5C9h cycle time.
 */
#define CYCLE_SRR_RR_5C9h                           0

/**
 * Message SRR_RR_5C9h fast cycle time.
 */
#define FAST_SRR_RR_5C9h                            0

/**
 * Initialise message SRR_RR_5C9h buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5C9h(buf) { \
	INITSIG_SRR_RR_5C9h_RdrObjChks2_RR_12(buf); \
	INITSIG_SRR_RR_5C9h_RdrObjDx_RR_12(buf); \
	INITSIG_SRR_RR_5C9h_RdrObjTiAlv_RR_12(buf); \
	INITSIG_SRR_RR_5C9h_RdrObjVy_RR_12(buf); \
	INITSIG_SRR_RR_5C9h_RdrObjVx_RR_12(buf); \
	INITSIG_SRR_RR_5C9h_RdrObjWth_RR_12(buf); \
	INITSIG_SRR_RR_5C9h_RdrObjHeading_RR_12(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5CAh Message SRR_RR_5CAh (0x5ca)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5CAh_RdrObjChks_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjCntr_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjAy_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjAx_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjCoast_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjConf_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjMtnPat_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjID_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjTyp_RR_13
 * - \ref SIG_SRR_RR_5CAh_RdrObjDy_RR_13
 *
 * @{
 */

/**
 * Message SRR_RR_5CAh configuration tuple.
 */
#define MSG_SRR_RR_5CAh                             0x5ca, 0, 8

/**
 * Message SRR_RR_5CAh id.
 */
#define ID_SRR_RR_5CAh                              0x5ca

/**
 * Message SRR_RR_5CAh extended id bit.
 */
#define EXT_SRR_RR_5CAh                             0

/**
 * Message SRR_RR_5CAh Data Length Count.
 */
#define DLC_SRR_RR_5CAh                             8

/**
 * Message SRR_RR_5CAh cycle time.
 */
#define CYCLE_SRR_RR_5CAh                           0

/**
 * Message SRR_RR_5CAh fast cycle time.
 */
#define FAST_SRR_RR_5CAh                            0

/**
 * Initialise message SRR_RR_5CAh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5CAh(buf) { \
	INITSIG_SRR_RR_5CAh_RdrObjChks_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjCntr_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjAy_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjAx_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjCoast_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjConf_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjMtnPat_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjID_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjTyp_RR_13(buf); \
	INITSIG_SRR_RR_5CAh_RdrObjDy_RR_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5CBh Message SRR_RR_5CBh (0x5cb)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5CBh_RdrObjChks2_RR_13
 * - \ref SIG_SRR_RR_5CBh_RdrObjDx_RR_13
 * - \ref SIG_SRR_RR_5CBh_RdrObjTiAlv_RR_13
 * - \ref SIG_SRR_RR_5CBh_RdrObjVy_RR_13
 * - \ref SIG_SRR_RR_5CBh_RdrObjVx_RR_13
 * - \ref SIG_SRR_RR_5CBh_RdrObjWth_RR_13
 * - \ref SIG_SRR_RR_5CBh_RdrObjHeading_RR_13
 *
 * @{
 */

/**
 * Message SRR_RR_5CBh configuration tuple.
 */
#define MSG_SRR_RR_5CBh                             0x5cb, 0, 8

/**
 * Message SRR_RR_5CBh id.
 */
#define ID_SRR_RR_5CBh                              0x5cb

/**
 * Message SRR_RR_5CBh extended id bit.
 */
#define EXT_SRR_RR_5CBh                             0

/**
 * Message SRR_RR_5CBh Data Length Count.
 */
#define DLC_SRR_RR_5CBh                             8

/**
 * Message SRR_RR_5CBh cycle time.
 */
#define CYCLE_SRR_RR_5CBh                           0

/**
 * Message SRR_RR_5CBh fast cycle time.
 */
#define FAST_SRR_RR_5CBh                            0

/**
 * Initialise message SRR_RR_5CBh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5CBh(buf) { \
	INITSIG_SRR_RR_5CBh_RdrObjChks2_RR_13(buf); \
	INITSIG_SRR_RR_5CBh_RdrObjDx_RR_13(buf); \
	INITSIG_SRR_RR_5CBh_RdrObjTiAlv_RR_13(buf); \
	INITSIG_SRR_RR_5CBh_RdrObjVy_RR_13(buf); \
	INITSIG_SRR_RR_5CBh_RdrObjVx_RR_13(buf); \
	INITSIG_SRR_RR_5CBh_RdrObjWth_RR_13(buf); \
	INITSIG_SRR_RR_5CBh_RdrObjHeading_RR_13(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5CCh Message SRR_RR_5CCh (0x5cc)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5CCh_RdrObjChks_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjCntr_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjAy_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjAx_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjCoast_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjConf_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjMtnPat_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjID_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjTyp_RR_14
 * - \ref SIG_SRR_RR_5CCh_RdrObjDy_RR_14
 *
 * @{
 */

/**
 * Message SRR_RR_5CCh configuration tuple.
 */
#define MSG_SRR_RR_5CCh                             0x5cc, 0, 8

/**
 * Message SRR_RR_5CCh id.
 */
#define ID_SRR_RR_5CCh                              0x5cc

/**
 * Message SRR_RR_5CCh extended id bit.
 */
#define EXT_SRR_RR_5CCh                             0

/**
 * Message SRR_RR_5CCh Data Length Count.
 */
#define DLC_SRR_RR_5CCh                             8

/**
 * Message SRR_RR_5CCh cycle time.
 */
#define CYCLE_SRR_RR_5CCh                           0

/**
 * Message SRR_RR_5CCh fast cycle time.
 */
#define FAST_SRR_RR_5CCh                            0

/**
 * Initialise message SRR_RR_5CCh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5CCh(buf) { \
	INITSIG_SRR_RR_5CCh_RdrObjChks_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjCntr_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjAy_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjAx_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjCoast_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjConf_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjMtnPat_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjID_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjTyp_RR_14(buf); \
	INITSIG_SRR_RR_5CCh_RdrObjDy_RR_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5CDh Message SRR_RR_5CDh (0x5cd)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5CDh_RdrObjChks2_RR_14
 * - \ref SIG_SRR_RR_5CDh_RdrObjDx_RR_14
 * - \ref SIG_SRR_RR_5CDh_RdrObjTiAlv_RR_14
 * - \ref SIG_SRR_RR_5CDh_RdrObjVy_RR_14
 * - \ref SIG_SRR_RR_5CDh_RdrObjVx_RR_14
 * - \ref SIG_SRR_RR_5CDh_RdrObjWth_RR_14
 * - \ref SIG_SRR_RR_5CDh_RdrObjHeading_RR_14
 *
 * @{
 */

/**
 * Message SRR_RR_5CDh configuration tuple.
 */
#define MSG_SRR_RR_5CDh                             0x5cd, 0, 8

/**
 * Message SRR_RR_5CDh id.
 */
#define ID_SRR_RR_5CDh                              0x5cd

/**
 * Message SRR_RR_5CDh extended id bit.
 */
#define EXT_SRR_RR_5CDh                             0

/**
 * Message SRR_RR_5CDh Data Length Count.
 */
#define DLC_SRR_RR_5CDh                             8

/**
 * Message SRR_RR_5CDh cycle time.
 */
#define CYCLE_SRR_RR_5CDh                           0

/**
 * Message SRR_RR_5CDh fast cycle time.
 */
#define FAST_SRR_RR_5CDh                            0

/**
 * Initialise message SRR_RR_5CDh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5CDh(buf) { \
	INITSIG_SRR_RR_5CDh_RdrObjChks2_RR_14(buf); \
	INITSIG_SRR_RR_5CDh_RdrObjDx_RR_14(buf); \
	INITSIG_SRR_RR_5CDh_RdrObjTiAlv_RR_14(buf); \
	INITSIG_SRR_RR_5CDh_RdrObjVy_RR_14(buf); \
	INITSIG_SRR_RR_5CDh_RdrObjVx_RR_14(buf); \
	INITSIG_SRR_RR_5CDh_RdrObjWth_RR_14(buf); \
	INITSIG_SRR_RR_5CDh_RdrObjHeading_RR_14(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5CEh Message SRR_RR_5CEh (0x5ce)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5CEh_RdrObjChks_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjCntr_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjAy_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjAx_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjCoast_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjConf_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjMtnPat_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjID_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjTyp_RR_15
 * - \ref SIG_SRR_RR_5CEh_RdrObjDy_RR_15
 *
 * @{
 */

/**
 * Message SRR_RR_5CEh configuration tuple.
 */
#define MSG_SRR_RR_5CEh                             0x5ce, 0, 8

/**
 * Message SRR_RR_5CEh id.
 */
#define ID_SRR_RR_5CEh                              0x5ce

/**
 * Message SRR_RR_5CEh extended id bit.
 */
#define EXT_SRR_RR_5CEh                             0

/**
 * Message SRR_RR_5CEh Data Length Count.
 */
#define DLC_SRR_RR_5CEh                             8

/**
 * Message SRR_RR_5CEh cycle time.
 */
#define CYCLE_SRR_RR_5CEh                           0

/**
 * Message SRR_RR_5CEh fast cycle time.
 */
#define FAST_SRR_RR_5CEh                            0

/**
 * Initialise message SRR_RR_5CEh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5CEh(buf) { \
	INITSIG_SRR_RR_5CEh_RdrObjChks_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjCntr_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjAy_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjAx_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjCoast_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjConf_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjMtnPat_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjID_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjTyp_RR_15(buf); \
	INITSIG_SRR_RR_5CEh_RdrObjDy_RR_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SRR_RR_5CFh Message SRR_RR_5CFh (0x5cf)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SRR_RR_5CFh_RdrObjChks2_RR_15
 * - \ref SIG_SRR_RR_5CFh_RdrObjDx_RR_15
 * - \ref SIG_SRR_RR_5CFh_RdrObjTiAlv_RR_15
 * - \ref SIG_SRR_RR_5CFh_RdrObjVy_RR_15
 * - \ref SIG_SRR_RR_5CFh_RdrObjVx_RR_15
 * - \ref SIG_SRR_RR_5CFh_RdrObjWth_RR_15
 * - \ref SIG_SRR_RR_5CFh_RdrObjHeading_RR_15
 *
 * @{
 */

/**
 * Message SRR_RR_5CFh configuration tuple.
 */
#define MSG_SRR_RR_5CFh                             0x5cf, 0, 8

/**
 * Message SRR_RR_5CFh id.
 */
#define ID_SRR_RR_5CFh                              0x5cf

/**
 * Message SRR_RR_5CFh extended id bit.
 */
#define EXT_SRR_RR_5CFh                             0

/**
 * Message SRR_RR_5CFh Data Length Count.
 */
#define DLC_SRR_RR_5CFh                             8

/**
 * Message SRR_RR_5CFh cycle time.
 */
#define CYCLE_SRR_RR_5CFh                           0

/**
 * Message SRR_RR_5CFh fast cycle time.
 */
#define FAST_SRR_RR_5CFh                            0

/**
 * Initialise message SRR_RR_5CFh buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SRR_RR_5CFh(buf) { \
	INITSIG_SRR_RR_5CFh_RdrObjChks2_RR_15(buf); \
	INITSIG_SRR_RR_5CFh_RdrObjDx_RR_15(buf); \
	INITSIG_SRR_RR_5CFh_RdrObjTiAlv_RR_15(buf); \
	INITSIG_SRR_RR_5CFh_RdrObjVy_RR_15(buf); \
	INITSIG_SRR_RR_5CFh_RdrObjVx_RR_15(buf); \
	INITSIG_SRR_RR_5CFh_RdrObjWth_RR_15(buf); \
	INITSIG_SRR_RR_5CFh_RdrObjHeading_RR_15(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Time_Sync_TimeSync_Trig_Counter Signal TimeSync_Trig_Counter of Message IECU_Time_Sync (0x4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Time_Sync
 * @{
 */

/**
 * Signal TimeSync_Trig_Counter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Time_Sync_TimeSync_Trig_Counter and \ref GET_IECU_Time_Sync_TimeSync_Trig_Counter instead.
 */
#define SIG_IECU_Time_Sync_TimeSync_Trig_Counter        1, 0, 23, 16

/**
 * Signal TimeSync_Trig_Counter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Time_Sync_TimeSync_Trig_Counter or \ref INIT_IECU_Time_Sync instead.
 */
#define SETUP_IECU_Time_Sync_TimeSync_Trig_Counter      1, 0, 23, 16, 0

/**
 * Get signal TimeSync_Trig_Counter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Time_Sync_TimeSync_Trig_Counter(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TimeSync_Trig_Counter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Time_Sync_TimeSync_Trig_Counter(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TimeSync_Trig_Counter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Time_Sync_TimeSync_Trig_Counter(buf) \
	SET_IECU_Time_Sync_TimeSync_Trig_Counter(buf, 0)

/**
 * Signal TimeSync_Trig_Counter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Time_Sync_TimeSync_Trig_Counter(x, fmt) \
	((x) * fmt)

/**
 * Signal TimeSync_Trig_Counter raw initial value.
 */
#define START_IECU_Time_Sync_TimeSync_Trig_Counter      0

/**
 * Signal TimeSync_Trig_Counter raw minimum value.
 */
#define MIN_IECU_Time_Sync_TimeSync_Trig_Counter        0

/**
 * Signal TimeSync_Trig_Counter raw maximum value.
 */
#define MAX_IECU_Time_Sync_TimeSync_Trig_Counter        65535

/**
 * Signal TimeSync_Trig_Counter raw offset value.
 */
#define OFF_IECU_Time_Sync_TimeSync_Trig_Counter        0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Time_Sync_TimeSync_Timer_Count Signal TimeSync_Timer_Count of Message IECU_Time_Sync (0x4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Time_Sync
 * @{
 */

/**
 * Signal TimeSync_Timer_Count configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Time_Sync_TimeSync_Timer_Count and \ref GET_IECU_Time_Sync_TimeSync_Timer_Count instead.
 */
#define SIG_IECU_Time_Sync_TimeSync_Timer_Count        1, 0, 39, 24

/**
 * Signal TimeSync_Timer_Count setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Time_Sync_TimeSync_Timer_Count or \ref INIT_IECU_Time_Sync instead.
 */
#define SETUP_IECU_Time_Sync_TimeSync_Timer_Count      1, 0, 39, 24, 0

/**
 * Get signal TimeSync_Timer_Count from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Time_Sync_TimeSync_Timer_Count(buf) (0 \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TimeSync_Timer_Count in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Time_Sync_TimeSync_Timer_Count(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TimeSync_Timer_Count in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Time_Sync_TimeSync_Timer_Count(buf) \
	SET_IECU_Time_Sync_TimeSync_Timer_Count(buf, 0)

/**
 * Signal TimeSync_Timer_Count value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Time_Sync_TimeSync_Timer_Count(x, fmt) \
	((x) * fmt)

/**
 * Signal TimeSync_Timer_Count raw initial value.
 */
#define START_IECU_Time_Sync_TimeSync_Timer_Count      0

/**
 * Signal TimeSync_Timer_Count raw minimum value.
 */
#define MIN_IECU_Time_Sync_TimeSync_Timer_Count        0

/**
 * Signal TimeSync_Timer_Count raw maximum value.
 */
#define MAX_IECU_Time_Sync_TimeSync_Timer_Count        16750000

/**
 * Signal TimeSync_Timer_Count raw offset value.
 */
#define OFF_IECU_Time_Sync_TimeSync_Timer_Count        0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_GW_TCU_1F5h_TrShftLvrPos Signal TrShftLvrPos of Message IECU_GW_TCU_1F5h (0x1f5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_GW_TCU_1F5h
 * @{
 */

/**
 * Signal TrShftLvrPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_GW_TCU_1F5h_TrShftLvrPos and \ref GET_IECU_GW_TCU_1F5h_TrShftLvrPos instead.
 */
#define SIG_IECU_GW_TCU_1F5h_TrShftLvrPos           1, 0, 27, 4

/**
 * Signal TrShftLvrPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_GW_TCU_1F5h_TrShftLvrPos or \ref INIT_IECU_GW_TCU_1F5h instead.
 */
#define SETUP_IECU_GW_TCU_1F5h_TrShftLvrPos         1, 0, 27, 4, 0

/**
 * Get signal TrShftLvrPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_GW_TCU_1F5h_TrShftLvrPos(buf) (0 \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal TrShftLvrPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_GW_TCU_1F5h_TrShftLvrPos(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal TrShftLvrPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_GW_TCU_1F5h_TrShftLvrPos(buf) \
	SET_IECU_GW_TCU_1F5h_TrShftLvrPos(buf, 0)

/**
 * Signal TrShftLvrPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_GW_TCU_1F5h_TrShftLvrPos(x, fmt) \
	((x) * fmt)

/**
 * Signal TrShftLvrPos raw initial value.
 */
#define START_IECU_GW_TCU_1F5h_TrShftLvrPos         0

/**
 * Signal TrShftLvrPos raw minimum value.
 */
#define MIN_IECU_GW_TCU_1F5h_TrShftLvrPos           0

/**
 * Signal TrShftLvrPos raw maximum value.
 */
#define MAX_IECU_GW_TCU_1F5h_TrShftLvrPos           0

/**
 * Signal TrShftLvrPos raw offset value.
 */
#define OFF_IECU_GW_TCU_1F5h_TrShftLvrPos           0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_GW_TCU_1F5h_TrShftLvrPosV Signal TrShftLvrPosV of Message IECU_GW_TCU_1F5h (0x1f5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_GW_TCU_1F5h
 * @{
 */

/**
 * Signal TrShftLvrPosV configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_GW_TCU_1F5h_TrShftLvrPosV and \ref GET_IECU_GW_TCU_1F5h_TrShftLvrPosV instead.
 */
#define SIG_IECU_GW_TCU_1F5h_TrShftLvrPosV          1, 0, 28, 1

/**
 * Signal TrShftLvrPosV setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_GW_TCU_1F5h_TrShftLvrPosV or \ref INIT_IECU_GW_TCU_1F5h instead.
 */
#define SETUP_IECU_GW_TCU_1F5h_TrShftLvrPosV        1, 0, 28, 1, 0

/**
 * Get signal TrShftLvrPosV from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_GW_TCU_1F5h_TrShftLvrPosV(buf) (0 \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x01) << 0) \
)

/**
 * Set signal TrShftLvrPosV in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_GW_TCU_1F5h_TrShftLvrPosV(buf, val) { \
	buf[3] &= ~(0x01 << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal TrShftLvrPosV in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_GW_TCU_1F5h_TrShftLvrPosV(buf) \
	SET_IECU_GW_TCU_1F5h_TrShftLvrPosV(buf, 0)

/**
 * Signal TrShftLvrPosV value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_GW_TCU_1F5h_TrShftLvrPosV(x, fmt) \
	((x) * fmt)

/**
 * Signal TrShftLvrPosV raw initial value.
 */
#define START_IECU_GW_TCU_1F5h_TrShftLvrPosV        0

/**
 * Signal TrShftLvrPosV raw minimum value.
 */
#define MIN_IECU_GW_TCU_1F5h_TrShftLvrPosV          0

/**
 * Signal TrShftLvrPosV raw maximum value.
 */
#define MAX_IECU_GW_TCU_1F5h_TrShftLvrPosV          0

/**
 * Signal TrShftLvrPosV raw offset value.
 */
#define OFF_IECU_GW_TCU_1F5h_TrShftLvrPosV          0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_SAS_1E5h_StrgWhlAngV Signal StrgWhlAngV of Message IECU_SAS_1E5h (0x1e5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_SAS_1E5h
 * @{
 */

/**
 * Signal StrgWhlAngV configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_SAS_1E5h_StrgWhlAngV and \ref GET_IECU_SAS_1E5h_StrgWhlAngV instead.
 */
#define SIG_IECU_SAS_1E5h_StrgWhlAngV               1, 0, 7, 1

/**
 * Signal StrgWhlAngV setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_SAS_1E5h_StrgWhlAngV or \ref INIT_IECU_SAS_1E5h instead.
 */
#define SETUP_IECU_SAS_1E5h_StrgWhlAngV             1, 0, 7, 1, 0

/**
 * Get signal StrgWhlAngV from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_SAS_1E5h_StrgWhlAngV(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 7) & 0x01) << 0) \
)

/**
 * Set signal StrgWhlAngV in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_SAS_1E5h_StrgWhlAngV(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal StrgWhlAngV in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_SAS_1E5h_StrgWhlAngV(buf) \
	SET_IECU_SAS_1E5h_StrgWhlAngV(buf, 0)

/**
 * Signal StrgWhlAngV value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_SAS_1E5h_StrgWhlAngV(x, fmt) \
	((x) * fmt)

/**
 * Signal StrgWhlAngV raw initial value.
 */
#define START_IECU_SAS_1E5h_StrgWhlAngV             0

/**
 * Signal StrgWhlAngV raw minimum value.
 */
#define MIN_IECU_SAS_1E5h_StrgWhlAngV               0

/**
 * Signal StrgWhlAngV raw maximum value.
 */
#define MAX_IECU_SAS_1E5h_StrgWhlAngV               1

/**
 * Signal StrgWhlAngV raw offset value.
 */
#define OFF_IECU_SAS_1E5h_StrgWhlAngV               0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_SAS_1E5h_StrgWhlAng Signal StrgWhlAng of Message IECU_SAS_1E5h (0x1e5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_SAS_1E5h
 * @{
 */

/**
 * Signal StrgWhlAng configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_SAS_1E5h_StrgWhlAng and \ref GET_IECU_SAS_1E5h_StrgWhlAng instead.
 */
#define SIG_IECU_SAS_1E5h_StrgWhlAng                1, 0, 15, 16

/**
 * Signal StrgWhlAng setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_SAS_1E5h_StrgWhlAng or \ref INIT_IECU_SAS_1E5h instead.
 */
#define SETUP_IECU_SAS_1E5h_StrgWhlAng              1, 0, 15, 16, 0

/**
 * Get signal StrgWhlAng from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_SAS_1E5h_StrgWhlAng(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal StrgWhlAng in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_SAS_1E5h_StrgWhlAng(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal StrgWhlAng in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_SAS_1E5h_StrgWhlAng(buf) \
	SET_IECU_SAS_1E5h_StrgWhlAng(buf, 0)

/**
 * Signal StrgWhlAng value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_SAS_1E5h_StrgWhlAng(x, fmt) \
	((x) * fmt / 16 + fmt * (-2048))

/**
 * Signal StrgWhlAng raw initial value.
 */
#define START_IECU_SAS_1E5h_StrgWhlAng              0

/**
 * Signal StrgWhlAng raw minimum value.
 */
#define MIN_IECU_SAS_1E5h_StrgWhlAng                0

/**
 * Signal StrgWhlAng raw maximum value.
 */
#define MAX_IECU_SAS_1E5h_StrgWhlAng                65535

/**
 * Signal StrgWhlAng raw offset value.
 */
#define OFF_IECU_SAS_1E5h_StrgWhlAng                -32768

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_ESC_1E9h_VehDynYawRateV Signal VehDynYawRateV of Message IECU_ESC_1E9h (0x1e9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_ESC_1E9h
 * @{
 */

/**
 * Signal VehDynYawRateV configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_ESC_1E9h_VehDynYawRateV and \ref GET_IECU_ESC_1E9h_VehDynYawRateV instead.
 */
#define SIG_IECU_ESC_1E9h_VehDynYawRateV            1, 0, 36, 1

/**
 * Signal VehDynYawRateV setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_ESC_1E9h_VehDynYawRateV or \ref INIT_IECU_ESC_1E9h instead.
 */
#define SETUP_IECU_ESC_1E9h_VehDynYawRateV          1, 0, 36, 1, 0

/**
 * Get signal VehDynYawRateV from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_ESC_1E9h_VehDynYawRateV(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 4) & 0x01) << 0) \
)

/**
 * Set signal VehDynYawRateV in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_ESC_1E9h_VehDynYawRateV(buf, val) { \
	buf[4] &= ~(0x01 << 4); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal VehDynYawRateV in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_ESC_1E9h_VehDynYawRateV(buf) \
	SET_IECU_ESC_1E9h_VehDynYawRateV(buf, 0)

/**
 * Signal VehDynYawRateV value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_ESC_1E9h_VehDynYawRateV(x, fmt) \
	((x) * fmt)

/**
 * Signal VehDynYawRateV raw initial value.
 */
#define START_IECU_ESC_1E9h_VehDynYawRateV          0

/**
 * Signal VehDynYawRateV raw minimum value.
 */
#define MIN_IECU_ESC_1E9h_VehDynYawRateV            0

/**
 * Signal VehDynYawRateV raw maximum value.
 */
#define MAX_IECU_ESC_1E9h_VehDynYawRateV            0

/**
 * Signal VehDynYawRateV raw offset value.
 */
#define OFF_IECU_ESC_1E9h_VehDynYawRateV            0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_ESC_1E9h_VehDynYawRate Signal VehDynYawRate of Message IECU_ESC_1E9h (0x1e9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_ESC_1E9h
 * @{
 */

/**
 * Signal VehDynYawRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_ESC_1E9h_VehDynYawRate and \ref GET_IECU_ESC_1E9h_VehDynYawRate instead.
 */
#define SIG_IECU_ESC_1E9h_VehDynYawRate             1, 1, 35, 12

/**
 * Signal VehDynYawRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_ESC_1E9h_VehDynYawRate or \ref INIT_IECU_ESC_1E9h instead.
 */
#define SETUP_IECU_ESC_1E9h_VehDynYawRate           1, 1, 35, 12, 0

/**
 * Get signal VehDynYawRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_ESC_1E9h_VehDynYawRate(buf) (0 \
	| (uword)(-(uword)((buf[4] >> 3) & 0x01) << 12) \
	| (uword)(+(uword)((buf[4] >> 0) & 0x0f) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehDynYawRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_ESC_1E9h_VehDynYawRate(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x0f) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehDynYawRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_ESC_1E9h_VehDynYawRate(buf) \
	SET_IECU_ESC_1E9h_VehDynYawRate(buf, 0)

/**
 * Signal VehDynYawRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_ESC_1E9h_VehDynYawRate(x, fmt) \
	((x) * fmt / 16)

/**
 * Signal VehDynYawRate raw initial value.
 */
#define START_IECU_ESC_1E9h_VehDynYawRate           0

/**
 * Signal VehDynYawRate raw minimum value.
 */
#define MIN_IECU_ESC_1E9h_VehDynYawRate             -2048

/**
 * Signal VehDynYawRate raw maximum value.
 */
#define MAX_IECU_ESC_1E9h_VehDynYawRate             2047

/**
 * Signal VehDynYawRate raw offset value.
 */
#define OFF_IECU_ESC_1E9h_VehDynYawRate             0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_ESC_1FCh_LongdAccSnsrVal Signal LongdAccSnsrVal of Message IECU_ESC_1FCh (0x1fc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_ESC_1FCh
 * @{
 */

/**
 * Signal LongdAccSnsrVal configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_ESC_1FCh_LongdAccSnsrVal and \ref GET_IECU_ESC_1FCh_LongdAccSnsrVal instead.
 */
#define SIG_IECU_ESC_1FCh_LongdAccSnsrVal           1, 1, 7, 16

/**
 * Signal LongdAccSnsrVal setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_ESC_1FCh_LongdAccSnsrVal or \ref INIT_IECU_ESC_1FCh instead.
 */
#define SETUP_IECU_ESC_1FCh_LongdAccSnsrVal         1, 1, 7, 16, 0

/**
 * Get signal LongdAccSnsrVal from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_ESC_1FCh_LongdAccSnsrVal(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal LongdAccSnsrVal in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_ESC_1FCh_LongdAccSnsrVal(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal LongdAccSnsrVal in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_ESC_1FCh_LongdAccSnsrVal(buf) \
	SET_IECU_ESC_1FCh_LongdAccSnsrVal(buf, 0)

/**
 * Signal LongdAccSnsrVal value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_ESC_1FCh_LongdAccSnsrVal(x, fmt) \
	((x) * fmt * 262143 / 2147483647)

/**
 * Signal LongdAccSnsrVal raw initial value.
 */
#define START_IECU_ESC_1FCh_LongdAccSnsrVal         0

/**
 * Signal LongdAccSnsrVal raw minimum value.
 */
#define MIN_IECU_ESC_1FCh_LongdAccSnsrVal           -32768

/**
 * Signal LongdAccSnsrVal raw maximum value.
 */
#define MAX_IECU_ESC_1FCh_LongdAccSnsrVal           32767

/**
 * Signal LongdAccSnsrVal raw offset value.
 */
#define OFF_IECU_ESC_1FCh_LongdAccSnsrVal           0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_ESC_1FCh_LatAccSnsrVal Signal LatAccSnsrVal of Message IECU_ESC_1FCh (0x1fc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_ESC_1FCh
 * @{
 */

/**
 * Signal LatAccSnsrVal configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_ESC_1FCh_LatAccSnsrVal and \ref GET_IECU_ESC_1FCh_LatAccSnsrVal instead.
 */
#define SIG_IECU_ESC_1FCh_LatAccSnsrVal             1, 1, 23, 16

/**
 * Signal LatAccSnsrVal setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_ESC_1FCh_LatAccSnsrVal or \ref INIT_IECU_ESC_1FCh instead.
 */
#define SETUP_IECU_ESC_1FCh_LatAccSnsrVal           1, 1, 23, 16, 0

/**
 * Get signal LatAccSnsrVal from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_ESC_1FCh_LatAccSnsrVal(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal LatAccSnsrVal in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_ESC_1FCh_LatAccSnsrVal(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal LatAccSnsrVal in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_ESC_1FCh_LatAccSnsrVal(buf) \
	SET_IECU_ESC_1FCh_LatAccSnsrVal(buf, 0)

/**
 * Signal LatAccSnsrVal value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_ESC_1FCh_LatAccSnsrVal(x, fmt) \
	((x) * fmt * 262143 / 2147483647)

/**
 * Signal LatAccSnsrVal raw initial value.
 */
#define START_IECU_ESC_1FCh_LatAccSnsrVal           0

/**
 * Signal LatAccSnsrVal raw minimum value.
 */
#define MIN_IECU_ESC_1FCh_LatAccSnsrVal             -32768

/**
 * Signal LatAccSnsrVal raw maximum value.
 */
#define MAX_IECU_ESC_1FCh_LatAccSnsrVal             32767

/**
 * Signal LatAccSnsrVal raw offset value.
 */
#define OFF_IECU_ESC_1FCh_LatAccSnsrVal             0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_ESC_23Ch_VehicleSpeedStatus Signal VehicleSpeedStatus of Message IECU_ESC_23Ch (0x23c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_ESC_23Ch
 * @{
 */

/**
 * Signal VehicleSpeedStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_ESC_23Ch_VehicleSpeedStatus and \ref GET_IECU_ESC_23Ch_VehicleSpeedStatus instead.
 */
#define SIG_IECU_ESC_23Ch_VehicleSpeedStatus        1, 0, 7, 1

/**
 * Signal VehicleSpeedStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_ESC_23Ch_VehicleSpeedStatus or \ref INIT_IECU_ESC_23Ch instead.
 */
#define SETUP_IECU_ESC_23Ch_VehicleSpeedStatus      1, 0, 7, 1, 0

/**
 * Get signal VehicleSpeedStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_ESC_23Ch_VehicleSpeedStatus(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 7) & 0x01) << 0) \
)

/**
 * Set signal VehicleSpeedStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_ESC_23Ch_VehicleSpeedStatus(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal VehicleSpeedStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_ESC_23Ch_VehicleSpeedStatus(buf) \
	SET_IECU_ESC_23Ch_VehicleSpeedStatus(buf, 0)

/**
 * Signal VehicleSpeedStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_ESC_23Ch_VehicleSpeedStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal VehicleSpeedStatus raw initial value.
 */
#define START_IECU_ESC_23Ch_VehicleSpeedStatus      0

/**
 * Signal VehicleSpeedStatus raw minimum value.
 */
#define MIN_IECU_ESC_23Ch_VehicleSpeedStatus        0

/**
 * Signal VehicleSpeedStatus raw maximum value.
 */
#define MAX_IECU_ESC_23Ch_VehicleSpeedStatus        1

/**
 * Signal VehicleSpeedStatus raw offset value.
 */
#define OFF_IECU_ESC_23Ch_VehicleSpeedStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_ESC_23Ch_VehicleSpeed Signal VehicleSpeed of Message IECU_ESC_23Ch (0x23c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_ESC_23Ch
 * @{
 */

/**
 * Signal VehicleSpeed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_ESC_23Ch_VehicleSpeed and \ref GET_IECU_ESC_23Ch_VehicleSpeed instead.
 */
#define SIG_IECU_ESC_23Ch_VehicleSpeed              1, 0, 6, 15

/**
 * Signal VehicleSpeed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_ESC_23Ch_VehicleSpeed or \ref INIT_IECU_ESC_23Ch instead.
 */
#define SETUP_IECU_ESC_23Ch_VehicleSpeed            1, 0, 6, 15, 0

/**
 * Get signal VehicleSpeed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_ESC_23Ch_VehicleSpeed(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0x7f) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehicleSpeed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_ESC_23Ch_VehicleSpeed(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0x7f) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehicleSpeed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_ESC_23Ch_VehicleSpeed(buf) \
	SET_IECU_ESC_23Ch_VehicleSpeed(buf, 0)

/**
 * Signal VehicleSpeed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_ESC_23Ch_VehicleSpeed(x, fmt) \
	((x) * fmt / 64)

/**
 * Signal VehicleSpeed raw initial value.
 */
#define START_IECU_ESC_23Ch_VehicleSpeed            0

/**
 * Signal VehicleSpeed raw minimum value.
 */
#define MIN_IECU_ESC_23Ch_VehicleSpeed              0

/**
 * Signal VehicleSpeed raw maximum value.
 */
#define MAX_IECU_ESC_23Ch_VehicleSpeed              32767

/**
 * Signal VehicleSpeed raw offset value.
 */
#define OFF_IECU_ESC_23Ch_VehicleSpeed              0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Tester_7DFh_TesterDiagRequestData_Fun Signal TesterDiagRequestData_Fun of Message IECU_Tester_7DFh (0x7df)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Tester_7DFh
 * @{
 */

/**
 * Signal TesterDiagRequestData_Fun configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Tester_7DFh_TesterDiagRequestData_Fun and \ref GET_IECU_Tester_7DFh_TesterDiagRequestData_Fun instead.
 */
#define SIG_IECU_Tester_7DFh_TesterDiagRequestData_Fun        1, 0, 7, 64

/**
 * Signal TesterDiagRequestData_Fun setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Tester_7DFh_TesterDiagRequestData_Fun or \ref INIT_IECU_Tester_7DFh instead.
 */
#define SETUP_IECU_Tester_7DFh_TesterDiagRequestData_Fun      1, 0, 7, 64, 0

/**
 * Get signal TesterDiagRequestData_Fun from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Tester_7DFh_TesterDiagRequestData_Fun(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TesterDiagRequestData_Fun in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Tester_7DFh_TesterDiagRequestData_Fun(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TesterDiagRequestData_Fun in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Tester_7DFh_TesterDiagRequestData_Fun(buf) \
	SET_IECU_Tester_7DFh_TesterDiagRequestData_Fun(buf, 0)

/**
 * Signal TesterDiagRequestData_Fun value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Tester_7DFh_TesterDiagRequestData_Fun(x, fmt) \
	((x) * fmt)

/**
 * Signal TesterDiagRequestData_Fun raw initial value.
 */
#define START_IECU_Tester_7DFh_TesterDiagRequestData_Fun      0

/**
 * Signal TesterDiagRequestData_Fun raw minimum value.
 */
#define MIN_IECU_Tester_7DFh_TesterDiagRequestData_Fun        0

/**
 * Signal TesterDiagRequestData_Fun raw maximum value.
 */
#define MAX_IECU_Tester_7DFh_TesterDiagRequestData_Fun        255

/**
 * Signal TesterDiagRequestData_Fun raw offset value.
 */
#define OFF_IECU_Tester_7DFh_TesterDiagRequestData_Fun        0

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Tester_704h_TesterDiagRequestData_SRR_FL Signal TesterDiagRequestData_SRR_FL of Message IECU_Tester_704h (0x704)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Tester_704h
 * @{
 */

/**
 * Signal TesterDiagRequestData_SRR_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Tester_704h_TesterDiagRequestData_SRR_FL and \ref GET_IECU_Tester_704h_TesterDiagRequestData_SRR_FL instead.
 */
#define SIG_IECU_Tester_704h_TesterDiagRequestData_SRR_FL        1, 0, 7, 64

/**
 * Signal TesterDiagRequestData_SRR_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Tester_704h_TesterDiagRequestData_SRR_FL or \ref INIT_IECU_Tester_704h instead.
 */
#define SETUP_IECU_Tester_704h_TesterDiagRequestData_SRR_FL      1, 0, 7, 64, 0

/**
 * Get signal TesterDiagRequestData_SRR_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Tester_704h_TesterDiagRequestData_SRR_FL(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TesterDiagRequestData_SRR_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Tester_704h_TesterDiagRequestData_SRR_FL(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TesterDiagRequestData_SRR_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Tester_704h_TesterDiagRequestData_SRR_FL(buf) \
	SET_IECU_Tester_704h_TesterDiagRequestData_SRR_FL(buf, 0)

/**
 * Signal TesterDiagRequestData_SRR_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Tester_704h_TesterDiagRequestData_SRR_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal TesterDiagRequestData_SRR_FL raw initial value.
 */
#define START_IECU_Tester_704h_TesterDiagRequestData_SRR_FL      0

/**
 * Signal TesterDiagRequestData_SRR_FL raw minimum value.
 */
#define MIN_IECU_Tester_704h_TesterDiagRequestData_SRR_FL        0

/**
 * Signal TesterDiagRequestData_SRR_FL raw maximum value.
 */
#define MAX_IECU_Tester_704h_TesterDiagRequestData_SRR_FL        255

/**
 * Signal TesterDiagRequestData_SRR_FL raw offset value.
 */
#define OFF_IECU_Tester_704h_TesterDiagRequestData_SRR_FL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_784h_SRR_FLDiagResponseData Signal SRR_FLDiagResponseData of Message SRR_FL_784h (0x784)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_784h
 * @{
 */

/**
 * Signal SRR_FLDiagResponseData configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_784h_SRR_FLDiagResponseData and \ref GET_SRR_FL_784h_SRR_FLDiagResponseData instead.
 */
#define SIG_SRR_FL_784h_SRR_FLDiagResponseData        1, 0, 7, 64

/**
 * Signal SRR_FLDiagResponseData setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_784h_SRR_FLDiagResponseData or \ref INIT_SRR_FL_784h instead.
 */
#define SETUP_SRR_FL_784h_SRR_FLDiagResponseData      1, 0, 7, 64, 0

/**
 * Get signal SRR_FLDiagResponseData from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_784h_SRR_FLDiagResponseData(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SRR_FLDiagResponseData in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_784h_SRR_FLDiagResponseData(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SRR_FLDiagResponseData in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_784h_SRR_FLDiagResponseData(buf) \
	SET_SRR_FL_784h_SRR_FLDiagResponseData(buf, 0)

/**
 * Signal SRR_FLDiagResponseData value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_784h_SRR_FLDiagResponseData(x, fmt) \
	((x) * fmt)

/**
 * Signal SRR_FLDiagResponseData raw initial value.
 */
#define START_SRR_FL_784h_SRR_FLDiagResponseData      0

/**
 * Signal SRR_FLDiagResponseData raw minimum value.
 */
#define MIN_SRR_FL_784h_SRR_FLDiagResponseData        0

/**
 * Signal SRR_FLDiagResponseData raw maximum value.
 */
#define MAX_SRR_FL_784h_SRR_FLDiagResponseData        255

/**
 * Signal SRR_FLDiagResponseData raw offset value.
 */
#define OFF_SRR_FL_784h_SRR_FLDiagResponseData        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_390h_RdrStsChks_FL Signal RdrStsChks_FL of Message SRR_FL_390h (0x390)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_390h
 * @{
 */

/**
 * Signal RdrStsChks_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_390h_RdrStsChks_FL and \ref GET_SRR_FL_390h_RdrStsChks_FL instead.
 */
#define SIG_SRR_FL_390h_RdrStsChks_FL               1, 0, 7, 8

/**
 * Signal RdrStsChks_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_390h_RdrStsChks_FL or \ref INIT_SRR_FL_390h instead.
 */
#define SETUP_SRR_FL_390h_RdrStsChks_FL             1, 0, 7, 8, 0

/**
 * Get signal RdrStsChks_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_390h_RdrStsChks_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsChks_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_390h_RdrStsChks_FL(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsChks_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_390h_RdrStsChks_FL(buf) \
	SET_SRR_FL_390h_RdrStsChks_FL(buf, 0)

/**
 * Signal RdrStsChks_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_390h_RdrStsChks_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsChks_FL raw initial value.
 */
#define START_SRR_FL_390h_RdrStsChks_FL             0

/**
 * Signal RdrStsChks_FL raw minimum value.
 */
#define MIN_SRR_FL_390h_RdrStsChks_FL               0

/**
 * Signal RdrStsChks_FL raw maximum value.
 */
#define MAX_SRR_FL_390h_RdrStsChks_FL               255

/**
 * Signal RdrStsChks_FL raw offset value.
 */
#define OFF_SRR_FL_390h_RdrStsChks_FL               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_390h_RdrStsCntr_FL Signal RdrStsCntr_FL of Message SRR_FL_390h (0x390)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_390h
 * @{
 */

/**
 * Signal RdrStsCntr_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_390h_RdrStsCntr_FL and \ref GET_SRR_FL_390h_RdrStsCntr_FL instead.
 */
#define SIG_SRR_FL_390h_RdrStsCntr_FL               1, 0, 15, 4

/**
 * Signal RdrStsCntr_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_390h_RdrStsCntr_FL or \ref INIT_SRR_FL_390h instead.
 */
#define SETUP_SRR_FL_390h_RdrStsCntr_FL             1, 0, 15, 4, 0

/**
 * Get signal RdrStsCntr_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_390h_RdrStsCntr_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsCntr_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_390h_RdrStsCntr_FL(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsCntr_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_390h_RdrStsCntr_FL(buf) \
	SET_SRR_FL_390h_RdrStsCntr_FL(buf, 0)

/**
 * Signal RdrStsCntr_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_390h_RdrStsCntr_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsCntr_FL raw initial value.
 */
#define START_SRR_FL_390h_RdrStsCntr_FL             0

/**
 * Signal RdrStsCntr_FL raw minimum value.
 */
#define MIN_SRR_FL_390h_RdrStsCntr_FL               0

/**
 * Signal RdrStsCntr_FL raw maximum value.
 */
#define MAX_SRR_FL_390h_RdrStsCntr_FL               15

/**
 * Signal RdrStsCntr_FL raw offset value.
 */
#define OFF_SRR_FL_390h_RdrStsCntr_FL               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_390h_RdrStsIfVersMajor_FL Signal RdrStsIfVersMajor_FL of Message SRR_FL_390h (0x390)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_390h
 * @{
 */

/**
 * Signal RdrStsIfVersMajor_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_390h_RdrStsIfVersMajor_FL and \ref GET_SRR_FL_390h_RdrStsIfVersMajor_FL instead.
 */
#define SIG_SRR_FL_390h_RdrStsIfVersMajor_FL        1, 0, 11, 4

/**
 * Signal RdrStsIfVersMajor_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_390h_RdrStsIfVersMajor_FL or \ref INIT_SRR_FL_390h instead.
 */
#define SETUP_SRR_FL_390h_RdrStsIfVersMajor_FL      1, 0, 11, 4, 0

/**
 * Get signal RdrStsIfVersMajor_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_390h_RdrStsIfVersMajor_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMajor_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_390h_RdrStsIfVersMajor_FL(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMajor_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_390h_RdrStsIfVersMajor_FL(buf) \
	SET_SRR_FL_390h_RdrStsIfVersMajor_FL(buf, 0)

/**
 * Signal RdrStsIfVersMajor_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_390h_RdrStsIfVersMajor_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMajor_FL raw initial value.
 */
#define START_SRR_FL_390h_RdrStsIfVersMajor_FL      0

/**
 * Signal RdrStsIfVersMajor_FL raw minimum value.
 */
#define MIN_SRR_FL_390h_RdrStsIfVersMajor_FL        0

/**
 * Signal RdrStsIfVersMajor_FL raw maximum value.
 */
#define MAX_SRR_FL_390h_RdrStsIfVersMajor_FL        15

/**
 * Signal RdrStsIfVersMajor_FL raw offset value.
 */
#define OFF_SRR_FL_390h_RdrStsIfVersMajor_FL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_390h_RdrStsIfVersMiddle_FL Signal RdrStsIfVersMiddle_FL of Message SRR_FL_390h (0x390)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_390h
 * @{
 */

/**
 * Signal RdrStsIfVersMiddle_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_390h_RdrStsIfVersMiddle_FL and \ref GET_SRR_FL_390h_RdrStsIfVersMiddle_FL instead.
 */
#define SIG_SRR_FL_390h_RdrStsIfVersMiddle_FL        1, 0, 23, 4

/**
 * Signal RdrStsIfVersMiddle_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_390h_RdrStsIfVersMiddle_FL or \ref INIT_SRR_FL_390h instead.
 */
#define SETUP_SRR_FL_390h_RdrStsIfVersMiddle_FL      1, 0, 23, 4, 0

/**
 * Get signal RdrStsIfVersMiddle_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_390h_RdrStsIfVersMiddle_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMiddle_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_390h_RdrStsIfVersMiddle_FL(buf, val) { \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsIfVersMiddle_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_390h_RdrStsIfVersMiddle_FL(buf) \
	SET_SRR_FL_390h_RdrStsIfVersMiddle_FL(buf, 0)

/**
 * Signal RdrStsIfVersMiddle_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_390h_RdrStsIfVersMiddle_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMiddle_FL raw initial value.
 */
#define START_SRR_FL_390h_RdrStsIfVersMiddle_FL      0

/**
 * Signal RdrStsIfVersMiddle_FL raw minimum value.
 */
#define MIN_SRR_FL_390h_RdrStsIfVersMiddle_FL        0

/**
 * Signal RdrStsIfVersMiddle_FL raw maximum value.
 */
#define MAX_SRR_FL_390h_RdrStsIfVersMiddle_FL        15

/**
 * Signal RdrStsIfVersMiddle_FL raw offset value.
 */
#define OFF_SRR_FL_390h_RdrStsIfVersMiddle_FL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_390h_RdrStsIfVersMinor_FL Signal RdrStsIfVersMinor_FL of Message SRR_FL_390h (0x390)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_390h
 * @{
 */

/**
 * Signal RdrStsIfVersMinor_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_390h_RdrStsIfVersMinor_FL and \ref GET_SRR_FL_390h_RdrStsIfVersMinor_FL instead.
 */
#define SIG_SRR_FL_390h_RdrStsIfVersMinor_FL        1, 0, 19, 4

/**
 * Signal RdrStsIfVersMinor_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_390h_RdrStsIfVersMinor_FL or \ref INIT_SRR_FL_390h instead.
 */
#define SETUP_SRR_FL_390h_RdrStsIfVersMinor_FL      1, 0, 19, 4, 0

/**
 * Get signal RdrStsIfVersMinor_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_390h_RdrStsIfVersMinor_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMinor_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_390h_RdrStsIfVersMinor_FL(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMinor_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_390h_RdrStsIfVersMinor_FL(buf) \
	SET_SRR_FL_390h_RdrStsIfVersMinor_FL(buf, 0)

/**
 * Signal RdrStsIfVersMinor_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_390h_RdrStsIfVersMinor_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMinor_FL raw initial value.
 */
#define START_SRR_FL_390h_RdrStsIfVersMinor_FL      0

/**
 * Signal RdrStsIfVersMinor_FL raw minimum value.
 */
#define MIN_SRR_FL_390h_RdrStsIfVersMinor_FL        0

/**
 * Signal RdrStsIfVersMinor_FL raw maximum value.
 */
#define MAX_SRR_FL_390h_RdrStsIfVersMinor_FL        15

/**
 * Signal RdrStsIfVersMinor_FL raw offset value.
 */
#define OFF_SRR_FL_390h_RdrStsIfVersMinor_FL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_390h_RdrStsTiStamp_FL Signal RdrStsTiStamp_FL of Message SRR_FL_390h (0x390)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_390h
 * @{
 */

/**
 * Signal RdrStsTiStamp_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_390h_RdrStsTiStamp_FL and \ref GET_SRR_FL_390h_RdrStsTiStamp_FL instead.
 */
#define SIG_SRR_FL_390h_RdrStsTiStamp_FL            1, 0, 31, 32

/**
 * Signal RdrStsTiStamp_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_390h_RdrStsTiStamp_FL or \ref INIT_SRR_FL_390h instead.
 */
#define SETUP_SRR_FL_390h_RdrStsTiStamp_FL          1, 0, 31, 32, 0

/**
 * Get signal RdrStsTiStamp_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_390h_RdrStsTiStamp_FL(buf) (0 \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsTiStamp_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_390h_RdrStsTiStamp_FL(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsTiStamp_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_390h_RdrStsTiStamp_FL(buf) \
	SET_SRR_FL_390h_RdrStsTiStamp_FL(buf, 0)

/**
 * Signal RdrStsTiStamp_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_390h_RdrStsTiStamp_FL(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal RdrStsTiStamp_FL raw initial value.
 */
#define START_SRR_FL_390h_RdrStsTiStamp_FL          0

/**
 * Signal RdrStsTiStamp_FL raw minimum value.
 */
#define MIN_SRR_FL_390h_RdrStsTiStamp_FL            0

/**
 * Signal RdrStsTiStamp_FL raw maximum value.
 */
#define MAX_SRR_FL_390h_RdrStsTiStamp_FL            4294967295

/**
 * Signal RdrStsTiStamp_FL raw offset value.
 */
#define OFF_SRR_FL_390h_RdrStsTiStamp_FL            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_391h_Genrl_SnsrLatency_FL Signal Genrl_SnsrLatency_FL of Message SRR_FL_391h (0x391)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_391h
 * @{
 */

/**
 * Signal Genrl_SnsrLatency_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_391h_Genrl_SnsrLatency_FL and \ref GET_SRR_FL_391h_Genrl_SnsrLatency_FL instead.
 */
#define SIG_SRR_FL_391h_Genrl_SnsrLatency_FL        1, 0, 7, 7

/**
 * Signal Genrl_SnsrLatency_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_391h_Genrl_SnsrLatency_FL or \ref INIT_SRR_FL_391h instead.
 */
#define SETUP_SRR_FL_391h_Genrl_SnsrLatency_FL      1, 0, 7, 7, 0

/**
 * Get signal Genrl_SnsrLatency_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_391h_Genrl_SnsrLatency_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Genrl_SnsrLatency_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_391h_Genrl_SnsrLatency_FL(buf, val) { \
	buf[0] &= ~(0x7f << 1); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Genrl_SnsrLatency_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_391h_Genrl_SnsrLatency_FL(buf) \
	SET_SRR_FL_391h_Genrl_SnsrLatency_FL(buf, 0)

/**
 * Signal Genrl_SnsrLatency_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_391h_Genrl_SnsrLatency_FL(x, fmt) \
	((x) * fmt * 10)

/**
 * Signal Genrl_SnsrLatency_FL raw initial value.
 */
#define START_SRR_FL_391h_Genrl_SnsrLatency_FL      0

/**
 * Signal Genrl_SnsrLatency_FL raw minimum value.
 */
#define MIN_SRR_FL_391h_Genrl_SnsrLatency_FL        0

/**
 * Signal Genrl_SnsrLatency_FL raw maximum value.
 */
#define MAX_SRR_FL_391h_Genrl_SnsrLatency_FL        127

/**
 * Signal Genrl_SnsrLatency_FL raw offset value.
 */
#define OFF_SRR_FL_391h_Genrl_SnsrLatency_FL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_391h_RdrSysSts_FL Signal RdrSysSts_FL of Message SRR_FL_391h (0x391)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_391h
 * @{
 */

/**
 * Signal RdrSysSts_FL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_391h_RdrSysSts_FL and \ref GET_SRR_FL_391h_RdrSysSts_FL instead.
 */
#define SIG_SRR_FL_391h_RdrSysSts_FL                1, 0, 15, 3

/**
 * Signal RdrSysSts_FL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_391h_RdrSysSts_FL or \ref INIT_SRR_FL_391h instead.
 */
#define SETUP_SRR_FL_391h_RdrSysSts_FL              1, 0, 15, 3, 0

/**
 * Get signal RdrSysSts_FL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_391h_RdrSysSts_FL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 5) & 0x07) << 0) \
)

/**
 * Set signal RdrSysSts_FL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_391h_RdrSysSts_FL(buf, val) { \
	buf[1] &= ~(0x07 << 5); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal RdrSysSts_FL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_391h_RdrSysSts_FL(buf) \
	SET_SRR_FL_391h_RdrSysSts_FL(buf, 0)

/**
 * Signal RdrSysSts_FL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_391h_RdrSysSts_FL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrSysSts_FL raw initial value.
 */
#define START_SRR_FL_391h_RdrSysSts_FL              0

/**
 * Signal RdrSysSts_FL raw minimum value.
 */
#define MIN_SRR_FL_391h_RdrSysSts_FL                0

/**
 * Signal RdrSysSts_FL raw maximum value.
 */
#define MAX_SRR_FL_391h_RdrSysSts_FL                7

/**
 * Signal RdrSysSts_FL raw offset value.
 */
#define OFF_SRR_FL_391h_RdrSysSts_FL                0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjChks_FL_1 Signal RdrObjChks_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjChks_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjChks_FL_1 and \ref GET_SRR_FL_392h_RdrObjChks_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjChks_FL_1             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjChks_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjChks_FL_1           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjChks_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjChks_FL_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjChks_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjChks_FL_1(buf, 0)

/**
 * Signal RdrObjChks_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjChks_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjChks_FL_1           0

/**
 * Signal RdrObjChks_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjChks_FL_1             0

/**
 * Signal RdrObjChks_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjChks_FL_1             255

/**
 * Signal RdrObjChks_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjChks_FL_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjCntr_FL_1 Signal RdrObjCntr_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjCntr_FL_1 and \ref GET_SRR_FL_392h_RdrObjCntr_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjCntr_FL_1             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjCntr_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjCntr_FL_1           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjCntr_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjCntr_FL_1(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjCntr_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjCntr_FL_1(buf, 0)

/**
 * Signal RdrObjCntr_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjCntr_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjCntr_FL_1           0

/**
 * Signal RdrObjCntr_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjCntr_FL_1             0

/**
 * Signal RdrObjCntr_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjCntr_FL_1             15

/**
 * Signal RdrObjCntr_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjCntr_FL_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjAy_FL_1 Signal RdrObjAy_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjAy_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjAy_FL_1 and \ref GET_SRR_FL_392h_RdrObjAy_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjAy_FL_1               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjAy_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjAy_FL_1             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjAy_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjAy_FL_1(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjAy_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjAy_FL_1(buf, 0)

/**
 * Signal RdrObjAy_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjAy_FL_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjAy_FL_1             0

/**
 * Signal RdrObjAy_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjAy_FL_1               0

/**
 * Signal RdrObjAy_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjAy_FL_1               128

/**
 * Signal RdrObjAy_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjAy_FL_1               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjAx_FL_1 Signal RdrObjAx_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjAx_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjAx_FL_1 and \ref GET_SRR_FL_392h_RdrObjAx_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjAx_FL_1               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjAx_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjAx_FL_1             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjAx_FL_1(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjAx_FL_1(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjAx_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjAx_FL_1(buf, 0)

/**
 * Signal RdrObjAx_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjAx_FL_1(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjAx_FL_1             0

/**
 * Signal RdrObjAx_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjAx_FL_1               0

/**
 * Signal RdrObjAx_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjAx_FL_1               512

/**
 * Signal RdrObjAx_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjAx_FL_1               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjCoast_FL_1 Signal RdrObjCoast_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjCoast_FL_1 and \ref GET_SRR_FL_392h_RdrObjCoast_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjCoast_FL_1            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjCoast_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjCoast_FL_1          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjCoast_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjCoast_FL_1(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjCoast_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjCoast_FL_1(buf, 0)

/**
 * Signal RdrObjCoast_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjCoast_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjCoast_FL_1          0

/**
 * Signal RdrObjCoast_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjCoast_FL_1            0

/**
 * Signal RdrObjCoast_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjCoast_FL_1            1

/**
 * Signal RdrObjCoast_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjCoast_FL_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjConf_FL_1 Signal RdrObjConf_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjConf_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjConf_FL_1 and \ref GET_SRR_FL_392h_RdrObjConf_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjConf_FL_1             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjConf_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjConf_FL_1           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjConf_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjConf_FL_1(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjConf_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjConf_FL_1(buf, 0)

/**
 * Signal RdrObjConf_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjConf_FL_1(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjConf_FL_1           0

/**
 * Signal RdrObjConf_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjConf_FL_1             0

/**
 * Signal RdrObjConf_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjConf_FL_1             14

/**
 * Signal RdrObjConf_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjConf_FL_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjMtnPat_FL_1 Signal RdrObjMtnPat_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjMtnPat_FL_1 and \ref GET_SRR_FL_392h_RdrObjMtnPat_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjMtnPat_FL_1           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjMtnPat_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjMtnPat_FL_1         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjMtnPat_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjMtnPat_FL_1(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjMtnPat_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjMtnPat_FL_1(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjMtnPat_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjMtnPat_FL_1         0

/**
 * Signal RdrObjMtnPat_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjMtnPat_FL_1           0

/**
 * Signal RdrObjMtnPat_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjMtnPat_FL_1           3

/**
 * Signal RdrObjMtnPat_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjMtnPat_FL_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjID_FL_1 Signal RdrObjID_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjID_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjID_FL_1 and \ref GET_SRR_FL_392h_RdrObjID_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjID_FL_1               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjID_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjID_FL_1             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjID_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjID_FL_1(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjID_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjID_FL_1(buf, 0)

/**
 * Signal RdrObjID_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjID_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjID_FL_1             0

/**
 * Signal RdrObjID_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjID_FL_1               0

/**
 * Signal RdrObjID_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjID_FL_1               255

/**
 * Signal RdrObjID_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjID_FL_1               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjTyp_FL_1 Signal RdrObjTyp_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjTyp_FL_1 and \ref GET_SRR_FL_392h_RdrObjTyp_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjTyp_FL_1              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjTyp_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjTyp_FL_1            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjTyp_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjTyp_FL_1(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjTyp_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjTyp_FL_1(buf, 0)

/**
 * Signal RdrObjTyp_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjTyp_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjTyp_FL_1            0

/**
 * Signal RdrObjTyp_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjTyp_FL_1              0

/**
 * Signal RdrObjTyp_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjTyp_FL_1              3

/**
 * Signal RdrObjTyp_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjTyp_FL_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_392h_RdrObjDy_FL_1 Signal RdrObjDy_FL_1 of Message SRR_FL_392h (0x392)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_392h
 * @{
 */

/**
 * Signal RdrObjDy_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_392h_RdrObjDy_FL_1 and \ref GET_SRR_FL_392h_RdrObjDy_FL_1 instead.
 */
#define SIG_SRR_FL_392h_RdrObjDy_FL_1               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_392h_RdrObjDy_FL_1 or \ref INIT_SRR_FL_392h instead.
 */
#define SETUP_SRR_FL_392h_RdrObjDy_FL_1             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_392h_RdrObjDy_FL_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_392h_RdrObjDy_FL_1(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_392h_RdrObjDy_FL_1(buf) \
	SET_SRR_FL_392h_RdrObjDy_FL_1(buf, 0)

/**
 * Signal RdrObjDy_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_392h_RdrObjDy_FL_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_1 raw initial value.
 */
#define START_SRR_FL_392h_RdrObjDy_FL_1             0

/**
 * Signal RdrObjDy_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_392h_RdrObjDy_FL_1               0

/**
 * Signal RdrObjDy_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_392h_RdrObjDy_FL_1               2046

/**
 * Signal RdrObjDy_FL_1 raw offset value.
 */
#define OFF_SRR_FL_392h_RdrObjDy_FL_1               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjChks2_FL_1 Signal RdrObjChks2_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjChks2_FL_1 and \ref GET_SRR_FL_393h_RdrObjChks2_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjChks2_FL_1            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjChks2_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjChks2_FL_1          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjChks2_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjChks2_FL_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjChks2_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjChks2_FL_1(buf, 0)

/**
 * Signal RdrObjChks2_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjChks2_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjChks2_FL_1          0

/**
 * Signal RdrObjChks2_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjChks2_FL_1            0

/**
 * Signal RdrObjChks2_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjChks2_FL_1            255

/**
 * Signal RdrObjChks2_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjChks2_FL_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjDx_FL_1 Signal RdrObjDx_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjDx_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjDx_FL_1 and \ref GET_SRR_FL_393h_RdrObjDx_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjDx_FL_1               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjDx_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjDx_FL_1             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjDx_FL_1(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjDx_FL_1(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjDx_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjDx_FL_1(buf, 0)

/**
 * Signal RdrObjDx_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjDx_FL_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjDx_FL_1             0

/**
 * Signal RdrObjDx_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjDx_FL_1               0

/**
 * Signal RdrObjDx_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjDx_FL_1               2540

/**
 * Signal RdrObjDx_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjDx_FL_1               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjTiAlv_FL_1 Signal RdrObjTiAlv_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjTiAlv_FL_1 and \ref GET_SRR_FL_393h_RdrObjTiAlv_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjTiAlv_FL_1            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjTiAlv_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjTiAlv_FL_1          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjTiAlv_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjTiAlv_FL_1(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjTiAlv_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjTiAlv_FL_1(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjTiAlv_FL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjTiAlv_FL_1          0

/**
 * Signal RdrObjTiAlv_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjTiAlv_FL_1            0

/**
 * Signal RdrObjTiAlv_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjTiAlv_FL_1            127

/**
 * Signal RdrObjTiAlv_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjTiAlv_FL_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjVy_FL_1 Signal RdrObjVy_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjVy_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjVy_FL_1 and \ref GET_SRR_FL_393h_RdrObjVy_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjVy_FL_1               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjVy_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjVy_FL_1             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjVy_FL_1(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjVy_FL_1(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjVy_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjVy_FL_1(buf, 0)

/**
 * Signal RdrObjVy_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjVy_FL_1(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjVy_FL_1             0

/**
 * Signal RdrObjVy_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjVy_FL_1               0

/**
 * Signal RdrObjVy_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjVy_FL_1               1023

/**
 * Signal RdrObjVy_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjVy_FL_1               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjVx_FL_1 Signal RdrObjVx_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjVx_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjVx_FL_1 and \ref GET_SRR_FL_393h_RdrObjVx_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjVx_FL_1               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjVx_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjVx_FL_1             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjVx_FL_1(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjVx_FL_1(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjVx_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjVx_FL_1(buf, 0)

/**
 * Signal RdrObjVx_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjVx_FL_1(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjVx_FL_1             0

/**
 * Signal RdrObjVx_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjVx_FL_1               0

/**
 * Signal RdrObjVx_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjVx_FL_1               1023

/**
 * Signal RdrObjVx_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjVx_FL_1               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjWth_FL_1 Signal RdrObjWth_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjWth_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjWth_FL_1 and \ref GET_SRR_FL_393h_RdrObjWth_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjWth_FL_1              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjWth_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjWth_FL_1            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjWth_FL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjWth_FL_1(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjWth_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjWth_FL_1(buf, 0)

/**
 * Signal RdrObjWth_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjWth_FL_1(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjWth_FL_1            0

/**
 * Signal RdrObjWth_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjWth_FL_1              0

/**
 * Signal RdrObjWth_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjWth_FL_1              50

/**
 * Signal RdrObjWth_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjWth_FL_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_393h_RdrObjHeading_FL_1 Signal RdrObjHeading_FL_1 of Message SRR_FL_393h (0x393)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_393h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_393h_RdrObjHeading_FL_1 and \ref GET_SRR_FL_393h_RdrObjHeading_FL_1 instead.
 */
#define SIG_SRR_FL_393h_RdrObjHeading_FL_1          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_393h_RdrObjHeading_FL_1 or \ref INIT_SRR_FL_393h instead.
 */
#define SETUP_SRR_FL_393h_RdrObjHeading_FL_1        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_393h_RdrObjHeading_FL_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_393h_RdrObjHeading_FL_1(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_393h_RdrObjHeading_FL_1(buf) \
	SET_SRR_FL_393h_RdrObjHeading_FL_1(buf, 0)

/**
 * Signal RdrObjHeading_FL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_393h_RdrObjHeading_FL_1(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_1 raw initial value.
 */
#define START_SRR_FL_393h_RdrObjHeading_FL_1        0

/**
 * Signal RdrObjHeading_FL_1 raw minimum value.
 */
#define MIN_SRR_FL_393h_RdrObjHeading_FL_1          0

/**
 * Signal RdrObjHeading_FL_1 raw maximum value.
 */
#define MAX_SRR_FL_393h_RdrObjHeading_FL_1          360

/**
 * Signal RdrObjHeading_FL_1 raw offset value.
 */
#define OFF_SRR_FL_393h_RdrObjHeading_FL_1          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjChks_FL_2 Signal RdrObjChks_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjChks_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjChks_FL_2 and \ref GET_SRR_FL_394h_RdrObjChks_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjChks_FL_2             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjChks_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjChks_FL_2           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjChks_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjChks_FL_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjChks_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjChks_FL_2(buf, 0)

/**
 * Signal RdrObjChks_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjChks_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjChks_FL_2           0

/**
 * Signal RdrObjChks_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjChks_FL_2             0

/**
 * Signal RdrObjChks_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjChks_FL_2             255

/**
 * Signal RdrObjChks_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjChks_FL_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjCntr_FL_2 Signal RdrObjCntr_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjCntr_FL_2 and \ref GET_SRR_FL_394h_RdrObjCntr_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjCntr_FL_2             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjCntr_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjCntr_FL_2           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjCntr_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjCntr_FL_2(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjCntr_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjCntr_FL_2(buf, 0)

/**
 * Signal RdrObjCntr_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjCntr_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjCntr_FL_2           0

/**
 * Signal RdrObjCntr_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjCntr_FL_2             0

/**
 * Signal RdrObjCntr_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjCntr_FL_2             15

/**
 * Signal RdrObjCntr_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjCntr_FL_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjAy_FL_2 Signal RdrObjAy_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjAy_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjAy_FL_2 and \ref GET_SRR_FL_394h_RdrObjAy_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjAy_FL_2               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjAy_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjAy_FL_2             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjAy_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjAy_FL_2(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjAy_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjAy_FL_2(buf, 0)

/**
 * Signal RdrObjAy_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjAy_FL_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjAy_FL_2             0

/**
 * Signal RdrObjAy_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjAy_FL_2               0

/**
 * Signal RdrObjAy_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjAy_FL_2               128

/**
 * Signal RdrObjAy_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjAy_FL_2               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjAx_FL_2 Signal RdrObjAx_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjAx_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjAx_FL_2 and \ref GET_SRR_FL_394h_RdrObjAx_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjAx_FL_2               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjAx_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjAx_FL_2             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjAx_FL_2(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjAx_FL_2(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjAx_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjAx_FL_2(buf, 0)

/**
 * Signal RdrObjAx_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjAx_FL_2(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjAx_FL_2             0

/**
 * Signal RdrObjAx_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjAx_FL_2               0

/**
 * Signal RdrObjAx_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjAx_FL_2               512

/**
 * Signal RdrObjAx_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjAx_FL_2               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjCoast_FL_2 Signal RdrObjCoast_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjCoast_FL_2 and \ref GET_SRR_FL_394h_RdrObjCoast_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjCoast_FL_2            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjCoast_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjCoast_FL_2          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjCoast_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjCoast_FL_2(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjCoast_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjCoast_FL_2(buf, 0)

/**
 * Signal RdrObjCoast_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjCoast_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjCoast_FL_2          0

/**
 * Signal RdrObjCoast_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjCoast_FL_2            0

/**
 * Signal RdrObjCoast_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjCoast_FL_2            1

/**
 * Signal RdrObjCoast_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjCoast_FL_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjConf_FL_2 Signal RdrObjConf_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjConf_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjConf_FL_2 and \ref GET_SRR_FL_394h_RdrObjConf_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjConf_FL_2             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjConf_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjConf_FL_2           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjConf_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjConf_FL_2(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjConf_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjConf_FL_2(buf, 0)

/**
 * Signal RdrObjConf_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjConf_FL_2(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjConf_FL_2           0

/**
 * Signal RdrObjConf_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjConf_FL_2             0

/**
 * Signal RdrObjConf_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjConf_FL_2             14

/**
 * Signal RdrObjConf_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjConf_FL_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjMtnPat_FL_2 Signal RdrObjMtnPat_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjMtnPat_FL_2 and \ref GET_SRR_FL_394h_RdrObjMtnPat_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjMtnPat_FL_2           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjMtnPat_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjMtnPat_FL_2         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjMtnPat_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjMtnPat_FL_2(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjMtnPat_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjMtnPat_FL_2(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjMtnPat_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjMtnPat_FL_2         0

/**
 * Signal RdrObjMtnPat_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjMtnPat_FL_2           0

/**
 * Signal RdrObjMtnPat_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjMtnPat_FL_2           3

/**
 * Signal RdrObjMtnPat_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjMtnPat_FL_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjID_FL_2 Signal RdrObjID_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjID_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjID_FL_2 and \ref GET_SRR_FL_394h_RdrObjID_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjID_FL_2               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjID_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjID_FL_2             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjID_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjID_FL_2(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjID_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjID_FL_2(buf, 0)

/**
 * Signal RdrObjID_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjID_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjID_FL_2             0

/**
 * Signal RdrObjID_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjID_FL_2               0

/**
 * Signal RdrObjID_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjID_FL_2               255

/**
 * Signal RdrObjID_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjID_FL_2               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjTyp_FL_2 Signal RdrObjTyp_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjTyp_FL_2 and \ref GET_SRR_FL_394h_RdrObjTyp_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjTyp_FL_2              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjTyp_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjTyp_FL_2            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjTyp_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjTyp_FL_2(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjTyp_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjTyp_FL_2(buf, 0)

/**
 * Signal RdrObjTyp_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjTyp_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjTyp_FL_2            0

/**
 * Signal RdrObjTyp_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjTyp_FL_2              0

/**
 * Signal RdrObjTyp_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjTyp_FL_2              3

/**
 * Signal RdrObjTyp_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjTyp_FL_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_394h_RdrObjDy_FL_2 Signal RdrObjDy_FL_2 of Message SRR_FL_394h (0x394)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_394h
 * @{
 */

/**
 * Signal RdrObjDy_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_394h_RdrObjDy_FL_2 and \ref GET_SRR_FL_394h_RdrObjDy_FL_2 instead.
 */
#define SIG_SRR_FL_394h_RdrObjDy_FL_2               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_394h_RdrObjDy_FL_2 or \ref INIT_SRR_FL_394h instead.
 */
#define SETUP_SRR_FL_394h_RdrObjDy_FL_2             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_394h_RdrObjDy_FL_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_394h_RdrObjDy_FL_2(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_394h_RdrObjDy_FL_2(buf) \
	SET_SRR_FL_394h_RdrObjDy_FL_2(buf, 0)

/**
 * Signal RdrObjDy_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_394h_RdrObjDy_FL_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_2 raw initial value.
 */
#define START_SRR_FL_394h_RdrObjDy_FL_2             0

/**
 * Signal RdrObjDy_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_394h_RdrObjDy_FL_2               0

/**
 * Signal RdrObjDy_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_394h_RdrObjDy_FL_2               2046

/**
 * Signal RdrObjDy_FL_2 raw offset value.
 */
#define OFF_SRR_FL_394h_RdrObjDy_FL_2               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjChks2_FL_2 Signal RdrObjChks2_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjChks2_FL_2 and \ref GET_SRR_FL_395h_RdrObjChks2_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjChks2_FL_2            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjChks2_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjChks2_FL_2          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjChks2_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjChks2_FL_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjChks2_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjChks2_FL_2(buf, 0)

/**
 * Signal RdrObjChks2_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjChks2_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjChks2_FL_2          0

/**
 * Signal RdrObjChks2_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjChks2_FL_2            0

/**
 * Signal RdrObjChks2_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjChks2_FL_2            255

/**
 * Signal RdrObjChks2_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjChks2_FL_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjDx_FL_2 Signal RdrObjDx_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjDx_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjDx_FL_2 and \ref GET_SRR_FL_395h_RdrObjDx_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjDx_FL_2               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjDx_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjDx_FL_2             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjDx_FL_2(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjDx_FL_2(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjDx_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjDx_FL_2(buf, 0)

/**
 * Signal RdrObjDx_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjDx_FL_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjDx_FL_2             0

/**
 * Signal RdrObjDx_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjDx_FL_2               0

/**
 * Signal RdrObjDx_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjDx_FL_2               2540

/**
 * Signal RdrObjDx_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjDx_FL_2               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjTiAlv_FL_2 Signal RdrObjTiAlv_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjTiAlv_FL_2 and \ref GET_SRR_FL_395h_RdrObjTiAlv_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjTiAlv_FL_2            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjTiAlv_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjTiAlv_FL_2          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjTiAlv_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjTiAlv_FL_2(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjTiAlv_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjTiAlv_FL_2(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjTiAlv_FL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjTiAlv_FL_2          0

/**
 * Signal RdrObjTiAlv_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjTiAlv_FL_2            0

/**
 * Signal RdrObjTiAlv_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjTiAlv_FL_2            127

/**
 * Signal RdrObjTiAlv_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjTiAlv_FL_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjVy_FL_2 Signal RdrObjVy_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjVy_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjVy_FL_2 and \ref GET_SRR_FL_395h_RdrObjVy_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjVy_FL_2               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjVy_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjVy_FL_2             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjVy_FL_2(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjVy_FL_2(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjVy_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjVy_FL_2(buf, 0)

/**
 * Signal RdrObjVy_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjVy_FL_2(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjVy_FL_2             0

/**
 * Signal RdrObjVy_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjVy_FL_2               0

/**
 * Signal RdrObjVy_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjVy_FL_2               1023

/**
 * Signal RdrObjVy_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjVy_FL_2               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjVx_FL_2 Signal RdrObjVx_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjVx_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjVx_FL_2 and \ref GET_SRR_FL_395h_RdrObjVx_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjVx_FL_2               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjVx_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjVx_FL_2             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjVx_FL_2(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjVx_FL_2(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjVx_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjVx_FL_2(buf, 0)

/**
 * Signal RdrObjVx_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjVx_FL_2(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjVx_FL_2             0

/**
 * Signal RdrObjVx_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjVx_FL_2               0

/**
 * Signal RdrObjVx_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjVx_FL_2               1023

/**
 * Signal RdrObjVx_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjVx_FL_2               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjWth_FL_2 Signal RdrObjWth_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjWth_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjWth_FL_2 and \ref GET_SRR_FL_395h_RdrObjWth_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjWth_FL_2              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjWth_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjWth_FL_2            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjWth_FL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjWth_FL_2(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjWth_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjWth_FL_2(buf, 0)

/**
 * Signal RdrObjWth_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjWth_FL_2(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjWth_FL_2            0

/**
 * Signal RdrObjWth_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjWth_FL_2              0

/**
 * Signal RdrObjWth_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjWth_FL_2              50

/**
 * Signal RdrObjWth_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjWth_FL_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_395h_RdrObjHeading_FL_2 Signal RdrObjHeading_FL_2 of Message SRR_FL_395h (0x395)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_395h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_395h_RdrObjHeading_FL_2 and \ref GET_SRR_FL_395h_RdrObjHeading_FL_2 instead.
 */
#define SIG_SRR_FL_395h_RdrObjHeading_FL_2          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_395h_RdrObjHeading_FL_2 or \ref INIT_SRR_FL_395h instead.
 */
#define SETUP_SRR_FL_395h_RdrObjHeading_FL_2        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_395h_RdrObjHeading_FL_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_395h_RdrObjHeading_FL_2(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_395h_RdrObjHeading_FL_2(buf) \
	SET_SRR_FL_395h_RdrObjHeading_FL_2(buf, 0)

/**
 * Signal RdrObjHeading_FL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_395h_RdrObjHeading_FL_2(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_2 raw initial value.
 */
#define START_SRR_FL_395h_RdrObjHeading_FL_2        0

/**
 * Signal RdrObjHeading_FL_2 raw minimum value.
 */
#define MIN_SRR_FL_395h_RdrObjHeading_FL_2          0

/**
 * Signal RdrObjHeading_FL_2 raw maximum value.
 */
#define MAX_SRR_FL_395h_RdrObjHeading_FL_2          360

/**
 * Signal RdrObjHeading_FL_2 raw offset value.
 */
#define OFF_SRR_FL_395h_RdrObjHeading_FL_2          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjChks_FL_3 Signal RdrObjChks_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjChks_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjChks_FL_3 and \ref GET_SRR_FL_396h_RdrObjChks_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjChks_FL_3             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjChks_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjChks_FL_3           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjChks_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjChks_FL_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjChks_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjChks_FL_3(buf, 0)

/**
 * Signal RdrObjChks_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjChks_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjChks_FL_3           0

/**
 * Signal RdrObjChks_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjChks_FL_3             0

/**
 * Signal RdrObjChks_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjChks_FL_3             255

/**
 * Signal RdrObjChks_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjChks_FL_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjCntr_FL_3 Signal RdrObjCntr_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjCntr_FL_3 and \ref GET_SRR_FL_396h_RdrObjCntr_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjCntr_FL_3             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjCntr_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjCntr_FL_3           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjCntr_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjCntr_FL_3(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjCntr_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjCntr_FL_3(buf, 0)

/**
 * Signal RdrObjCntr_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjCntr_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjCntr_FL_3           0

/**
 * Signal RdrObjCntr_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjCntr_FL_3             0

/**
 * Signal RdrObjCntr_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjCntr_FL_3             15

/**
 * Signal RdrObjCntr_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjCntr_FL_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjAy_FL_3 Signal RdrObjAy_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjAy_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjAy_FL_3 and \ref GET_SRR_FL_396h_RdrObjAy_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjAy_FL_3               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjAy_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjAy_FL_3             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjAy_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjAy_FL_3(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjAy_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjAy_FL_3(buf, 0)

/**
 * Signal RdrObjAy_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjAy_FL_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjAy_FL_3             0

/**
 * Signal RdrObjAy_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjAy_FL_3               0

/**
 * Signal RdrObjAy_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjAy_FL_3               128

/**
 * Signal RdrObjAy_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjAy_FL_3               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjAx_FL_3 Signal RdrObjAx_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjAx_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjAx_FL_3 and \ref GET_SRR_FL_396h_RdrObjAx_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjAx_FL_3               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjAx_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjAx_FL_3             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjAx_FL_3(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjAx_FL_3(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjAx_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjAx_FL_3(buf, 0)

/**
 * Signal RdrObjAx_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjAx_FL_3(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjAx_FL_3             0

/**
 * Signal RdrObjAx_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjAx_FL_3               0

/**
 * Signal RdrObjAx_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjAx_FL_3               512

/**
 * Signal RdrObjAx_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjAx_FL_3               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjCoast_FL_3 Signal RdrObjCoast_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjCoast_FL_3 and \ref GET_SRR_FL_396h_RdrObjCoast_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjCoast_FL_3            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjCoast_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjCoast_FL_3          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjCoast_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjCoast_FL_3(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjCoast_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjCoast_FL_3(buf, 0)

/**
 * Signal RdrObjCoast_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjCoast_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjCoast_FL_3          0

/**
 * Signal RdrObjCoast_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjCoast_FL_3            0

/**
 * Signal RdrObjCoast_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjCoast_FL_3            1

/**
 * Signal RdrObjCoast_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjCoast_FL_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjConf_FL_3 Signal RdrObjConf_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjConf_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjConf_FL_3 and \ref GET_SRR_FL_396h_RdrObjConf_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjConf_FL_3             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjConf_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjConf_FL_3           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjConf_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjConf_FL_3(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjConf_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjConf_FL_3(buf, 0)

/**
 * Signal RdrObjConf_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjConf_FL_3(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjConf_FL_3           0

/**
 * Signal RdrObjConf_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjConf_FL_3             0

/**
 * Signal RdrObjConf_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjConf_FL_3             14

/**
 * Signal RdrObjConf_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjConf_FL_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjMtnPat_FL_3 Signal RdrObjMtnPat_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjMtnPat_FL_3 and \ref GET_SRR_FL_396h_RdrObjMtnPat_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjMtnPat_FL_3           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjMtnPat_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjMtnPat_FL_3         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjMtnPat_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjMtnPat_FL_3(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjMtnPat_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjMtnPat_FL_3(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjMtnPat_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjMtnPat_FL_3         0

/**
 * Signal RdrObjMtnPat_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjMtnPat_FL_3           0

/**
 * Signal RdrObjMtnPat_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjMtnPat_FL_3           3

/**
 * Signal RdrObjMtnPat_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjMtnPat_FL_3           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjID_FL_3 Signal RdrObjID_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjID_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjID_FL_3 and \ref GET_SRR_FL_396h_RdrObjID_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjID_FL_3               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjID_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjID_FL_3             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjID_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjID_FL_3(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjID_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjID_FL_3(buf, 0)

/**
 * Signal RdrObjID_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjID_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjID_FL_3             0

/**
 * Signal RdrObjID_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjID_FL_3               0

/**
 * Signal RdrObjID_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjID_FL_3               255

/**
 * Signal RdrObjID_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjID_FL_3               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjTyp_FL_3 Signal RdrObjTyp_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjTyp_FL_3 and \ref GET_SRR_FL_396h_RdrObjTyp_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjTyp_FL_3              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjTyp_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjTyp_FL_3            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjTyp_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjTyp_FL_3(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjTyp_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjTyp_FL_3(buf, 0)

/**
 * Signal RdrObjTyp_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjTyp_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjTyp_FL_3            0

/**
 * Signal RdrObjTyp_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjTyp_FL_3              0

/**
 * Signal RdrObjTyp_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjTyp_FL_3              3

/**
 * Signal RdrObjTyp_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjTyp_FL_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_396h_RdrObjDy_FL_3 Signal RdrObjDy_FL_3 of Message SRR_FL_396h (0x396)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_396h
 * @{
 */

/**
 * Signal RdrObjDy_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_396h_RdrObjDy_FL_3 and \ref GET_SRR_FL_396h_RdrObjDy_FL_3 instead.
 */
#define SIG_SRR_FL_396h_RdrObjDy_FL_3               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_396h_RdrObjDy_FL_3 or \ref INIT_SRR_FL_396h instead.
 */
#define SETUP_SRR_FL_396h_RdrObjDy_FL_3             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_396h_RdrObjDy_FL_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_396h_RdrObjDy_FL_3(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_396h_RdrObjDy_FL_3(buf) \
	SET_SRR_FL_396h_RdrObjDy_FL_3(buf, 0)

/**
 * Signal RdrObjDy_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_396h_RdrObjDy_FL_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_3 raw initial value.
 */
#define START_SRR_FL_396h_RdrObjDy_FL_3             0

/**
 * Signal RdrObjDy_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_396h_RdrObjDy_FL_3               0

/**
 * Signal RdrObjDy_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_396h_RdrObjDy_FL_3               2046

/**
 * Signal RdrObjDy_FL_3 raw offset value.
 */
#define OFF_SRR_FL_396h_RdrObjDy_FL_3               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjChks2_FL_3 Signal RdrObjChks2_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjChks2_FL_3 and \ref GET_SRR_FL_397h_RdrObjChks2_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjChks2_FL_3            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjChks2_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjChks2_FL_3          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjChks2_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjChks2_FL_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjChks2_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjChks2_FL_3(buf, 0)

/**
 * Signal RdrObjChks2_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjChks2_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjChks2_FL_3          0

/**
 * Signal RdrObjChks2_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjChks2_FL_3            0

/**
 * Signal RdrObjChks2_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjChks2_FL_3            255

/**
 * Signal RdrObjChks2_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjChks2_FL_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjDx_FL_3 Signal RdrObjDx_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjDx_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjDx_FL_3 and \ref GET_SRR_FL_397h_RdrObjDx_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjDx_FL_3               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjDx_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjDx_FL_3             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjDx_FL_3(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjDx_FL_3(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjDx_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjDx_FL_3(buf, 0)

/**
 * Signal RdrObjDx_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjDx_FL_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjDx_FL_3             0

/**
 * Signal RdrObjDx_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjDx_FL_3               0

/**
 * Signal RdrObjDx_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjDx_FL_3               2540

/**
 * Signal RdrObjDx_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjDx_FL_3               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjTiAlv_FL_3 Signal RdrObjTiAlv_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjTiAlv_FL_3 and \ref GET_SRR_FL_397h_RdrObjTiAlv_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjTiAlv_FL_3            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjTiAlv_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjTiAlv_FL_3          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjTiAlv_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjTiAlv_FL_3(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjTiAlv_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjTiAlv_FL_3(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjTiAlv_FL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjTiAlv_FL_3          0

/**
 * Signal RdrObjTiAlv_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjTiAlv_FL_3            0

/**
 * Signal RdrObjTiAlv_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjTiAlv_FL_3            127

/**
 * Signal RdrObjTiAlv_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjTiAlv_FL_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjVy_FL_3 Signal RdrObjVy_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjVy_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjVy_FL_3 and \ref GET_SRR_FL_397h_RdrObjVy_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjVy_FL_3               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjVy_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjVy_FL_3             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjVy_FL_3(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjVy_FL_3(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjVy_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjVy_FL_3(buf, 0)

/**
 * Signal RdrObjVy_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjVy_FL_3(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjVy_FL_3             0

/**
 * Signal RdrObjVy_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjVy_FL_3               0

/**
 * Signal RdrObjVy_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjVy_FL_3               1023

/**
 * Signal RdrObjVy_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjVy_FL_3               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjVx_FL_3 Signal RdrObjVx_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjVx_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjVx_FL_3 and \ref GET_SRR_FL_397h_RdrObjVx_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjVx_FL_3               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjVx_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjVx_FL_3             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjVx_FL_3(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjVx_FL_3(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjVx_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjVx_FL_3(buf, 0)

/**
 * Signal RdrObjVx_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjVx_FL_3(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjVx_FL_3             0

/**
 * Signal RdrObjVx_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjVx_FL_3               0

/**
 * Signal RdrObjVx_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjVx_FL_3               1023

/**
 * Signal RdrObjVx_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjVx_FL_3               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjWth_FL_3 Signal RdrObjWth_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjWth_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjWth_FL_3 and \ref GET_SRR_FL_397h_RdrObjWth_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjWth_FL_3              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjWth_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjWth_FL_3            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjWth_FL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjWth_FL_3(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjWth_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjWth_FL_3(buf, 0)

/**
 * Signal RdrObjWth_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjWth_FL_3(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjWth_FL_3            0

/**
 * Signal RdrObjWth_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjWth_FL_3              0

/**
 * Signal RdrObjWth_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjWth_FL_3              50

/**
 * Signal RdrObjWth_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjWth_FL_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_397h_RdrObjHeading_FL_3 Signal RdrObjHeading_FL_3 of Message SRR_FL_397h (0x397)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_397h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_397h_RdrObjHeading_FL_3 and \ref GET_SRR_FL_397h_RdrObjHeading_FL_3 instead.
 */
#define SIG_SRR_FL_397h_RdrObjHeading_FL_3          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_397h_RdrObjHeading_FL_3 or \ref INIT_SRR_FL_397h instead.
 */
#define SETUP_SRR_FL_397h_RdrObjHeading_FL_3        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_397h_RdrObjHeading_FL_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_397h_RdrObjHeading_FL_3(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_397h_RdrObjHeading_FL_3(buf) \
	SET_SRR_FL_397h_RdrObjHeading_FL_3(buf, 0)

/**
 * Signal RdrObjHeading_FL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_397h_RdrObjHeading_FL_3(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_3 raw initial value.
 */
#define START_SRR_FL_397h_RdrObjHeading_FL_3        0

/**
 * Signal RdrObjHeading_FL_3 raw minimum value.
 */
#define MIN_SRR_FL_397h_RdrObjHeading_FL_3          0

/**
 * Signal RdrObjHeading_FL_3 raw maximum value.
 */
#define MAX_SRR_FL_397h_RdrObjHeading_FL_3          360

/**
 * Signal RdrObjHeading_FL_3 raw offset value.
 */
#define OFF_SRR_FL_397h_RdrObjHeading_FL_3          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjChks_FL_4 Signal RdrObjChks_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjChks_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjChks_FL_4 and \ref GET_SRR_FL_398h_RdrObjChks_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjChks_FL_4             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjChks_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjChks_FL_4           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjChks_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjChks_FL_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjChks_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjChks_FL_4(buf, 0)

/**
 * Signal RdrObjChks_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjChks_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjChks_FL_4           0

/**
 * Signal RdrObjChks_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjChks_FL_4             0

/**
 * Signal RdrObjChks_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjChks_FL_4             255

/**
 * Signal RdrObjChks_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjChks_FL_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjCntr_FL_4 Signal RdrObjCntr_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjCntr_FL_4 and \ref GET_SRR_FL_398h_RdrObjCntr_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjCntr_FL_4             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjCntr_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjCntr_FL_4           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjCntr_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjCntr_FL_4(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjCntr_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjCntr_FL_4(buf, 0)

/**
 * Signal RdrObjCntr_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjCntr_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjCntr_FL_4           0

/**
 * Signal RdrObjCntr_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjCntr_FL_4             0

/**
 * Signal RdrObjCntr_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjCntr_FL_4             15

/**
 * Signal RdrObjCntr_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjCntr_FL_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjAy_FL_4 Signal RdrObjAy_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjAy_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjAy_FL_4 and \ref GET_SRR_FL_398h_RdrObjAy_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjAy_FL_4               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjAy_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjAy_FL_4             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjAy_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjAy_FL_4(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjAy_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjAy_FL_4(buf, 0)

/**
 * Signal RdrObjAy_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjAy_FL_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjAy_FL_4             0

/**
 * Signal RdrObjAy_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjAy_FL_4               0

/**
 * Signal RdrObjAy_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjAy_FL_4               128

/**
 * Signal RdrObjAy_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjAy_FL_4               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjAx_FL_4 Signal RdrObjAx_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjAx_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjAx_FL_4 and \ref GET_SRR_FL_398h_RdrObjAx_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjAx_FL_4               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjAx_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjAx_FL_4             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjAx_FL_4(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjAx_FL_4(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjAx_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjAx_FL_4(buf, 0)

/**
 * Signal RdrObjAx_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjAx_FL_4(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjAx_FL_4             0

/**
 * Signal RdrObjAx_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjAx_FL_4               0

/**
 * Signal RdrObjAx_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjAx_FL_4               512

/**
 * Signal RdrObjAx_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjAx_FL_4               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjCoast_FL_4 Signal RdrObjCoast_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjCoast_FL_4 and \ref GET_SRR_FL_398h_RdrObjCoast_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjCoast_FL_4            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjCoast_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjCoast_FL_4          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjCoast_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjCoast_FL_4(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjCoast_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjCoast_FL_4(buf, 0)

/**
 * Signal RdrObjCoast_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjCoast_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjCoast_FL_4          0

/**
 * Signal RdrObjCoast_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjCoast_FL_4            0

/**
 * Signal RdrObjCoast_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjCoast_FL_4            1

/**
 * Signal RdrObjCoast_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjCoast_FL_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjConf_FL_4 Signal RdrObjConf_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjConf_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjConf_FL_4 and \ref GET_SRR_FL_398h_RdrObjConf_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjConf_FL_4             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjConf_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjConf_FL_4           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjConf_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjConf_FL_4(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjConf_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjConf_FL_4(buf, 0)

/**
 * Signal RdrObjConf_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjConf_FL_4(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjConf_FL_4           0

/**
 * Signal RdrObjConf_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjConf_FL_4             0

/**
 * Signal RdrObjConf_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjConf_FL_4             14

/**
 * Signal RdrObjConf_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjConf_FL_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjMtnPat_FL_4 Signal RdrObjMtnPat_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjMtnPat_FL_4 and \ref GET_SRR_FL_398h_RdrObjMtnPat_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjMtnPat_FL_4           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjMtnPat_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjMtnPat_FL_4         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjMtnPat_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjMtnPat_FL_4(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjMtnPat_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjMtnPat_FL_4(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjMtnPat_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjMtnPat_FL_4         0

/**
 * Signal RdrObjMtnPat_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjMtnPat_FL_4           0

/**
 * Signal RdrObjMtnPat_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjMtnPat_FL_4           3

/**
 * Signal RdrObjMtnPat_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjMtnPat_FL_4           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjID_FL_4 Signal RdrObjID_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjID_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjID_FL_4 and \ref GET_SRR_FL_398h_RdrObjID_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjID_FL_4               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjID_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjID_FL_4             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjID_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjID_FL_4(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjID_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjID_FL_4(buf, 0)

/**
 * Signal RdrObjID_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjID_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjID_FL_4             0

/**
 * Signal RdrObjID_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjID_FL_4               0

/**
 * Signal RdrObjID_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjID_FL_4               255

/**
 * Signal RdrObjID_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjID_FL_4               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjTyp_FL_4 Signal RdrObjTyp_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjTyp_FL_4 and \ref GET_SRR_FL_398h_RdrObjTyp_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjTyp_FL_4              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjTyp_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjTyp_FL_4            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjTyp_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjTyp_FL_4(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjTyp_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjTyp_FL_4(buf, 0)

/**
 * Signal RdrObjTyp_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjTyp_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjTyp_FL_4            0

/**
 * Signal RdrObjTyp_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjTyp_FL_4              0

/**
 * Signal RdrObjTyp_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjTyp_FL_4              3

/**
 * Signal RdrObjTyp_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjTyp_FL_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_398h_RdrObjDy_FL_4 Signal RdrObjDy_FL_4 of Message SRR_FL_398h (0x398)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_398h
 * @{
 */

/**
 * Signal RdrObjDy_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_398h_RdrObjDy_FL_4 and \ref GET_SRR_FL_398h_RdrObjDy_FL_4 instead.
 */
#define SIG_SRR_FL_398h_RdrObjDy_FL_4               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_398h_RdrObjDy_FL_4 or \ref INIT_SRR_FL_398h instead.
 */
#define SETUP_SRR_FL_398h_RdrObjDy_FL_4             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_398h_RdrObjDy_FL_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_398h_RdrObjDy_FL_4(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_398h_RdrObjDy_FL_4(buf) \
	SET_SRR_FL_398h_RdrObjDy_FL_4(buf, 0)

/**
 * Signal RdrObjDy_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_398h_RdrObjDy_FL_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_4 raw initial value.
 */
#define START_SRR_FL_398h_RdrObjDy_FL_4             0

/**
 * Signal RdrObjDy_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_398h_RdrObjDy_FL_4               0

/**
 * Signal RdrObjDy_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_398h_RdrObjDy_FL_4               2046

/**
 * Signal RdrObjDy_FL_4 raw offset value.
 */
#define OFF_SRR_FL_398h_RdrObjDy_FL_4               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjChks2_FL_4 Signal RdrObjChks2_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjChks2_FL_4 and \ref GET_SRR_FL_399h_RdrObjChks2_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjChks2_FL_4            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjChks2_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjChks2_FL_4          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjChks2_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjChks2_FL_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjChks2_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjChks2_FL_4(buf, 0)

/**
 * Signal RdrObjChks2_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjChks2_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjChks2_FL_4          0

/**
 * Signal RdrObjChks2_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjChks2_FL_4            0

/**
 * Signal RdrObjChks2_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjChks2_FL_4            255

/**
 * Signal RdrObjChks2_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjChks2_FL_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjDx_FL_4 Signal RdrObjDx_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjDx_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjDx_FL_4 and \ref GET_SRR_FL_399h_RdrObjDx_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjDx_FL_4               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjDx_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjDx_FL_4             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjDx_FL_4(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjDx_FL_4(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjDx_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjDx_FL_4(buf, 0)

/**
 * Signal RdrObjDx_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjDx_FL_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjDx_FL_4             0

/**
 * Signal RdrObjDx_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjDx_FL_4               0

/**
 * Signal RdrObjDx_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjDx_FL_4               2540

/**
 * Signal RdrObjDx_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjDx_FL_4               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjTiAlv_FL_4 Signal RdrObjTiAlv_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjTiAlv_FL_4 and \ref GET_SRR_FL_399h_RdrObjTiAlv_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjTiAlv_FL_4            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjTiAlv_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjTiAlv_FL_4          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjTiAlv_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjTiAlv_FL_4(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjTiAlv_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjTiAlv_FL_4(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjTiAlv_FL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjTiAlv_FL_4          0

/**
 * Signal RdrObjTiAlv_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjTiAlv_FL_4            0

/**
 * Signal RdrObjTiAlv_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjTiAlv_FL_4            127

/**
 * Signal RdrObjTiAlv_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjTiAlv_FL_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjVy_FL_4 Signal RdrObjVy_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjVy_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjVy_FL_4 and \ref GET_SRR_FL_399h_RdrObjVy_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjVy_FL_4               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjVy_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjVy_FL_4             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjVy_FL_4(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjVy_FL_4(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjVy_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjVy_FL_4(buf, 0)

/**
 * Signal RdrObjVy_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjVy_FL_4(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjVy_FL_4             0

/**
 * Signal RdrObjVy_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjVy_FL_4               0

/**
 * Signal RdrObjVy_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjVy_FL_4               1023

/**
 * Signal RdrObjVy_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjVy_FL_4               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjVx_FL_4 Signal RdrObjVx_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjVx_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjVx_FL_4 and \ref GET_SRR_FL_399h_RdrObjVx_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjVx_FL_4               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjVx_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjVx_FL_4             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjVx_FL_4(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjVx_FL_4(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjVx_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjVx_FL_4(buf, 0)

/**
 * Signal RdrObjVx_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjVx_FL_4(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjVx_FL_4             0

/**
 * Signal RdrObjVx_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjVx_FL_4               0

/**
 * Signal RdrObjVx_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjVx_FL_4               1023

/**
 * Signal RdrObjVx_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjVx_FL_4               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjWth_FL_4 Signal RdrObjWth_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjWth_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjWth_FL_4 and \ref GET_SRR_FL_399h_RdrObjWth_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjWth_FL_4              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjWth_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjWth_FL_4            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjWth_FL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjWth_FL_4(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjWth_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjWth_FL_4(buf, 0)

/**
 * Signal RdrObjWth_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjWth_FL_4(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjWth_FL_4            0

/**
 * Signal RdrObjWth_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjWth_FL_4              0

/**
 * Signal RdrObjWth_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjWth_FL_4              50

/**
 * Signal RdrObjWth_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjWth_FL_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_399h_RdrObjHeading_FL_4 Signal RdrObjHeading_FL_4 of Message SRR_FL_399h (0x399)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_399h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_399h_RdrObjHeading_FL_4 and \ref GET_SRR_FL_399h_RdrObjHeading_FL_4 instead.
 */
#define SIG_SRR_FL_399h_RdrObjHeading_FL_4          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_399h_RdrObjHeading_FL_4 or \ref INIT_SRR_FL_399h instead.
 */
#define SETUP_SRR_FL_399h_RdrObjHeading_FL_4        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_399h_RdrObjHeading_FL_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_399h_RdrObjHeading_FL_4(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_399h_RdrObjHeading_FL_4(buf) \
	SET_SRR_FL_399h_RdrObjHeading_FL_4(buf, 0)

/**
 * Signal RdrObjHeading_FL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_399h_RdrObjHeading_FL_4(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_4 raw initial value.
 */
#define START_SRR_FL_399h_RdrObjHeading_FL_4        0

/**
 * Signal RdrObjHeading_FL_4 raw minimum value.
 */
#define MIN_SRR_FL_399h_RdrObjHeading_FL_4          0

/**
 * Signal RdrObjHeading_FL_4 raw maximum value.
 */
#define MAX_SRR_FL_399h_RdrObjHeading_FL_4          360

/**
 * Signal RdrObjHeading_FL_4 raw offset value.
 */
#define OFF_SRR_FL_399h_RdrObjHeading_FL_4          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjChks_FL_5 Signal RdrObjChks_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjChks_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjChks_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjChks_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjChks_FL_5             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjChks_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjChks_FL_5           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjChks_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjChks_FL_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjChks_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjChks_FL_5(buf, 0)

/**
 * Signal RdrObjChks_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjChks_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjChks_FL_5           0

/**
 * Signal RdrObjChks_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjChks_FL_5             0

/**
 * Signal RdrObjChks_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjChks_FL_5             255

/**
 * Signal RdrObjChks_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjChks_FL_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjCntr_FL_5 Signal RdrObjCntr_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjCntr_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjCntr_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjCntr_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjCntr_FL_5             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjCntr_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjCntr_FL_5           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjCntr_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjCntr_FL_5(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjCntr_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjCntr_FL_5(buf, 0)

/**
 * Signal RdrObjCntr_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjCntr_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjCntr_FL_5           0

/**
 * Signal RdrObjCntr_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjCntr_FL_5             0

/**
 * Signal RdrObjCntr_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjCntr_FL_5             15

/**
 * Signal RdrObjCntr_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjCntr_FL_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjAy_FL_5 Signal RdrObjAy_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjAy_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjAy_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjAy_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjAy_FL_5               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjAy_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjAy_FL_5             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjAy_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjAy_FL_5(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjAy_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjAy_FL_5(buf, 0)

/**
 * Signal RdrObjAy_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjAy_FL_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjAy_FL_5             0

/**
 * Signal RdrObjAy_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjAy_FL_5               0

/**
 * Signal RdrObjAy_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjAy_FL_5               128

/**
 * Signal RdrObjAy_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjAy_FL_5               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjAx_FL_5 Signal RdrObjAx_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjAx_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjAx_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjAx_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjAx_FL_5               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjAx_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjAx_FL_5             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjAx_FL_5(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjAx_FL_5(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjAx_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjAx_FL_5(buf, 0)

/**
 * Signal RdrObjAx_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjAx_FL_5(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjAx_FL_5             0

/**
 * Signal RdrObjAx_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjAx_FL_5               0

/**
 * Signal RdrObjAx_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjAx_FL_5               512

/**
 * Signal RdrObjAx_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjAx_FL_5               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjCoast_FL_5 Signal RdrObjCoast_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjCoast_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjCoast_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjCoast_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjCoast_FL_5            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjCoast_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjCoast_FL_5          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjCoast_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjCoast_FL_5(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjCoast_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjCoast_FL_5(buf, 0)

/**
 * Signal RdrObjCoast_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjCoast_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjCoast_FL_5          0

/**
 * Signal RdrObjCoast_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjCoast_FL_5            0

/**
 * Signal RdrObjCoast_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjCoast_FL_5            1

/**
 * Signal RdrObjCoast_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjCoast_FL_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjConf_FL_5 Signal RdrObjConf_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjConf_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjConf_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjConf_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjConf_FL_5             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjConf_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjConf_FL_5           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjConf_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjConf_FL_5(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjConf_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjConf_FL_5(buf, 0)

/**
 * Signal RdrObjConf_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjConf_FL_5(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjConf_FL_5           0

/**
 * Signal RdrObjConf_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjConf_FL_5             0

/**
 * Signal RdrObjConf_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjConf_FL_5             14

/**
 * Signal RdrObjConf_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjConf_FL_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjMtnPat_FL_5 Signal RdrObjMtnPat_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjMtnPat_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjMtnPat_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjMtnPat_FL_5           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjMtnPat_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjMtnPat_FL_5         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjMtnPat_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjMtnPat_FL_5(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjMtnPat_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjMtnPat_FL_5(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjMtnPat_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjMtnPat_FL_5         0

/**
 * Signal RdrObjMtnPat_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjMtnPat_FL_5           0

/**
 * Signal RdrObjMtnPat_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjMtnPat_FL_5           3

/**
 * Signal RdrObjMtnPat_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjMtnPat_FL_5           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjID_FL_5 Signal RdrObjID_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjID_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjID_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjID_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjID_FL_5               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjID_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjID_FL_5             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjID_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjID_FL_5(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjID_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjID_FL_5(buf, 0)

/**
 * Signal RdrObjID_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjID_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjID_FL_5             0

/**
 * Signal RdrObjID_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjID_FL_5               0

/**
 * Signal RdrObjID_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjID_FL_5               255

/**
 * Signal RdrObjID_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjID_FL_5               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjTyp_FL_5 Signal RdrObjTyp_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjTyp_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjTyp_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjTyp_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjTyp_FL_5              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjTyp_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjTyp_FL_5            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjTyp_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjTyp_FL_5(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjTyp_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjTyp_FL_5(buf, 0)

/**
 * Signal RdrObjTyp_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjTyp_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjTyp_FL_5            0

/**
 * Signal RdrObjTyp_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjTyp_FL_5              0

/**
 * Signal RdrObjTyp_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjTyp_FL_5              3

/**
 * Signal RdrObjTyp_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjTyp_FL_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ah_RdrObjDy_FL_5 Signal RdrObjDy_FL_5 of Message SRR_FL_39Ah (0x39a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ah
 * @{
 */

/**
 * Signal RdrObjDy_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ah_RdrObjDy_FL_5 and \ref GET_SRR_FL_39Ah_RdrObjDy_FL_5 instead.
 */
#define SIG_SRR_FL_39Ah_RdrObjDy_FL_5               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ah_RdrObjDy_FL_5 or \ref INIT_SRR_FL_39Ah instead.
 */
#define SETUP_SRR_FL_39Ah_RdrObjDy_FL_5             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ah_RdrObjDy_FL_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ah_RdrObjDy_FL_5(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ah_RdrObjDy_FL_5(buf) \
	SET_SRR_FL_39Ah_RdrObjDy_FL_5(buf, 0)

/**
 * Signal RdrObjDy_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ah_RdrObjDy_FL_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_5 raw initial value.
 */
#define START_SRR_FL_39Ah_RdrObjDy_FL_5             0

/**
 * Signal RdrObjDy_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Ah_RdrObjDy_FL_5               0

/**
 * Signal RdrObjDy_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Ah_RdrObjDy_FL_5               2046

/**
 * Signal RdrObjDy_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Ah_RdrObjDy_FL_5               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjChks2_FL_5 Signal RdrObjChks2_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjChks2_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjChks2_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjChks2_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjChks2_FL_5            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjChks2_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjChks2_FL_5          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjChks2_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjChks2_FL_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjChks2_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjChks2_FL_5(buf, 0)

/**
 * Signal RdrObjChks2_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjChks2_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjChks2_FL_5          0

/**
 * Signal RdrObjChks2_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjChks2_FL_5            0

/**
 * Signal RdrObjChks2_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjChks2_FL_5            255

/**
 * Signal RdrObjChks2_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjChks2_FL_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjDx_FL_5 Signal RdrObjDx_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjDx_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjDx_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjDx_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjDx_FL_5               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjDx_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjDx_FL_5             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjDx_FL_5(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjDx_FL_5(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjDx_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjDx_FL_5(buf, 0)

/**
 * Signal RdrObjDx_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjDx_FL_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjDx_FL_5             0

/**
 * Signal RdrObjDx_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjDx_FL_5               0

/**
 * Signal RdrObjDx_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjDx_FL_5               2540

/**
 * Signal RdrObjDx_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjDx_FL_5               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjTiAlv_FL_5 Signal RdrObjTiAlv_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjTiAlv_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjTiAlv_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjTiAlv_FL_5            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjTiAlv_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjTiAlv_FL_5          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjTiAlv_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjTiAlv_FL_5(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjTiAlv_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjTiAlv_FL_5(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjTiAlv_FL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjTiAlv_FL_5          0

/**
 * Signal RdrObjTiAlv_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjTiAlv_FL_5            0

/**
 * Signal RdrObjTiAlv_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjTiAlv_FL_5            127

/**
 * Signal RdrObjTiAlv_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjTiAlv_FL_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjVy_FL_5 Signal RdrObjVy_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjVy_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjVy_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjVy_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjVy_FL_5               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjVy_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjVy_FL_5             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjVy_FL_5(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjVy_FL_5(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjVy_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjVy_FL_5(buf, 0)

/**
 * Signal RdrObjVy_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjVy_FL_5(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjVy_FL_5             0

/**
 * Signal RdrObjVy_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjVy_FL_5               0

/**
 * Signal RdrObjVy_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjVy_FL_5               1023

/**
 * Signal RdrObjVy_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjVy_FL_5               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjVx_FL_5 Signal RdrObjVx_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjVx_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjVx_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjVx_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjVx_FL_5               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjVx_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjVx_FL_5             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjVx_FL_5(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjVx_FL_5(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjVx_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjVx_FL_5(buf, 0)

/**
 * Signal RdrObjVx_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjVx_FL_5(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjVx_FL_5             0

/**
 * Signal RdrObjVx_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjVx_FL_5               0

/**
 * Signal RdrObjVx_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjVx_FL_5               1023

/**
 * Signal RdrObjVx_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjVx_FL_5               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjWth_FL_5 Signal RdrObjWth_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjWth_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjWth_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjWth_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjWth_FL_5              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjWth_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjWth_FL_5            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjWth_FL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjWth_FL_5(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjWth_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjWth_FL_5(buf, 0)

/**
 * Signal RdrObjWth_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjWth_FL_5(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjWth_FL_5            0

/**
 * Signal RdrObjWth_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjWth_FL_5              0

/**
 * Signal RdrObjWth_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjWth_FL_5              50

/**
 * Signal RdrObjWth_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjWth_FL_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Bh_RdrObjHeading_FL_5 Signal RdrObjHeading_FL_5 of Message SRR_FL_39Bh (0x39b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Bh
 * @{
 */

/**
 * Signal RdrObjHeading_FL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Bh_RdrObjHeading_FL_5 and \ref GET_SRR_FL_39Bh_RdrObjHeading_FL_5 instead.
 */
#define SIG_SRR_FL_39Bh_RdrObjHeading_FL_5          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Bh_RdrObjHeading_FL_5 or \ref INIT_SRR_FL_39Bh instead.
 */
#define SETUP_SRR_FL_39Bh_RdrObjHeading_FL_5        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Bh_RdrObjHeading_FL_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Bh_RdrObjHeading_FL_5(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Bh_RdrObjHeading_FL_5(buf) \
	SET_SRR_FL_39Bh_RdrObjHeading_FL_5(buf, 0)

/**
 * Signal RdrObjHeading_FL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Bh_RdrObjHeading_FL_5(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_5 raw initial value.
 */
#define START_SRR_FL_39Bh_RdrObjHeading_FL_5        0

/**
 * Signal RdrObjHeading_FL_5 raw minimum value.
 */
#define MIN_SRR_FL_39Bh_RdrObjHeading_FL_5          0

/**
 * Signal RdrObjHeading_FL_5 raw maximum value.
 */
#define MAX_SRR_FL_39Bh_RdrObjHeading_FL_5          360

/**
 * Signal RdrObjHeading_FL_5 raw offset value.
 */
#define OFF_SRR_FL_39Bh_RdrObjHeading_FL_5          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjChks_FL_6 Signal RdrObjChks_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjChks_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjChks_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjChks_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjChks_FL_6             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjChks_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjChks_FL_6           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjChks_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjChks_FL_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjChks_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjChks_FL_6(buf, 0)

/**
 * Signal RdrObjChks_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjChks_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjChks_FL_6           0

/**
 * Signal RdrObjChks_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjChks_FL_6             0

/**
 * Signal RdrObjChks_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjChks_FL_6             255

/**
 * Signal RdrObjChks_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjChks_FL_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjCntr_FL_6 Signal RdrObjCntr_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjCntr_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjCntr_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjCntr_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjCntr_FL_6             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjCntr_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjCntr_FL_6           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjCntr_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjCntr_FL_6(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjCntr_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjCntr_FL_6(buf, 0)

/**
 * Signal RdrObjCntr_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjCntr_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjCntr_FL_6           0

/**
 * Signal RdrObjCntr_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjCntr_FL_6             0

/**
 * Signal RdrObjCntr_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjCntr_FL_6             15

/**
 * Signal RdrObjCntr_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjCntr_FL_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjAy_FL_6 Signal RdrObjAy_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjAy_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjAy_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjAy_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjAy_FL_6               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjAy_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjAy_FL_6             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjAy_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjAy_FL_6(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjAy_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjAy_FL_6(buf, 0)

/**
 * Signal RdrObjAy_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjAy_FL_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjAy_FL_6             0

/**
 * Signal RdrObjAy_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjAy_FL_6               0

/**
 * Signal RdrObjAy_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjAy_FL_6               128

/**
 * Signal RdrObjAy_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjAy_FL_6               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjAx_FL_6 Signal RdrObjAx_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjAx_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjAx_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjAx_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjAx_FL_6               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjAx_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjAx_FL_6             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjAx_FL_6(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjAx_FL_6(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjAx_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjAx_FL_6(buf, 0)

/**
 * Signal RdrObjAx_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjAx_FL_6(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjAx_FL_6             0

/**
 * Signal RdrObjAx_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjAx_FL_6               0

/**
 * Signal RdrObjAx_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjAx_FL_6               512

/**
 * Signal RdrObjAx_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjAx_FL_6               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjCoast_FL_6 Signal RdrObjCoast_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjCoast_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjCoast_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjCoast_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjCoast_FL_6            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjCoast_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjCoast_FL_6          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjCoast_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjCoast_FL_6(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjCoast_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjCoast_FL_6(buf, 0)

/**
 * Signal RdrObjCoast_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjCoast_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjCoast_FL_6          0

/**
 * Signal RdrObjCoast_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjCoast_FL_6            0

/**
 * Signal RdrObjCoast_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjCoast_FL_6            1

/**
 * Signal RdrObjCoast_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjCoast_FL_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjConf_FL_6 Signal RdrObjConf_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjConf_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjConf_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjConf_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjConf_FL_6             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjConf_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjConf_FL_6           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjConf_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjConf_FL_6(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjConf_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjConf_FL_6(buf, 0)

/**
 * Signal RdrObjConf_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjConf_FL_6(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjConf_FL_6           0

/**
 * Signal RdrObjConf_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjConf_FL_6             0

/**
 * Signal RdrObjConf_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjConf_FL_6             14

/**
 * Signal RdrObjConf_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjConf_FL_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjMtnPat_FL_6 Signal RdrObjMtnPat_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjMtnPat_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjMtnPat_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjMtnPat_FL_6           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjMtnPat_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjMtnPat_FL_6         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjMtnPat_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjMtnPat_FL_6(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjMtnPat_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjMtnPat_FL_6(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjMtnPat_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjMtnPat_FL_6         0

/**
 * Signal RdrObjMtnPat_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjMtnPat_FL_6           0

/**
 * Signal RdrObjMtnPat_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjMtnPat_FL_6           3

/**
 * Signal RdrObjMtnPat_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjMtnPat_FL_6           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjID_FL_6 Signal RdrObjID_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjID_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjID_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjID_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjID_FL_6               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjID_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjID_FL_6             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjID_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjID_FL_6(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjID_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjID_FL_6(buf, 0)

/**
 * Signal RdrObjID_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjID_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjID_FL_6             0

/**
 * Signal RdrObjID_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjID_FL_6               0

/**
 * Signal RdrObjID_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjID_FL_6               255

/**
 * Signal RdrObjID_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjID_FL_6               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjTyp_FL_6 Signal RdrObjTyp_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjTyp_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjTyp_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjTyp_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjTyp_FL_6              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjTyp_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjTyp_FL_6            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjTyp_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjTyp_FL_6(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjTyp_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjTyp_FL_6(buf, 0)

/**
 * Signal RdrObjTyp_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjTyp_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjTyp_FL_6            0

/**
 * Signal RdrObjTyp_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjTyp_FL_6              0

/**
 * Signal RdrObjTyp_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjTyp_FL_6              3

/**
 * Signal RdrObjTyp_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjTyp_FL_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Ch_RdrObjDy_FL_6 Signal RdrObjDy_FL_6 of Message SRR_FL_39Ch (0x39c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Ch
 * @{
 */

/**
 * Signal RdrObjDy_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Ch_RdrObjDy_FL_6 and \ref GET_SRR_FL_39Ch_RdrObjDy_FL_6 instead.
 */
#define SIG_SRR_FL_39Ch_RdrObjDy_FL_6               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Ch_RdrObjDy_FL_6 or \ref INIT_SRR_FL_39Ch instead.
 */
#define SETUP_SRR_FL_39Ch_RdrObjDy_FL_6             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Ch_RdrObjDy_FL_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Ch_RdrObjDy_FL_6(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Ch_RdrObjDy_FL_6(buf) \
	SET_SRR_FL_39Ch_RdrObjDy_FL_6(buf, 0)

/**
 * Signal RdrObjDy_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Ch_RdrObjDy_FL_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_6 raw initial value.
 */
#define START_SRR_FL_39Ch_RdrObjDy_FL_6             0

/**
 * Signal RdrObjDy_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Ch_RdrObjDy_FL_6               0

/**
 * Signal RdrObjDy_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Ch_RdrObjDy_FL_6               2046

/**
 * Signal RdrObjDy_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Ch_RdrObjDy_FL_6               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjChks2_FL_6 Signal RdrObjChks2_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjChks2_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjChks2_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjChks2_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjChks2_FL_6            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjChks2_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjChks2_FL_6          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjChks2_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjChks2_FL_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjChks2_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjChks2_FL_6(buf, 0)

/**
 * Signal RdrObjChks2_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjChks2_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjChks2_FL_6          0

/**
 * Signal RdrObjChks2_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjChks2_FL_6            0

/**
 * Signal RdrObjChks2_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjChks2_FL_6            255

/**
 * Signal RdrObjChks2_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjChks2_FL_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjDx_FL_6 Signal RdrObjDx_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjDx_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjDx_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjDx_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjDx_FL_6               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjDx_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjDx_FL_6             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjDx_FL_6(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjDx_FL_6(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjDx_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjDx_FL_6(buf, 0)

/**
 * Signal RdrObjDx_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjDx_FL_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjDx_FL_6             0

/**
 * Signal RdrObjDx_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjDx_FL_6               0

/**
 * Signal RdrObjDx_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjDx_FL_6               2540

/**
 * Signal RdrObjDx_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjDx_FL_6               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjTiAlv_FL_6 Signal RdrObjTiAlv_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjTiAlv_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjTiAlv_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjTiAlv_FL_6            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjTiAlv_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjTiAlv_FL_6          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjTiAlv_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjTiAlv_FL_6(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjTiAlv_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjTiAlv_FL_6(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjTiAlv_FL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjTiAlv_FL_6          0

/**
 * Signal RdrObjTiAlv_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjTiAlv_FL_6            0

/**
 * Signal RdrObjTiAlv_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjTiAlv_FL_6            127

/**
 * Signal RdrObjTiAlv_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjTiAlv_FL_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjVy_FL_6 Signal RdrObjVy_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjVy_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjVy_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjVy_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjVy_FL_6               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjVy_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjVy_FL_6             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjVy_FL_6(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjVy_FL_6(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjVy_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjVy_FL_6(buf, 0)

/**
 * Signal RdrObjVy_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjVy_FL_6(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjVy_FL_6             0

/**
 * Signal RdrObjVy_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjVy_FL_6               0

/**
 * Signal RdrObjVy_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjVy_FL_6               1023

/**
 * Signal RdrObjVy_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjVy_FL_6               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjVx_FL_6 Signal RdrObjVx_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjVx_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjVx_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjVx_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjVx_FL_6               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjVx_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjVx_FL_6             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjVx_FL_6(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjVx_FL_6(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjVx_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjVx_FL_6(buf, 0)

/**
 * Signal RdrObjVx_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjVx_FL_6(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjVx_FL_6             0

/**
 * Signal RdrObjVx_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjVx_FL_6               0

/**
 * Signal RdrObjVx_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjVx_FL_6               1023

/**
 * Signal RdrObjVx_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjVx_FL_6               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjWth_FL_6 Signal RdrObjWth_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjWth_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjWth_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjWth_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjWth_FL_6              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjWth_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjWth_FL_6            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjWth_FL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjWth_FL_6(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjWth_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjWth_FL_6(buf, 0)

/**
 * Signal RdrObjWth_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjWth_FL_6(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjWth_FL_6            0

/**
 * Signal RdrObjWth_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjWth_FL_6              0

/**
 * Signal RdrObjWth_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjWth_FL_6              50

/**
 * Signal RdrObjWth_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjWth_FL_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Dh_RdrObjHeading_FL_6 Signal RdrObjHeading_FL_6 of Message SRR_FL_39Dh (0x39d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Dh
 * @{
 */

/**
 * Signal RdrObjHeading_FL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Dh_RdrObjHeading_FL_6 and \ref GET_SRR_FL_39Dh_RdrObjHeading_FL_6 instead.
 */
#define SIG_SRR_FL_39Dh_RdrObjHeading_FL_6          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Dh_RdrObjHeading_FL_6 or \ref INIT_SRR_FL_39Dh instead.
 */
#define SETUP_SRR_FL_39Dh_RdrObjHeading_FL_6        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Dh_RdrObjHeading_FL_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Dh_RdrObjHeading_FL_6(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Dh_RdrObjHeading_FL_6(buf) \
	SET_SRR_FL_39Dh_RdrObjHeading_FL_6(buf, 0)

/**
 * Signal RdrObjHeading_FL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Dh_RdrObjHeading_FL_6(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_6 raw initial value.
 */
#define START_SRR_FL_39Dh_RdrObjHeading_FL_6        0

/**
 * Signal RdrObjHeading_FL_6 raw minimum value.
 */
#define MIN_SRR_FL_39Dh_RdrObjHeading_FL_6          0

/**
 * Signal RdrObjHeading_FL_6 raw maximum value.
 */
#define MAX_SRR_FL_39Dh_RdrObjHeading_FL_6          360

/**
 * Signal RdrObjHeading_FL_6 raw offset value.
 */
#define OFF_SRR_FL_39Dh_RdrObjHeading_FL_6          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjChks_FL_7 Signal RdrObjChks_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjChks_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjChks_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjChks_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjChks_FL_7             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjChks_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjChks_FL_7           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjChks_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjChks_FL_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjChks_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjChks_FL_7(buf, 0)

/**
 * Signal RdrObjChks_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjChks_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjChks_FL_7           0

/**
 * Signal RdrObjChks_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjChks_FL_7             0

/**
 * Signal RdrObjChks_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjChks_FL_7             255

/**
 * Signal RdrObjChks_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjChks_FL_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjCntr_FL_7 Signal RdrObjCntr_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjCntr_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjCntr_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjCntr_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjCntr_FL_7             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjCntr_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjCntr_FL_7           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjCntr_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjCntr_FL_7(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjCntr_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjCntr_FL_7(buf, 0)

/**
 * Signal RdrObjCntr_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjCntr_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjCntr_FL_7           0

/**
 * Signal RdrObjCntr_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjCntr_FL_7             0

/**
 * Signal RdrObjCntr_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjCntr_FL_7             15

/**
 * Signal RdrObjCntr_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjCntr_FL_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjAy_FL_7 Signal RdrObjAy_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjAy_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjAy_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjAy_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjAy_FL_7               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjAy_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjAy_FL_7             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjAy_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjAy_FL_7(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjAy_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjAy_FL_7(buf, 0)

/**
 * Signal RdrObjAy_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjAy_FL_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjAy_FL_7             0

/**
 * Signal RdrObjAy_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjAy_FL_7               0

/**
 * Signal RdrObjAy_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjAy_FL_7               128

/**
 * Signal RdrObjAy_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjAy_FL_7               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjAx_FL_7 Signal RdrObjAx_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjAx_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjAx_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjAx_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjAx_FL_7               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjAx_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjAx_FL_7             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjAx_FL_7(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjAx_FL_7(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjAx_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjAx_FL_7(buf, 0)

/**
 * Signal RdrObjAx_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjAx_FL_7(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjAx_FL_7             0

/**
 * Signal RdrObjAx_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjAx_FL_7               0

/**
 * Signal RdrObjAx_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjAx_FL_7               512

/**
 * Signal RdrObjAx_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjAx_FL_7               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjCoast_FL_7 Signal RdrObjCoast_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjCoast_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjCoast_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjCoast_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjCoast_FL_7            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjCoast_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjCoast_FL_7          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjCoast_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjCoast_FL_7(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjCoast_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjCoast_FL_7(buf, 0)

/**
 * Signal RdrObjCoast_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjCoast_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjCoast_FL_7          0

/**
 * Signal RdrObjCoast_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjCoast_FL_7            0

/**
 * Signal RdrObjCoast_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjCoast_FL_7            1

/**
 * Signal RdrObjCoast_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjCoast_FL_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjConf_FL_7 Signal RdrObjConf_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjConf_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjConf_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjConf_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjConf_FL_7             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjConf_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjConf_FL_7           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjConf_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjConf_FL_7(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjConf_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjConf_FL_7(buf, 0)

/**
 * Signal RdrObjConf_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjConf_FL_7(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjConf_FL_7           0

/**
 * Signal RdrObjConf_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjConf_FL_7             0

/**
 * Signal RdrObjConf_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjConf_FL_7             14

/**
 * Signal RdrObjConf_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjConf_FL_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjMtnPat_FL_7 Signal RdrObjMtnPat_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjMtnPat_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjMtnPat_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjMtnPat_FL_7           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjMtnPat_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjMtnPat_FL_7         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjMtnPat_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjMtnPat_FL_7(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjMtnPat_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjMtnPat_FL_7(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjMtnPat_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjMtnPat_FL_7         0

/**
 * Signal RdrObjMtnPat_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjMtnPat_FL_7           0

/**
 * Signal RdrObjMtnPat_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjMtnPat_FL_7           3

/**
 * Signal RdrObjMtnPat_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjMtnPat_FL_7           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjID_FL_7 Signal RdrObjID_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjID_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjID_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjID_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjID_FL_7               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjID_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjID_FL_7             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjID_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjID_FL_7(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjID_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjID_FL_7(buf, 0)

/**
 * Signal RdrObjID_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjID_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjID_FL_7             0

/**
 * Signal RdrObjID_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjID_FL_7               0

/**
 * Signal RdrObjID_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjID_FL_7               255

/**
 * Signal RdrObjID_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjID_FL_7               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjTyp_FL_7 Signal RdrObjTyp_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjTyp_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjTyp_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjTyp_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjTyp_FL_7              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjTyp_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjTyp_FL_7            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjTyp_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjTyp_FL_7(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjTyp_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjTyp_FL_7(buf, 0)

/**
 * Signal RdrObjTyp_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjTyp_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjTyp_FL_7            0

/**
 * Signal RdrObjTyp_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjTyp_FL_7              0

/**
 * Signal RdrObjTyp_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjTyp_FL_7              3

/**
 * Signal RdrObjTyp_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjTyp_FL_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Eh_RdrObjDy_FL_7 Signal RdrObjDy_FL_7 of Message SRR_FL_39Eh (0x39e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Eh
 * @{
 */

/**
 * Signal RdrObjDy_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Eh_RdrObjDy_FL_7 and \ref GET_SRR_FL_39Eh_RdrObjDy_FL_7 instead.
 */
#define SIG_SRR_FL_39Eh_RdrObjDy_FL_7               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Eh_RdrObjDy_FL_7 or \ref INIT_SRR_FL_39Eh instead.
 */
#define SETUP_SRR_FL_39Eh_RdrObjDy_FL_7             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Eh_RdrObjDy_FL_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Eh_RdrObjDy_FL_7(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Eh_RdrObjDy_FL_7(buf) \
	SET_SRR_FL_39Eh_RdrObjDy_FL_7(buf, 0)

/**
 * Signal RdrObjDy_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Eh_RdrObjDy_FL_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_7 raw initial value.
 */
#define START_SRR_FL_39Eh_RdrObjDy_FL_7             0

/**
 * Signal RdrObjDy_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Eh_RdrObjDy_FL_7               0

/**
 * Signal RdrObjDy_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Eh_RdrObjDy_FL_7               2046

/**
 * Signal RdrObjDy_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Eh_RdrObjDy_FL_7               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjChks2_FL_7 Signal RdrObjChks2_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjChks2_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjChks2_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjChks2_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjChks2_FL_7            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjChks2_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjChks2_FL_7          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjChks2_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjChks2_FL_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjChks2_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjChks2_FL_7(buf, 0)

/**
 * Signal RdrObjChks2_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjChks2_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjChks2_FL_7          0

/**
 * Signal RdrObjChks2_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjChks2_FL_7            0

/**
 * Signal RdrObjChks2_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjChks2_FL_7            255

/**
 * Signal RdrObjChks2_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjChks2_FL_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjDx_FL_7 Signal RdrObjDx_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjDx_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjDx_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjDx_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjDx_FL_7               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjDx_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjDx_FL_7             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjDx_FL_7(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjDx_FL_7(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjDx_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjDx_FL_7(buf, 0)

/**
 * Signal RdrObjDx_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjDx_FL_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjDx_FL_7             0

/**
 * Signal RdrObjDx_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjDx_FL_7               0

/**
 * Signal RdrObjDx_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjDx_FL_7               2540

/**
 * Signal RdrObjDx_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjDx_FL_7               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjTiAlv_FL_7 Signal RdrObjTiAlv_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjTiAlv_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjTiAlv_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjTiAlv_FL_7            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjTiAlv_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjTiAlv_FL_7          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjTiAlv_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjTiAlv_FL_7(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjTiAlv_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjTiAlv_FL_7(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjTiAlv_FL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjTiAlv_FL_7          0

/**
 * Signal RdrObjTiAlv_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjTiAlv_FL_7            0

/**
 * Signal RdrObjTiAlv_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjTiAlv_FL_7            127

/**
 * Signal RdrObjTiAlv_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjTiAlv_FL_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjVy_FL_7 Signal RdrObjVy_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjVy_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjVy_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjVy_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjVy_FL_7               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjVy_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjVy_FL_7             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjVy_FL_7(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjVy_FL_7(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjVy_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjVy_FL_7(buf, 0)

/**
 * Signal RdrObjVy_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjVy_FL_7(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjVy_FL_7             0

/**
 * Signal RdrObjVy_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjVy_FL_7               0

/**
 * Signal RdrObjVy_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjVy_FL_7               1023

/**
 * Signal RdrObjVy_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjVy_FL_7               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjVx_FL_7 Signal RdrObjVx_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjVx_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjVx_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjVx_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjVx_FL_7               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjVx_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjVx_FL_7             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjVx_FL_7(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjVx_FL_7(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjVx_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjVx_FL_7(buf, 0)

/**
 * Signal RdrObjVx_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjVx_FL_7(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjVx_FL_7             0

/**
 * Signal RdrObjVx_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjVx_FL_7               0

/**
 * Signal RdrObjVx_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjVx_FL_7               1023

/**
 * Signal RdrObjVx_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjVx_FL_7               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjWth_FL_7 Signal RdrObjWth_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjWth_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjWth_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjWth_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjWth_FL_7              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjWth_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjWth_FL_7            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjWth_FL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjWth_FL_7(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjWth_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjWth_FL_7(buf, 0)

/**
 * Signal RdrObjWth_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjWth_FL_7(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjWth_FL_7            0

/**
 * Signal RdrObjWth_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjWth_FL_7              0

/**
 * Signal RdrObjWth_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjWth_FL_7              50

/**
 * Signal RdrObjWth_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjWth_FL_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_39Fh_RdrObjHeading_FL_7 Signal RdrObjHeading_FL_7 of Message SRR_FL_39Fh (0x39f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_39Fh
 * @{
 */

/**
 * Signal RdrObjHeading_FL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_39Fh_RdrObjHeading_FL_7 and \ref GET_SRR_FL_39Fh_RdrObjHeading_FL_7 instead.
 */
#define SIG_SRR_FL_39Fh_RdrObjHeading_FL_7          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_39Fh_RdrObjHeading_FL_7 or \ref INIT_SRR_FL_39Fh instead.
 */
#define SETUP_SRR_FL_39Fh_RdrObjHeading_FL_7        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_39Fh_RdrObjHeading_FL_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_39Fh_RdrObjHeading_FL_7(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_39Fh_RdrObjHeading_FL_7(buf) \
	SET_SRR_FL_39Fh_RdrObjHeading_FL_7(buf, 0)

/**
 * Signal RdrObjHeading_FL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_39Fh_RdrObjHeading_FL_7(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_7 raw initial value.
 */
#define START_SRR_FL_39Fh_RdrObjHeading_FL_7        0

/**
 * Signal RdrObjHeading_FL_7 raw minimum value.
 */
#define MIN_SRR_FL_39Fh_RdrObjHeading_FL_7          0

/**
 * Signal RdrObjHeading_FL_7 raw maximum value.
 */
#define MAX_SRR_FL_39Fh_RdrObjHeading_FL_7          360

/**
 * Signal RdrObjHeading_FL_7 raw offset value.
 */
#define OFF_SRR_FL_39Fh_RdrObjHeading_FL_7          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjChks_FL_8 Signal RdrObjChks_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjChks_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjChks_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjChks_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjChks_FL_8             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjChks_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjChks_FL_8           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjChks_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjChks_FL_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjChks_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjChks_FL_8(buf, 0)

/**
 * Signal RdrObjChks_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjChks_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjChks_FL_8           0

/**
 * Signal RdrObjChks_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjChks_FL_8             0

/**
 * Signal RdrObjChks_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjChks_FL_8             255

/**
 * Signal RdrObjChks_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjChks_FL_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjCntr_FL_8 Signal RdrObjCntr_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjCntr_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjCntr_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjCntr_FL_8             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjCntr_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjCntr_FL_8           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjCntr_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjCntr_FL_8(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjCntr_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjCntr_FL_8(buf, 0)

/**
 * Signal RdrObjCntr_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjCntr_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjCntr_FL_8           0

/**
 * Signal RdrObjCntr_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjCntr_FL_8             0

/**
 * Signal RdrObjCntr_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjCntr_FL_8             15

/**
 * Signal RdrObjCntr_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjCntr_FL_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjAy_FL_8 Signal RdrObjAy_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjAy_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjAy_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjAy_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjAy_FL_8               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjAy_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjAy_FL_8             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjAy_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjAy_FL_8(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjAy_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjAy_FL_8(buf, 0)

/**
 * Signal RdrObjAy_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjAy_FL_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjAy_FL_8             0

/**
 * Signal RdrObjAy_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjAy_FL_8               0

/**
 * Signal RdrObjAy_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjAy_FL_8               128

/**
 * Signal RdrObjAy_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjAy_FL_8               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjAx_FL_8 Signal RdrObjAx_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjAx_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjAx_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjAx_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjAx_FL_8               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjAx_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjAx_FL_8             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjAx_FL_8(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjAx_FL_8(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjAx_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjAx_FL_8(buf, 0)

/**
 * Signal RdrObjAx_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjAx_FL_8(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjAx_FL_8             0

/**
 * Signal RdrObjAx_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjAx_FL_8               0

/**
 * Signal RdrObjAx_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjAx_FL_8               512

/**
 * Signal RdrObjAx_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjAx_FL_8               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjCoast_FL_8 Signal RdrObjCoast_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjCoast_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjCoast_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjCoast_FL_8            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjCoast_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjCoast_FL_8          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjCoast_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjCoast_FL_8(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjCoast_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjCoast_FL_8(buf, 0)

/**
 * Signal RdrObjCoast_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjCoast_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjCoast_FL_8          0

/**
 * Signal RdrObjCoast_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjCoast_FL_8            0

/**
 * Signal RdrObjCoast_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjCoast_FL_8            1

/**
 * Signal RdrObjCoast_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjCoast_FL_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjConf_FL_8 Signal RdrObjConf_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjConf_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjConf_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjConf_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjConf_FL_8             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjConf_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjConf_FL_8           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjConf_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjConf_FL_8(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjConf_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjConf_FL_8(buf, 0)

/**
 * Signal RdrObjConf_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjConf_FL_8(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjConf_FL_8           0

/**
 * Signal RdrObjConf_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjConf_FL_8             0

/**
 * Signal RdrObjConf_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjConf_FL_8             14

/**
 * Signal RdrObjConf_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjConf_FL_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjMtnPat_FL_8 Signal RdrObjMtnPat_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjMtnPat_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjMtnPat_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjMtnPat_FL_8           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjMtnPat_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjMtnPat_FL_8         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjMtnPat_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjMtnPat_FL_8(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjMtnPat_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjMtnPat_FL_8(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjMtnPat_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjMtnPat_FL_8         0

/**
 * Signal RdrObjMtnPat_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjMtnPat_FL_8           0

/**
 * Signal RdrObjMtnPat_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjMtnPat_FL_8           3

/**
 * Signal RdrObjMtnPat_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjMtnPat_FL_8           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjID_FL_8 Signal RdrObjID_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjID_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjID_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjID_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjID_FL_8               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjID_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjID_FL_8             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjID_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjID_FL_8(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjID_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjID_FL_8(buf, 0)

/**
 * Signal RdrObjID_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjID_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjID_FL_8             0

/**
 * Signal RdrObjID_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjID_FL_8               0

/**
 * Signal RdrObjID_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjID_FL_8               255

/**
 * Signal RdrObjID_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjID_FL_8               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjTyp_FL_8 Signal RdrObjTyp_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjTyp_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjTyp_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjTyp_FL_8              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjTyp_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjTyp_FL_8            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjTyp_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjTyp_FL_8(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjTyp_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjTyp_FL_8(buf, 0)

/**
 * Signal RdrObjTyp_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjTyp_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjTyp_FL_8            0

/**
 * Signal RdrObjTyp_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjTyp_FL_8              0

/**
 * Signal RdrObjTyp_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjTyp_FL_8              3

/**
 * Signal RdrObjTyp_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjTyp_FL_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A0h_RdrObjDy_FL_8 Signal RdrObjDy_FL_8 of Message SRR_FL_3A0h (0x3a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A0h
 * @{
 */

/**
 * Signal RdrObjDy_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A0h_RdrObjDy_FL_8 and \ref GET_SRR_FL_3A0h_RdrObjDy_FL_8 instead.
 */
#define SIG_SRR_FL_3A0h_RdrObjDy_FL_8               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A0h_RdrObjDy_FL_8 or \ref INIT_SRR_FL_3A0h instead.
 */
#define SETUP_SRR_FL_3A0h_RdrObjDy_FL_8             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A0h_RdrObjDy_FL_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A0h_RdrObjDy_FL_8(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A0h_RdrObjDy_FL_8(buf) \
	SET_SRR_FL_3A0h_RdrObjDy_FL_8(buf, 0)

/**
 * Signal RdrObjDy_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A0h_RdrObjDy_FL_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_8 raw initial value.
 */
#define START_SRR_FL_3A0h_RdrObjDy_FL_8             0

/**
 * Signal RdrObjDy_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A0h_RdrObjDy_FL_8               0

/**
 * Signal RdrObjDy_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A0h_RdrObjDy_FL_8               2046

/**
 * Signal RdrObjDy_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A0h_RdrObjDy_FL_8               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjChks2_FL_8 Signal RdrObjChks2_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjChks2_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjChks2_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjChks2_FL_8            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjChks2_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjChks2_FL_8          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjChks2_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjChks2_FL_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjChks2_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjChks2_FL_8(buf, 0)

/**
 * Signal RdrObjChks2_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjChks2_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjChks2_FL_8          0

/**
 * Signal RdrObjChks2_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjChks2_FL_8            0

/**
 * Signal RdrObjChks2_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjChks2_FL_8            255

/**
 * Signal RdrObjChks2_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjChks2_FL_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjDx_FL_8 Signal RdrObjDx_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjDx_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjDx_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjDx_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjDx_FL_8               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjDx_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjDx_FL_8             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjDx_FL_8(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjDx_FL_8(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjDx_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjDx_FL_8(buf, 0)

/**
 * Signal RdrObjDx_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjDx_FL_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjDx_FL_8             0

/**
 * Signal RdrObjDx_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjDx_FL_8               0

/**
 * Signal RdrObjDx_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjDx_FL_8               2540

/**
 * Signal RdrObjDx_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjDx_FL_8               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjTiAlv_FL_8 Signal RdrObjTiAlv_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjTiAlv_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjTiAlv_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjTiAlv_FL_8            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjTiAlv_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjTiAlv_FL_8          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjTiAlv_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjTiAlv_FL_8(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjTiAlv_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjTiAlv_FL_8(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjTiAlv_FL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjTiAlv_FL_8          0

/**
 * Signal RdrObjTiAlv_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjTiAlv_FL_8            0

/**
 * Signal RdrObjTiAlv_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjTiAlv_FL_8            127

/**
 * Signal RdrObjTiAlv_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjTiAlv_FL_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjVy_FL_8 Signal RdrObjVy_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjVy_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjVy_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjVy_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjVy_FL_8               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjVy_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjVy_FL_8             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjVy_FL_8(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjVy_FL_8(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjVy_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjVy_FL_8(buf, 0)

/**
 * Signal RdrObjVy_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjVy_FL_8(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjVy_FL_8             0

/**
 * Signal RdrObjVy_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjVy_FL_8               0

/**
 * Signal RdrObjVy_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjVy_FL_8               1023

/**
 * Signal RdrObjVy_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjVy_FL_8               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjVx_FL_8 Signal RdrObjVx_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjVx_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjVx_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjVx_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjVx_FL_8               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjVx_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjVx_FL_8             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjVx_FL_8(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjVx_FL_8(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjVx_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjVx_FL_8(buf, 0)

/**
 * Signal RdrObjVx_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjVx_FL_8(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjVx_FL_8             0

/**
 * Signal RdrObjVx_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjVx_FL_8               0

/**
 * Signal RdrObjVx_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjVx_FL_8               1023

/**
 * Signal RdrObjVx_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjVx_FL_8               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjWth_FL_8 Signal RdrObjWth_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjWth_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjWth_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjWth_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjWth_FL_8              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjWth_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjWth_FL_8            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjWth_FL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjWth_FL_8(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjWth_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjWth_FL_8(buf, 0)

/**
 * Signal RdrObjWth_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjWth_FL_8(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjWth_FL_8            0

/**
 * Signal RdrObjWth_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjWth_FL_8              0

/**
 * Signal RdrObjWth_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjWth_FL_8              50

/**
 * Signal RdrObjWth_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjWth_FL_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A1h_RdrObjHeading_FL_8 Signal RdrObjHeading_FL_8 of Message SRR_FL_3A1h (0x3a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A1h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A1h_RdrObjHeading_FL_8 and \ref GET_SRR_FL_3A1h_RdrObjHeading_FL_8 instead.
 */
#define SIG_SRR_FL_3A1h_RdrObjHeading_FL_8          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A1h_RdrObjHeading_FL_8 or \ref INIT_SRR_FL_3A1h instead.
 */
#define SETUP_SRR_FL_3A1h_RdrObjHeading_FL_8        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A1h_RdrObjHeading_FL_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A1h_RdrObjHeading_FL_8(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A1h_RdrObjHeading_FL_8(buf) \
	SET_SRR_FL_3A1h_RdrObjHeading_FL_8(buf, 0)

/**
 * Signal RdrObjHeading_FL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A1h_RdrObjHeading_FL_8(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_8 raw initial value.
 */
#define START_SRR_FL_3A1h_RdrObjHeading_FL_8        0

/**
 * Signal RdrObjHeading_FL_8 raw minimum value.
 */
#define MIN_SRR_FL_3A1h_RdrObjHeading_FL_8          0

/**
 * Signal RdrObjHeading_FL_8 raw maximum value.
 */
#define MAX_SRR_FL_3A1h_RdrObjHeading_FL_8          360

/**
 * Signal RdrObjHeading_FL_8 raw offset value.
 */
#define OFF_SRR_FL_3A1h_RdrObjHeading_FL_8          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjChks_FL_9 Signal RdrObjChks_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjChks_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjChks_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjChks_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjChks_FL_9             1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjChks_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjChks_FL_9           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjChks_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjChks_FL_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjChks_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjChks_FL_9(buf, 0)

/**
 * Signal RdrObjChks_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjChks_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjChks_FL_9           0

/**
 * Signal RdrObjChks_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjChks_FL_9             0

/**
 * Signal RdrObjChks_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjChks_FL_9             255

/**
 * Signal RdrObjChks_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjChks_FL_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjCntr_FL_9 Signal RdrObjCntr_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjCntr_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjCntr_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjCntr_FL_9             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjCntr_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjCntr_FL_9           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjCntr_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjCntr_FL_9(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjCntr_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjCntr_FL_9(buf, 0)

/**
 * Signal RdrObjCntr_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjCntr_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjCntr_FL_9           0

/**
 * Signal RdrObjCntr_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjCntr_FL_9             0

/**
 * Signal RdrObjCntr_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjCntr_FL_9             15

/**
 * Signal RdrObjCntr_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjCntr_FL_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjAy_FL_9 Signal RdrObjAy_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjAy_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjAy_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjAy_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjAy_FL_9               1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjAy_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjAy_FL_9             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjAy_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjAy_FL_9(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjAy_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjAy_FL_9(buf, 0)

/**
 * Signal RdrObjAy_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjAy_FL_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjAy_FL_9             0

/**
 * Signal RdrObjAy_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjAy_FL_9               0

/**
 * Signal RdrObjAy_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjAy_FL_9               128

/**
 * Signal RdrObjAy_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjAy_FL_9               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjAx_FL_9 Signal RdrObjAx_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjAx_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjAx_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjAx_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjAx_FL_9               1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjAx_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjAx_FL_9             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjAx_FL_9(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjAx_FL_9(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjAx_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjAx_FL_9(buf, 0)

/**
 * Signal RdrObjAx_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjAx_FL_9(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjAx_FL_9             0

/**
 * Signal RdrObjAx_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjAx_FL_9               0

/**
 * Signal RdrObjAx_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjAx_FL_9               512

/**
 * Signal RdrObjAx_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjAx_FL_9               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjCoast_FL_9 Signal RdrObjCoast_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjCoast_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjCoast_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjCoast_FL_9            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjCoast_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjCoast_FL_9          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjCoast_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjCoast_FL_9(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjCoast_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjCoast_FL_9(buf, 0)

/**
 * Signal RdrObjCoast_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjCoast_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjCoast_FL_9          0

/**
 * Signal RdrObjCoast_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjCoast_FL_9            0

/**
 * Signal RdrObjCoast_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjCoast_FL_9            1

/**
 * Signal RdrObjCoast_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjCoast_FL_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjConf_FL_9 Signal RdrObjConf_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjConf_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjConf_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjConf_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjConf_FL_9             1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjConf_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjConf_FL_9           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjConf_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjConf_FL_9(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjConf_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjConf_FL_9(buf, 0)

/**
 * Signal RdrObjConf_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjConf_FL_9(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjConf_FL_9           0

/**
 * Signal RdrObjConf_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjConf_FL_9             0

/**
 * Signal RdrObjConf_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjConf_FL_9             14

/**
 * Signal RdrObjConf_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjConf_FL_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjMtnPat_FL_9 Signal RdrObjMtnPat_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjMtnPat_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjMtnPat_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjMtnPat_FL_9           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjMtnPat_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjMtnPat_FL_9         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjMtnPat_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjMtnPat_FL_9(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjMtnPat_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjMtnPat_FL_9(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjMtnPat_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjMtnPat_FL_9         0

/**
 * Signal RdrObjMtnPat_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjMtnPat_FL_9           0

/**
 * Signal RdrObjMtnPat_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjMtnPat_FL_9           3

/**
 * Signal RdrObjMtnPat_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjMtnPat_FL_9           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjID_FL_9 Signal RdrObjID_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjID_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjID_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjID_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjID_FL_9               1, 0, 47, 7

/**
 * Signal RdrObjID_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjID_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjID_FL_9             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjID_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjID_FL_9(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjID_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjID_FL_9(buf, 0)

/**
 * Signal RdrObjID_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjID_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjID_FL_9             0

/**
 * Signal RdrObjID_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjID_FL_9               0

/**
 * Signal RdrObjID_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjID_FL_9               255

/**
 * Signal RdrObjID_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjID_FL_9               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjTyp_FL_9 Signal RdrObjTyp_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjTyp_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjTyp_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjTyp_FL_9              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjTyp_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjTyp_FL_9            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjTyp_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjTyp_FL_9(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjTyp_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjTyp_FL_9(buf, 0)

/**
 * Signal RdrObjTyp_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjTyp_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjTyp_FL_9            0

/**
 * Signal RdrObjTyp_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjTyp_FL_9              0

/**
 * Signal RdrObjTyp_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjTyp_FL_9              3

/**
 * Signal RdrObjTyp_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjTyp_FL_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A2h_RdrObjDy_FL_9 Signal RdrObjDy_FL_9 of Message SRR_FL_3A2h (0x3a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A2h
 * @{
 */

/**
 * Signal RdrObjDy_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A2h_RdrObjDy_FL_9 and \ref GET_SRR_FL_3A2h_RdrObjDy_FL_9 instead.
 */
#define SIG_SRR_FL_3A2h_RdrObjDy_FL_9               1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A2h_RdrObjDy_FL_9 or \ref INIT_SRR_FL_3A2h instead.
 */
#define SETUP_SRR_FL_3A2h_RdrObjDy_FL_9             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A2h_RdrObjDy_FL_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A2h_RdrObjDy_FL_9(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A2h_RdrObjDy_FL_9(buf) \
	SET_SRR_FL_3A2h_RdrObjDy_FL_9(buf, 0)

/**
 * Signal RdrObjDy_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A2h_RdrObjDy_FL_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_9 raw initial value.
 */
#define START_SRR_FL_3A2h_RdrObjDy_FL_9             0

/**
 * Signal RdrObjDy_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A2h_RdrObjDy_FL_9               0

/**
 * Signal RdrObjDy_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A2h_RdrObjDy_FL_9               2046

/**
 * Signal RdrObjDy_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A2h_RdrObjDy_FL_9               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjChks2_FL_9 Signal RdrObjChks2_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjChks2_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjChks2_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjChks2_FL_9            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjChks2_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjChks2_FL_9          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjChks2_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjChks2_FL_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjChks2_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjChks2_FL_9(buf, 0)

/**
 * Signal RdrObjChks2_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjChks2_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjChks2_FL_9          0

/**
 * Signal RdrObjChks2_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjChks2_FL_9            0

/**
 * Signal RdrObjChks2_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjChks2_FL_9            255

/**
 * Signal RdrObjChks2_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjChks2_FL_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjDx_FL_9 Signal RdrObjDx_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjDx_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjDx_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjDx_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjDx_FL_9               1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjDx_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjDx_FL_9             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjDx_FL_9(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjDx_FL_9(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjDx_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjDx_FL_9(buf, 0)

/**
 * Signal RdrObjDx_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjDx_FL_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjDx_FL_9             0

/**
 * Signal RdrObjDx_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjDx_FL_9               0

/**
 * Signal RdrObjDx_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjDx_FL_9               2540

/**
 * Signal RdrObjDx_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjDx_FL_9               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjTiAlv_FL_9 Signal RdrObjTiAlv_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjTiAlv_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjTiAlv_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjTiAlv_FL_9            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjTiAlv_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjTiAlv_FL_9          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjTiAlv_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjTiAlv_FL_9(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjTiAlv_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjTiAlv_FL_9(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjTiAlv_FL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjTiAlv_FL_9          0

/**
 * Signal RdrObjTiAlv_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjTiAlv_FL_9            0

/**
 * Signal RdrObjTiAlv_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjTiAlv_FL_9            127

/**
 * Signal RdrObjTiAlv_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjTiAlv_FL_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjVy_FL_9 Signal RdrObjVy_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjVy_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjVy_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjVy_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjVy_FL_9               1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjVy_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjVy_FL_9             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjVy_FL_9(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjVy_FL_9(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjVy_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjVy_FL_9(buf, 0)

/**
 * Signal RdrObjVy_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjVy_FL_9(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjVy_FL_9             0

/**
 * Signal RdrObjVy_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjVy_FL_9               0

/**
 * Signal RdrObjVy_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjVy_FL_9               1023

/**
 * Signal RdrObjVy_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjVy_FL_9               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjVx_FL_9 Signal RdrObjVx_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjVx_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjVx_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjVx_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjVx_FL_9               1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjVx_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjVx_FL_9             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjVx_FL_9(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjVx_FL_9(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjVx_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjVx_FL_9(buf, 0)

/**
 * Signal RdrObjVx_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjVx_FL_9(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjVx_FL_9             0

/**
 * Signal RdrObjVx_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjVx_FL_9               0

/**
 * Signal RdrObjVx_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjVx_FL_9               1023

/**
 * Signal RdrObjVx_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjVx_FL_9               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjWth_FL_9 Signal RdrObjWth_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjWth_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjWth_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjWth_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjWth_FL_9              1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjWth_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjWth_FL_9            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjWth_FL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjWth_FL_9(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjWth_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjWth_FL_9(buf, 0)

/**
 * Signal RdrObjWth_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjWth_FL_9(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjWth_FL_9            0

/**
 * Signal RdrObjWth_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjWth_FL_9              0

/**
 * Signal RdrObjWth_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjWth_FL_9              50

/**
 * Signal RdrObjWth_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjWth_FL_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A3h_RdrObjHeading_FL_9 Signal RdrObjHeading_FL_9 of Message SRR_FL_3A3h (0x3a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A3h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A3h_RdrObjHeading_FL_9 and \ref GET_SRR_FL_3A3h_RdrObjHeading_FL_9 instead.
 */
#define SIG_SRR_FL_3A3h_RdrObjHeading_FL_9          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A3h_RdrObjHeading_FL_9 or \ref INIT_SRR_FL_3A3h instead.
 */
#define SETUP_SRR_FL_3A3h_RdrObjHeading_FL_9        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A3h_RdrObjHeading_FL_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A3h_RdrObjHeading_FL_9(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A3h_RdrObjHeading_FL_9(buf) \
	SET_SRR_FL_3A3h_RdrObjHeading_FL_9(buf, 0)

/**
 * Signal RdrObjHeading_FL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A3h_RdrObjHeading_FL_9(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_9 raw initial value.
 */
#define START_SRR_FL_3A3h_RdrObjHeading_FL_9        0

/**
 * Signal RdrObjHeading_FL_9 raw minimum value.
 */
#define MIN_SRR_FL_3A3h_RdrObjHeading_FL_9          0

/**
 * Signal RdrObjHeading_FL_9 raw maximum value.
 */
#define MAX_SRR_FL_3A3h_RdrObjHeading_FL_9          360

/**
 * Signal RdrObjHeading_FL_9 raw offset value.
 */
#define OFF_SRR_FL_3A3h_RdrObjHeading_FL_9          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjChks_FL_10 Signal RdrObjChks_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjChks_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjChks_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjChks_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjChks_FL_10            1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjChks_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjChks_FL_10          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjChks_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjChks_FL_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjChks_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjChks_FL_10(buf, 0)

/**
 * Signal RdrObjChks_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjChks_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjChks_FL_10          0

/**
 * Signal RdrObjChks_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjChks_FL_10            0

/**
 * Signal RdrObjChks_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjChks_FL_10            255

/**
 * Signal RdrObjChks_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjChks_FL_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjCntr_FL_10 Signal RdrObjCntr_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjCntr_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjCntr_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjCntr_FL_10            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjCntr_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjCntr_FL_10          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjCntr_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjCntr_FL_10(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjCntr_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjCntr_FL_10(buf, 0)

/**
 * Signal RdrObjCntr_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjCntr_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjCntr_FL_10          0

/**
 * Signal RdrObjCntr_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjCntr_FL_10            0

/**
 * Signal RdrObjCntr_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjCntr_FL_10            15

/**
 * Signal RdrObjCntr_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjCntr_FL_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjAy_FL_10 Signal RdrObjAy_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjAy_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjAy_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjAy_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjAy_FL_10              1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjAy_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjAy_FL_10            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjAy_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjAy_FL_10(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjAy_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjAy_FL_10(buf, 0)

/**
 * Signal RdrObjAy_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjAy_FL_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjAy_FL_10            0

/**
 * Signal RdrObjAy_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjAy_FL_10              0

/**
 * Signal RdrObjAy_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjAy_FL_10              128

/**
 * Signal RdrObjAy_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjAy_FL_10              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjAx_FL_10 Signal RdrObjAx_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjAx_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjAx_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjAx_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjAx_FL_10              1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjAx_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjAx_FL_10            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjAx_FL_10(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjAx_FL_10(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjAx_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjAx_FL_10(buf, 0)

/**
 * Signal RdrObjAx_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjAx_FL_10(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjAx_FL_10            0

/**
 * Signal RdrObjAx_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjAx_FL_10              0

/**
 * Signal RdrObjAx_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjAx_FL_10              512

/**
 * Signal RdrObjAx_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjAx_FL_10              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjCoast_FL_10 Signal RdrObjCoast_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjCoast_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjCoast_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjCoast_FL_10           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjCoast_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjCoast_FL_10         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjCoast_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjCoast_FL_10(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjCoast_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjCoast_FL_10(buf, 0)

/**
 * Signal RdrObjCoast_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjCoast_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjCoast_FL_10         0

/**
 * Signal RdrObjCoast_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjCoast_FL_10           0

/**
 * Signal RdrObjCoast_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjCoast_FL_10           1

/**
 * Signal RdrObjCoast_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjCoast_FL_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjConf_FL_10 Signal RdrObjConf_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjConf_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjConf_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjConf_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjConf_FL_10            1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjConf_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjConf_FL_10          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjConf_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjConf_FL_10(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjConf_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjConf_FL_10(buf, 0)

/**
 * Signal RdrObjConf_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjConf_FL_10(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjConf_FL_10          0

/**
 * Signal RdrObjConf_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjConf_FL_10            0

/**
 * Signal RdrObjConf_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjConf_FL_10            14

/**
 * Signal RdrObjConf_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjConf_FL_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjMtnPat_FL_10 Signal RdrObjMtnPat_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjMtnPat_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjMtnPat_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjMtnPat_FL_10          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjMtnPat_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjMtnPat_FL_10        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjMtnPat_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjMtnPat_FL_10(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjMtnPat_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjMtnPat_FL_10(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjMtnPat_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjMtnPat_FL_10        0

/**
 * Signal RdrObjMtnPat_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjMtnPat_FL_10          0

/**
 * Signal RdrObjMtnPat_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjMtnPat_FL_10          3

/**
 * Signal RdrObjMtnPat_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjMtnPat_FL_10          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjID_FL_10 Signal RdrObjID_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjID_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjID_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjID_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjID_FL_10              1, 0, 47, 7

/**
 * Signal RdrObjID_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjID_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjID_FL_10            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjID_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjID_FL_10(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjID_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjID_FL_10(buf, 0)

/**
 * Signal RdrObjID_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjID_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjID_FL_10            0

/**
 * Signal RdrObjID_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjID_FL_10              0

/**
 * Signal RdrObjID_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjID_FL_10              255

/**
 * Signal RdrObjID_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjID_FL_10              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjTyp_FL_10 Signal RdrObjTyp_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjTyp_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjTyp_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjTyp_FL_10             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjTyp_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjTyp_FL_10           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjTyp_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjTyp_FL_10(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjTyp_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjTyp_FL_10(buf, 0)

/**
 * Signal RdrObjTyp_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjTyp_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjTyp_FL_10           0

/**
 * Signal RdrObjTyp_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjTyp_FL_10             0

/**
 * Signal RdrObjTyp_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjTyp_FL_10             3

/**
 * Signal RdrObjTyp_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjTyp_FL_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A4h_RdrObjDy_FL_10 Signal RdrObjDy_FL_10 of Message SRR_FL_3A4h (0x3a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A4h
 * @{
 */

/**
 * Signal RdrObjDy_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A4h_RdrObjDy_FL_10 and \ref GET_SRR_FL_3A4h_RdrObjDy_FL_10 instead.
 */
#define SIG_SRR_FL_3A4h_RdrObjDy_FL_10              1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A4h_RdrObjDy_FL_10 or \ref INIT_SRR_FL_3A4h instead.
 */
#define SETUP_SRR_FL_3A4h_RdrObjDy_FL_10            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A4h_RdrObjDy_FL_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A4h_RdrObjDy_FL_10(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A4h_RdrObjDy_FL_10(buf) \
	SET_SRR_FL_3A4h_RdrObjDy_FL_10(buf, 0)

/**
 * Signal RdrObjDy_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A4h_RdrObjDy_FL_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_10 raw initial value.
 */
#define START_SRR_FL_3A4h_RdrObjDy_FL_10            0

/**
 * Signal RdrObjDy_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A4h_RdrObjDy_FL_10              0

/**
 * Signal RdrObjDy_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A4h_RdrObjDy_FL_10              2046

/**
 * Signal RdrObjDy_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A4h_RdrObjDy_FL_10              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjChks2_FL_10 Signal RdrObjChks2_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjChks2_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjChks2_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjChks2_FL_10           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjChks2_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjChks2_FL_10         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjChks2_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjChks2_FL_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjChks2_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjChks2_FL_10(buf, 0)

/**
 * Signal RdrObjChks2_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjChks2_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjChks2_FL_10         0

/**
 * Signal RdrObjChks2_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjChks2_FL_10           0

/**
 * Signal RdrObjChks2_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjChks2_FL_10           255

/**
 * Signal RdrObjChks2_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjChks2_FL_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjDx_FL_10 Signal RdrObjDx_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjDx_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjDx_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjDx_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjDx_FL_10              1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjDx_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjDx_FL_10            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjDx_FL_10(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjDx_FL_10(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjDx_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjDx_FL_10(buf, 0)

/**
 * Signal RdrObjDx_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjDx_FL_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjDx_FL_10            0

/**
 * Signal RdrObjDx_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjDx_FL_10              0

/**
 * Signal RdrObjDx_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjDx_FL_10              2540

/**
 * Signal RdrObjDx_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjDx_FL_10              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjTiAlv_FL_10 Signal RdrObjTiAlv_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjTiAlv_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjTiAlv_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjTiAlv_FL_10           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjTiAlv_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjTiAlv_FL_10         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjTiAlv_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjTiAlv_FL_10(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjTiAlv_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjTiAlv_FL_10(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjTiAlv_FL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjTiAlv_FL_10         0

/**
 * Signal RdrObjTiAlv_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjTiAlv_FL_10           0

/**
 * Signal RdrObjTiAlv_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjTiAlv_FL_10           127

/**
 * Signal RdrObjTiAlv_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjTiAlv_FL_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjVy_FL_10 Signal RdrObjVy_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjVy_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjVy_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjVy_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjVy_FL_10              1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjVy_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjVy_FL_10            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjVy_FL_10(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjVy_FL_10(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjVy_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjVy_FL_10(buf, 0)

/**
 * Signal RdrObjVy_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjVy_FL_10(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjVy_FL_10            0

/**
 * Signal RdrObjVy_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjVy_FL_10              0

/**
 * Signal RdrObjVy_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjVy_FL_10              1023

/**
 * Signal RdrObjVy_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjVy_FL_10              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjVx_FL_10 Signal RdrObjVx_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjVx_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjVx_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjVx_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjVx_FL_10              1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjVx_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjVx_FL_10            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjVx_FL_10(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjVx_FL_10(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjVx_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjVx_FL_10(buf, 0)

/**
 * Signal RdrObjVx_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjVx_FL_10(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjVx_FL_10            0

/**
 * Signal RdrObjVx_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjVx_FL_10              0

/**
 * Signal RdrObjVx_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjVx_FL_10              1023

/**
 * Signal RdrObjVx_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjVx_FL_10              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjWth_FL_10 Signal RdrObjWth_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjWth_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjWth_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjWth_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjWth_FL_10             1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjWth_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjWth_FL_10           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjWth_FL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjWth_FL_10(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjWth_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjWth_FL_10(buf, 0)

/**
 * Signal RdrObjWth_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjWth_FL_10(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjWth_FL_10           0

/**
 * Signal RdrObjWth_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjWth_FL_10             0

/**
 * Signal RdrObjWth_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjWth_FL_10             50

/**
 * Signal RdrObjWth_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjWth_FL_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A5h_RdrObjHeading_FL_10 Signal RdrObjHeading_FL_10 of Message SRR_FL_3A5h (0x3a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A5h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A5h_RdrObjHeading_FL_10 and \ref GET_SRR_FL_3A5h_RdrObjHeading_FL_10 instead.
 */
#define SIG_SRR_FL_3A5h_RdrObjHeading_FL_10         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A5h_RdrObjHeading_FL_10 or \ref INIT_SRR_FL_3A5h instead.
 */
#define SETUP_SRR_FL_3A5h_RdrObjHeading_FL_10       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A5h_RdrObjHeading_FL_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A5h_RdrObjHeading_FL_10(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A5h_RdrObjHeading_FL_10(buf) \
	SET_SRR_FL_3A5h_RdrObjHeading_FL_10(buf, 0)

/**
 * Signal RdrObjHeading_FL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A5h_RdrObjHeading_FL_10(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_10 raw initial value.
 */
#define START_SRR_FL_3A5h_RdrObjHeading_FL_10       0

/**
 * Signal RdrObjHeading_FL_10 raw minimum value.
 */
#define MIN_SRR_FL_3A5h_RdrObjHeading_FL_10         0

/**
 * Signal RdrObjHeading_FL_10 raw maximum value.
 */
#define MAX_SRR_FL_3A5h_RdrObjHeading_FL_10         360

/**
 * Signal RdrObjHeading_FL_10 raw offset value.
 */
#define OFF_SRR_FL_3A5h_RdrObjHeading_FL_10         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjChks_FL_11 Signal RdrObjChks_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjChks_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjChks_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjChks_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjChks_FL_11            1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjChks_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjChks_FL_11          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjChks_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjChks_FL_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjChks_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjChks_FL_11(buf, 0)

/**
 * Signal RdrObjChks_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjChks_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjChks_FL_11          0

/**
 * Signal RdrObjChks_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjChks_FL_11            0

/**
 * Signal RdrObjChks_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjChks_FL_11            255

/**
 * Signal RdrObjChks_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjChks_FL_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjCntr_FL_11 Signal RdrObjCntr_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjCntr_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjCntr_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjCntr_FL_11            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjCntr_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjCntr_FL_11          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjCntr_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjCntr_FL_11(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjCntr_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjCntr_FL_11(buf, 0)

/**
 * Signal RdrObjCntr_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjCntr_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjCntr_FL_11          0

/**
 * Signal RdrObjCntr_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjCntr_FL_11            0

/**
 * Signal RdrObjCntr_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjCntr_FL_11            15

/**
 * Signal RdrObjCntr_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjCntr_FL_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjAy_FL_11 Signal RdrObjAy_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjAy_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjAy_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjAy_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjAy_FL_11              1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjAy_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjAy_FL_11            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjAy_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjAy_FL_11(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjAy_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjAy_FL_11(buf, 0)

/**
 * Signal RdrObjAy_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjAy_FL_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjAy_FL_11            0

/**
 * Signal RdrObjAy_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjAy_FL_11              0

/**
 * Signal RdrObjAy_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjAy_FL_11              128

/**
 * Signal RdrObjAy_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjAy_FL_11              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjAx_FL_11 Signal RdrObjAx_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjAx_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjAx_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjAx_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjAx_FL_11              1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjAx_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjAx_FL_11            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjAx_FL_11(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjAx_FL_11(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjAx_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjAx_FL_11(buf, 0)

/**
 * Signal RdrObjAx_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjAx_FL_11(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjAx_FL_11            0

/**
 * Signal RdrObjAx_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjAx_FL_11              0

/**
 * Signal RdrObjAx_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjAx_FL_11              512

/**
 * Signal RdrObjAx_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjAx_FL_11              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjCoast_FL_11 Signal RdrObjCoast_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjCoast_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjCoast_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjCoast_FL_11           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjCoast_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjCoast_FL_11         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjCoast_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjCoast_FL_11(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjCoast_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjCoast_FL_11(buf, 0)

/**
 * Signal RdrObjCoast_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjCoast_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjCoast_FL_11         0

/**
 * Signal RdrObjCoast_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjCoast_FL_11           0

/**
 * Signal RdrObjCoast_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjCoast_FL_11           1

/**
 * Signal RdrObjCoast_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjCoast_FL_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjConf_FL_11 Signal RdrObjConf_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjConf_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjConf_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjConf_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjConf_FL_11            1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjConf_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjConf_FL_11          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjConf_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjConf_FL_11(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjConf_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjConf_FL_11(buf, 0)

/**
 * Signal RdrObjConf_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjConf_FL_11(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjConf_FL_11          0

/**
 * Signal RdrObjConf_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjConf_FL_11            0

/**
 * Signal RdrObjConf_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjConf_FL_11            14

/**
 * Signal RdrObjConf_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjConf_FL_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjMtnPat_FL_11 Signal RdrObjMtnPat_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjMtnPat_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjMtnPat_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjMtnPat_FL_11          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjMtnPat_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjMtnPat_FL_11        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjMtnPat_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjMtnPat_FL_11(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjMtnPat_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjMtnPat_FL_11(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjMtnPat_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjMtnPat_FL_11        0

/**
 * Signal RdrObjMtnPat_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjMtnPat_FL_11          0

/**
 * Signal RdrObjMtnPat_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjMtnPat_FL_11          3

/**
 * Signal RdrObjMtnPat_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjMtnPat_FL_11          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjID_FL_11 Signal RdrObjID_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjID_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjID_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjID_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjID_FL_11              1, 0, 47, 7

/**
 * Signal RdrObjID_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjID_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjID_FL_11            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjID_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjID_FL_11(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjID_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjID_FL_11(buf, 0)

/**
 * Signal RdrObjID_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjID_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjID_FL_11            0

/**
 * Signal RdrObjID_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjID_FL_11              0

/**
 * Signal RdrObjID_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjID_FL_11              255

/**
 * Signal RdrObjID_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjID_FL_11              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjTyp_FL_11 Signal RdrObjTyp_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjTyp_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjTyp_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjTyp_FL_11             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjTyp_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjTyp_FL_11           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjTyp_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjTyp_FL_11(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjTyp_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjTyp_FL_11(buf, 0)

/**
 * Signal RdrObjTyp_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjTyp_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjTyp_FL_11           0

/**
 * Signal RdrObjTyp_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjTyp_FL_11             0

/**
 * Signal RdrObjTyp_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjTyp_FL_11             3

/**
 * Signal RdrObjTyp_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjTyp_FL_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A6h_RdrObjDy_FL_11 Signal RdrObjDy_FL_11 of Message SRR_FL_3A6h (0x3a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A6h
 * @{
 */

/**
 * Signal RdrObjDy_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A6h_RdrObjDy_FL_11 and \ref GET_SRR_FL_3A6h_RdrObjDy_FL_11 instead.
 */
#define SIG_SRR_FL_3A6h_RdrObjDy_FL_11              1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A6h_RdrObjDy_FL_11 or \ref INIT_SRR_FL_3A6h instead.
 */
#define SETUP_SRR_FL_3A6h_RdrObjDy_FL_11            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A6h_RdrObjDy_FL_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A6h_RdrObjDy_FL_11(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A6h_RdrObjDy_FL_11(buf) \
	SET_SRR_FL_3A6h_RdrObjDy_FL_11(buf, 0)

/**
 * Signal RdrObjDy_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A6h_RdrObjDy_FL_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_11 raw initial value.
 */
#define START_SRR_FL_3A6h_RdrObjDy_FL_11            0

/**
 * Signal RdrObjDy_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A6h_RdrObjDy_FL_11              0

/**
 * Signal RdrObjDy_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A6h_RdrObjDy_FL_11              2046

/**
 * Signal RdrObjDy_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A6h_RdrObjDy_FL_11              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjChks2_FL_11 Signal RdrObjChks2_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjChks2_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjChks2_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjChks2_FL_11           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjChks2_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjChks2_FL_11         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjChks2_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjChks2_FL_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjChks2_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjChks2_FL_11(buf, 0)

/**
 * Signal RdrObjChks2_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjChks2_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjChks2_FL_11         0

/**
 * Signal RdrObjChks2_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjChks2_FL_11           0

/**
 * Signal RdrObjChks2_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjChks2_FL_11           255

/**
 * Signal RdrObjChks2_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjChks2_FL_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjDx_FL_11 Signal RdrObjDx_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjDx_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjDx_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjDx_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjDx_FL_11              1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjDx_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjDx_FL_11            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjDx_FL_11(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjDx_FL_11(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjDx_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjDx_FL_11(buf, 0)

/**
 * Signal RdrObjDx_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjDx_FL_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjDx_FL_11            0

/**
 * Signal RdrObjDx_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjDx_FL_11              0

/**
 * Signal RdrObjDx_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjDx_FL_11              2540

/**
 * Signal RdrObjDx_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjDx_FL_11              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjTiAlv_FL_11 Signal RdrObjTiAlv_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjTiAlv_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjTiAlv_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjTiAlv_FL_11           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjTiAlv_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjTiAlv_FL_11         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjTiAlv_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjTiAlv_FL_11(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjTiAlv_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjTiAlv_FL_11(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjTiAlv_FL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjTiAlv_FL_11         0

/**
 * Signal RdrObjTiAlv_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjTiAlv_FL_11           0

/**
 * Signal RdrObjTiAlv_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjTiAlv_FL_11           127

/**
 * Signal RdrObjTiAlv_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjTiAlv_FL_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjVy_FL_11 Signal RdrObjVy_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjVy_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjVy_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjVy_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjVy_FL_11              1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjVy_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjVy_FL_11            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjVy_FL_11(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjVy_FL_11(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjVy_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjVy_FL_11(buf, 0)

/**
 * Signal RdrObjVy_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjVy_FL_11(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjVy_FL_11            0

/**
 * Signal RdrObjVy_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjVy_FL_11              0

/**
 * Signal RdrObjVy_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjVy_FL_11              1023

/**
 * Signal RdrObjVy_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjVy_FL_11              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjVx_FL_11 Signal RdrObjVx_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjVx_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjVx_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjVx_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjVx_FL_11              1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjVx_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjVx_FL_11            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjVx_FL_11(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjVx_FL_11(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjVx_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjVx_FL_11(buf, 0)

/**
 * Signal RdrObjVx_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjVx_FL_11(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjVx_FL_11            0

/**
 * Signal RdrObjVx_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjVx_FL_11              0

/**
 * Signal RdrObjVx_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjVx_FL_11              1023

/**
 * Signal RdrObjVx_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjVx_FL_11              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjWth_FL_11 Signal RdrObjWth_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjWth_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjWth_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjWth_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjWth_FL_11             1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjWth_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjWth_FL_11           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjWth_FL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjWth_FL_11(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjWth_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjWth_FL_11(buf, 0)

/**
 * Signal RdrObjWth_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjWth_FL_11(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjWth_FL_11           0

/**
 * Signal RdrObjWth_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjWth_FL_11             0

/**
 * Signal RdrObjWth_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjWth_FL_11             50

/**
 * Signal RdrObjWth_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjWth_FL_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A7h_RdrObjHeading_FL_11 Signal RdrObjHeading_FL_11 of Message SRR_FL_3A7h (0x3a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A7h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A7h_RdrObjHeading_FL_11 and \ref GET_SRR_FL_3A7h_RdrObjHeading_FL_11 instead.
 */
#define SIG_SRR_FL_3A7h_RdrObjHeading_FL_11         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A7h_RdrObjHeading_FL_11 or \ref INIT_SRR_FL_3A7h instead.
 */
#define SETUP_SRR_FL_3A7h_RdrObjHeading_FL_11       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A7h_RdrObjHeading_FL_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A7h_RdrObjHeading_FL_11(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A7h_RdrObjHeading_FL_11(buf) \
	SET_SRR_FL_3A7h_RdrObjHeading_FL_11(buf, 0)

/**
 * Signal RdrObjHeading_FL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A7h_RdrObjHeading_FL_11(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_11 raw initial value.
 */
#define START_SRR_FL_3A7h_RdrObjHeading_FL_11       0

/**
 * Signal RdrObjHeading_FL_11 raw minimum value.
 */
#define MIN_SRR_FL_3A7h_RdrObjHeading_FL_11         0

/**
 * Signal RdrObjHeading_FL_11 raw maximum value.
 */
#define MAX_SRR_FL_3A7h_RdrObjHeading_FL_11         360

/**
 * Signal RdrObjHeading_FL_11 raw offset value.
 */
#define OFF_SRR_FL_3A7h_RdrObjHeading_FL_11         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjChks_FL_12 Signal RdrObjChks_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjChks_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjChks_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjChks_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjChks_FL_12            1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjChks_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjChks_FL_12          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjChks_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjChks_FL_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjChks_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjChks_FL_12(buf, 0)

/**
 * Signal RdrObjChks_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjChks_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjChks_FL_12          0

/**
 * Signal RdrObjChks_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjChks_FL_12            0

/**
 * Signal RdrObjChks_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjChks_FL_12            255

/**
 * Signal RdrObjChks_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjChks_FL_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjCntr_FL_12 Signal RdrObjCntr_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjCntr_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjCntr_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjCntr_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjCntr_FL_12            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjCntr_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjCntr_FL_12          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjCntr_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjCntr_FL_12(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjCntr_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjCntr_FL_12(buf, 0)

/**
 * Signal RdrObjCntr_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjCntr_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjCntr_FL_12          0

/**
 * Signal RdrObjCntr_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjCntr_FL_12            0

/**
 * Signal RdrObjCntr_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjCntr_FL_12            15

/**
 * Signal RdrObjCntr_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjCntr_FL_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjAy_FL_12 Signal RdrObjAy_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjAy_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjAy_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjAy_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjAy_FL_12              1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjAy_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjAy_FL_12            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjAy_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjAy_FL_12(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjAy_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjAy_FL_12(buf, 0)

/**
 * Signal RdrObjAy_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjAy_FL_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjAy_FL_12            0

/**
 * Signal RdrObjAy_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjAy_FL_12              0

/**
 * Signal RdrObjAy_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjAy_FL_12              128

/**
 * Signal RdrObjAy_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjAy_FL_12              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjAx_FL_12 Signal RdrObjAx_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjAx_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjAx_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjAx_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjAx_FL_12              1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjAx_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjAx_FL_12            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjAx_FL_12(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjAx_FL_12(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjAx_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjAx_FL_12(buf, 0)

/**
 * Signal RdrObjAx_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjAx_FL_12(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjAx_FL_12            0

/**
 * Signal RdrObjAx_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjAx_FL_12              0

/**
 * Signal RdrObjAx_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjAx_FL_12              512

/**
 * Signal RdrObjAx_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjAx_FL_12              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjCoast_FL_12 Signal RdrObjCoast_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjCoast_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjCoast_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjCoast_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjCoast_FL_12           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjCoast_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjCoast_FL_12         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjCoast_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjCoast_FL_12(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjCoast_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjCoast_FL_12(buf, 0)

/**
 * Signal RdrObjCoast_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjCoast_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjCoast_FL_12         0

/**
 * Signal RdrObjCoast_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjCoast_FL_12           0

/**
 * Signal RdrObjCoast_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjCoast_FL_12           1

/**
 * Signal RdrObjCoast_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjCoast_FL_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjConf_FL_12 Signal RdrObjConf_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjConf_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjConf_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjConf_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjConf_FL_12            1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjConf_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjConf_FL_12          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjConf_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjConf_FL_12(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjConf_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjConf_FL_12(buf, 0)

/**
 * Signal RdrObjConf_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjConf_FL_12(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjConf_FL_12          0

/**
 * Signal RdrObjConf_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjConf_FL_12            0

/**
 * Signal RdrObjConf_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjConf_FL_12            14

/**
 * Signal RdrObjConf_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjConf_FL_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjMtnPat_FL_12 Signal RdrObjMtnPat_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjMtnPat_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjMtnPat_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjMtnPat_FL_12          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjMtnPat_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjMtnPat_FL_12        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjMtnPat_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjMtnPat_FL_12(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjMtnPat_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjMtnPat_FL_12(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjMtnPat_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjMtnPat_FL_12        0

/**
 * Signal RdrObjMtnPat_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjMtnPat_FL_12          0

/**
 * Signal RdrObjMtnPat_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjMtnPat_FL_12          3

/**
 * Signal RdrObjMtnPat_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjMtnPat_FL_12          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjID_FL_12 Signal RdrObjID_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjID_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjID_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjID_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjID_FL_12              1, 0, 47, 7

/**
 * Signal RdrObjID_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjID_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjID_FL_12            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjID_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjID_FL_12(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjID_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjID_FL_12(buf, 0)

/**
 * Signal RdrObjID_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjID_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjID_FL_12            0

/**
 * Signal RdrObjID_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjID_FL_12              0

/**
 * Signal RdrObjID_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjID_FL_12              255

/**
 * Signal RdrObjID_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjID_FL_12              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjTyp_FL_12 Signal RdrObjTyp_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjTyp_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjTyp_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjTyp_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjTyp_FL_12             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjTyp_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjTyp_FL_12           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjTyp_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjTyp_FL_12(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjTyp_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjTyp_FL_12(buf, 0)

/**
 * Signal RdrObjTyp_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjTyp_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjTyp_FL_12           0

/**
 * Signal RdrObjTyp_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjTyp_FL_12             0

/**
 * Signal RdrObjTyp_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjTyp_FL_12             3

/**
 * Signal RdrObjTyp_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjTyp_FL_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A8h_RdrObjDy_FL_12 Signal RdrObjDy_FL_12 of Message SRR_FL_3A8h (0x3a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A8h
 * @{
 */

/**
 * Signal RdrObjDy_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A8h_RdrObjDy_FL_12 and \ref GET_SRR_FL_3A8h_RdrObjDy_FL_12 instead.
 */
#define SIG_SRR_FL_3A8h_RdrObjDy_FL_12              1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A8h_RdrObjDy_FL_12 or \ref INIT_SRR_FL_3A8h instead.
 */
#define SETUP_SRR_FL_3A8h_RdrObjDy_FL_12            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A8h_RdrObjDy_FL_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A8h_RdrObjDy_FL_12(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A8h_RdrObjDy_FL_12(buf) \
	SET_SRR_FL_3A8h_RdrObjDy_FL_12(buf, 0)

/**
 * Signal RdrObjDy_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A8h_RdrObjDy_FL_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_12 raw initial value.
 */
#define START_SRR_FL_3A8h_RdrObjDy_FL_12            0

/**
 * Signal RdrObjDy_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A8h_RdrObjDy_FL_12              0

/**
 * Signal RdrObjDy_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A8h_RdrObjDy_FL_12              2046

/**
 * Signal RdrObjDy_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A8h_RdrObjDy_FL_12              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjChks2_FL_12 Signal RdrObjChks2_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjChks2_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjChks2_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjChks2_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjChks2_FL_12           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjChks2_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjChks2_FL_12         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjChks2_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjChks2_FL_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjChks2_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjChks2_FL_12(buf, 0)

/**
 * Signal RdrObjChks2_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjChks2_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjChks2_FL_12         0

/**
 * Signal RdrObjChks2_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjChks2_FL_12           0

/**
 * Signal RdrObjChks2_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjChks2_FL_12           255

/**
 * Signal RdrObjChks2_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjChks2_FL_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjDx_FL_12 Signal RdrObjDx_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjDx_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjDx_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjDx_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjDx_FL_12              1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjDx_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjDx_FL_12            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjDx_FL_12(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjDx_FL_12(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjDx_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjDx_FL_12(buf, 0)

/**
 * Signal RdrObjDx_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjDx_FL_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjDx_FL_12            0

/**
 * Signal RdrObjDx_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjDx_FL_12              0

/**
 * Signal RdrObjDx_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjDx_FL_12              2540

/**
 * Signal RdrObjDx_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjDx_FL_12              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjTiAlv_FL_12 Signal RdrObjTiAlv_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjTiAlv_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjTiAlv_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjTiAlv_FL_12           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjTiAlv_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjTiAlv_FL_12         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjTiAlv_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjTiAlv_FL_12(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjTiAlv_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjTiAlv_FL_12(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjTiAlv_FL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjTiAlv_FL_12         0

/**
 * Signal RdrObjTiAlv_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjTiAlv_FL_12           0

/**
 * Signal RdrObjTiAlv_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjTiAlv_FL_12           127

/**
 * Signal RdrObjTiAlv_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjTiAlv_FL_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjVy_FL_12 Signal RdrObjVy_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjVy_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjVy_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjVy_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjVy_FL_12              1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjVy_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjVy_FL_12            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjVy_FL_12(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjVy_FL_12(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjVy_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjVy_FL_12(buf, 0)

/**
 * Signal RdrObjVy_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjVy_FL_12(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjVy_FL_12            0

/**
 * Signal RdrObjVy_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjVy_FL_12              0

/**
 * Signal RdrObjVy_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjVy_FL_12              1023

/**
 * Signal RdrObjVy_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjVy_FL_12              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjVx_FL_12 Signal RdrObjVx_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjVx_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjVx_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjVx_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjVx_FL_12              1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjVx_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjVx_FL_12            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjVx_FL_12(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjVx_FL_12(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjVx_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjVx_FL_12(buf, 0)

/**
 * Signal RdrObjVx_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjVx_FL_12(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjVx_FL_12            0

/**
 * Signal RdrObjVx_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjVx_FL_12              0

/**
 * Signal RdrObjVx_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjVx_FL_12              1023

/**
 * Signal RdrObjVx_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjVx_FL_12              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjWth_FL_12 Signal RdrObjWth_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjWth_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjWth_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjWth_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjWth_FL_12             1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjWth_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjWth_FL_12           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjWth_FL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjWth_FL_12(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjWth_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjWth_FL_12(buf, 0)

/**
 * Signal RdrObjWth_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjWth_FL_12(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjWth_FL_12           0

/**
 * Signal RdrObjWth_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjWth_FL_12             0

/**
 * Signal RdrObjWth_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjWth_FL_12             50

/**
 * Signal RdrObjWth_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjWth_FL_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3A9h_RdrObjHeading_FL_12 Signal RdrObjHeading_FL_12 of Message SRR_FL_3A9h (0x3a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3A9h
 * @{
 */

/**
 * Signal RdrObjHeading_FL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3A9h_RdrObjHeading_FL_12 and \ref GET_SRR_FL_3A9h_RdrObjHeading_FL_12 instead.
 */
#define SIG_SRR_FL_3A9h_RdrObjHeading_FL_12         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3A9h_RdrObjHeading_FL_12 or \ref INIT_SRR_FL_3A9h instead.
 */
#define SETUP_SRR_FL_3A9h_RdrObjHeading_FL_12       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3A9h_RdrObjHeading_FL_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3A9h_RdrObjHeading_FL_12(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3A9h_RdrObjHeading_FL_12(buf) \
	SET_SRR_FL_3A9h_RdrObjHeading_FL_12(buf, 0)

/**
 * Signal RdrObjHeading_FL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3A9h_RdrObjHeading_FL_12(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_12 raw initial value.
 */
#define START_SRR_FL_3A9h_RdrObjHeading_FL_12       0

/**
 * Signal RdrObjHeading_FL_12 raw minimum value.
 */
#define MIN_SRR_FL_3A9h_RdrObjHeading_FL_12         0

/**
 * Signal RdrObjHeading_FL_12 raw maximum value.
 */
#define MAX_SRR_FL_3A9h_RdrObjHeading_FL_12         360

/**
 * Signal RdrObjHeading_FL_12 raw offset value.
 */
#define OFF_SRR_FL_3A9h_RdrObjHeading_FL_12         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjChks_FL_13 Signal RdrObjChks_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjChks_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjChks_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjChks_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjChks_FL_13            1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjChks_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjChks_FL_13          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjChks_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjChks_FL_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjChks_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjChks_FL_13(buf, 0)

/**
 * Signal RdrObjChks_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjChks_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjChks_FL_13          0

/**
 * Signal RdrObjChks_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjChks_FL_13            0

/**
 * Signal RdrObjChks_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjChks_FL_13            255

/**
 * Signal RdrObjChks_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjChks_FL_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjCntr_FL_13 Signal RdrObjCntr_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjCntr_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjCntr_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjCntr_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjCntr_FL_13            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjCntr_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjCntr_FL_13          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjCntr_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjCntr_FL_13(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjCntr_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjCntr_FL_13(buf, 0)

/**
 * Signal RdrObjCntr_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjCntr_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjCntr_FL_13          0

/**
 * Signal RdrObjCntr_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjCntr_FL_13            0

/**
 * Signal RdrObjCntr_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjCntr_FL_13            15

/**
 * Signal RdrObjCntr_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjCntr_FL_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjAy_FL_13 Signal RdrObjAy_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjAy_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjAy_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjAy_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjAy_FL_13              1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjAy_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjAy_FL_13            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjAy_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjAy_FL_13(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjAy_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjAy_FL_13(buf, 0)

/**
 * Signal RdrObjAy_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjAy_FL_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjAy_FL_13            0

/**
 * Signal RdrObjAy_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjAy_FL_13              0

/**
 * Signal RdrObjAy_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjAy_FL_13              128

/**
 * Signal RdrObjAy_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjAy_FL_13              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjAx_FL_13 Signal RdrObjAx_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjAx_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjAx_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjAx_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjAx_FL_13              1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjAx_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjAx_FL_13            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjAx_FL_13(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjAx_FL_13(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjAx_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjAx_FL_13(buf, 0)

/**
 * Signal RdrObjAx_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjAx_FL_13(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjAx_FL_13            0

/**
 * Signal RdrObjAx_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjAx_FL_13              0

/**
 * Signal RdrObjAx_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjAx_FL_13              512

/**
 * Signal RdrObjAx_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjAx_FL_13              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjCoast_FL_13 Signal RdrObjCoast_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjCoast_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjCoast_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjCoast_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjCoast_FL_13           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjCoast_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjCoast_FL_13         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjCoast_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjCoast_FL_13(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjCoast_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjCoast_FL_13(buf, 0)

/**
 * Signal RdrObjCoast_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjCoast_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjCoast_FL_13         0

/**
 * Signal RdrObjCoast_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjCoast_FL_13           0

/**
 * Signal RdrObjCoast_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjCoast_FL_13           1

/**
 * Signal RdrObjCoast_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjCoast_FL_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjConf_FL_13 Signal RdrObjConf_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjConf_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjConf_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjConf_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjConf_FL_13            1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjConf_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjConf_FL_13          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjConf_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjConf_FL_13(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjConf_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjConf_FL_13(buf, 0)

/**
 * Signal RdrObjConf_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjConf_FL_13(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjConf_FL_13          0

/**
 * Signal RdrObjConf_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjConf_FL_13            0

/**
 * Signal RdrObjConf_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjConf_FL_13            14

/**
 * Signal RdrObjConf_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjConf_FL_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjMtnPat_FL_13 Signal RdrObjMtnPat_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjMtnPat_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjMtnPat_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjMtnPat_FL_13          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjMtnPat_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjMtnPat_FL_13        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjMtnPat_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjMtnPat_FL_13(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjMtnPat_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjMtnPat_FL_13(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjMtnPat_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjMtnPat_FL_13        0

/**
 * Signal RdrObjMtnPat_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjMtnPat_FL_13          0

/**
 * Signal RdrObjMtnPat_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjMtnPat_FL_13          3

/**
 * Signal RdrObjMtnPat_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjMtnPat_FL_13          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjID_FL_13 Signal RdrObjID_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjID_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjID_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjID_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjID_FL_13              1, 0, 47, 7

/**
 * Signal RdrObjID_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjID_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjID_FL_13            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjID_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjID_FL_13(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjID_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjID_FL_13(buf, 0)

/**
 * Signal RdrObjID_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjID_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjID_FL_13            0

/**
 * Signal RdrObjID_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjID_FL_13              0

/**
 * Signal RdrObjID_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjID_FL_13              255

/**
 * Signal RdrObjID_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjID_FL_13              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjTyp_FL_13 Signal RdrObjTyp_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjTyp_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjTyp_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjTyp_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjTyp_FL_13             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjTyp_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjTyp_FL_13           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjTyp_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjTyp_FL_13(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjTyp_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjTyp_FL_13(buf, 0)

/**
 * Signal RdrObjTyp_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjTyp_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjTyp_FL_13           0

/**
 * Signal RdrObjTyp_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjTyp_FL_13             0

/**
 * Signal RdrObjTyp_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjTyp_FL_13             3

/**
 * Signal RdrObjTyp_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjTyp_FL_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AAh_RdrObjDy_FL_13 Signal RdrObjDy_FL_13 of Message SRR_FL_3AAh (0x3aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AAh
 * @{
 */

/**
 * Signal RdrObjDy_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AAh_RdrObjDy_FL_13 and \ref GET_SRR_FL_3AAh_RdrObjDy_FL_13 instead.
 */
#define SIG_SRR_FL_3AAh_RdrObjDy_FL_13              1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AAh_RdrObjDy_FL_13 or \ref INIT_SRR_FL_3AAh instead.
 */
#define SETUP_SRR_FL_3AAh_RdrObjDy_FL_13            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AAh_RdrObjDy_FL_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AAh_RdrObjDy_FL_13(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AAh_RdrObjDy_FL_13(buf) \
	SET_SRR_FL_3AAh_RdrObjDy_FL_13(buf, 0)

/**
 * Signal RdrObjDy_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AAh_RdrObjDy_FL_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_13 raw initial value.
 */
#define START_SRR_FL_3AAh_RdrObjDy_FL_13            0

/**
 * Signal RdrObjDy_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3AAh_RdrObjDy_FL_13              0

/**
 * Signal RdrObjDy_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3AAh_RdrObjDy_FL_13              2046

/**
 * Signal RdrObjDy_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3AAh_RdrObjDy_FL_13              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjChks2_FL_13 Signal RdrObjChks2_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjChks2_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjChks2_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjChks2_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjChks2_FL_13           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjChks2_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjChks2_FL_13         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjChks2_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjChks2_FL_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjChks2_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjChks2_FL_13(buf, 0)

/**
 * Signal RdrObjChks2_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjChks2_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjChks2_FL_13         0

/**
 * Signal RdrObjChks2_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjChks2_FL_13           0

/**
 * Signal RdrObjChks2_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjChks2_FL_13           255

/**
 * Signal RdrObjChks2_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjChks2_FL_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjDx_FL_13 Signal RdrObjDx_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjDx_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjDx_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjDx_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjDx_FL_13              1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjDx_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjDx_FL_13            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjDx_FL_13(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjDx_FL_13(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjDx_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjDx_FL_13(buf, 0)

/**
 * Signal RdrObjDx_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjDx_FL_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjDx_FL_13            0

/**
 * Signal RdrObjDx_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjDx_FL_13              0

/**
 * Signal RdrObjDx_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjDx_FL_13              2540

/**
 * Signal RdrObjDx_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjDx_FL_13              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjTiAlv_FL_13 Signal RdrObjTiAlv_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjTiAlv_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjTiAlv_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjTiAlv_FL_13           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjTiAlv_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjTiAlv_FL_13         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjTiAlv_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjTiAlv_FL_13(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjTiAlv_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjTiAlv_FL_13(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjTiAlv_FL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjTiAlv_FL_13         0

/**
 * Signal RdrObjTiAlv_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjTiAlv_FL_13           0

/**
 * Signal RdrObjTiAlv_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjTiAlv_FL_13           127

/**
 * Signal RdrObjTiAlv_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjTiAlv_FL_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjVy_FL_13 Signal RdrObjVy_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjVy_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjVy_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjVy_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjVy_FL_13              1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjVy_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjVy_FL_13            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjVy_FL_13(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjVy_FL_13(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjVy_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjVy_FL_13(buf, 0)

/**
 * Signal RdrObjVy_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjVy_FL_13(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjVy_FL_13            0

/**
 * Signal RdrObjVy_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjVy_FL_13              0

/**
 * Signal RdrObjVy_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjVy_FL_13              1023

/**
 * Signal RdrObjVy_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjVy_FL_13              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjVx_FL_13 Signal RdrObjVx_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjVx_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjVx_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjVx_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjVx_FL_13              1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjVx_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjVx_FL_13            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjVx_FL_13(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjVx_FL_13(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjVx_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjVx_FL_13(buf, 0)

/**
 * Signal RdrObjVx_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjVx_FL_13(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjVx_FL_13            0

/**
 * Signal RdrObjVx_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjVx_FL_13              0

/**
 * Signal RdrObjVx_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjVx_FL_13              1023

/**
 * Signal RdrObjVx_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjVx_FL_13              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjWth_FL_13 Signal RdrObjWth_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjWth_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjWth_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjWth_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjWth_FL_13             1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjWth_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjWth_FL_13           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjWth_FL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjWth_FL_13(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjWth_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjWth_FL_13(buf, 0)

/**
 * Signal RdrObjWth_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjWth_FL_13(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjWth_FL_13           0

/**
 * Signal RdrObjWth_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjWth_FL_13             0

/**
 * Signal RdrObjWth_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjWth_FL_13             50

/**
 * Signal RdrObjWth_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjWth_FL_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ABh_RdrObjHeading_FL_13 Signal RdrObjHeading_FL_13 of Message SRR_FL_3ABh (0x3ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ABh
 * @{
 */

/**
 * Signal RdrObjHeading_FL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ABh_RdrObjHeading_FL_13 and \ref GET_SRR_FL_3ABh_RdrObjHeading_FL_13 instead.
 */
#define SIG_SRR_FL_3ABh_RdrObjHeading_FL_13         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ABh_RdrObjHeading_FL_13 or \ref INIT_SRR_FL_3ABh instead.
 */
#define SETUP_SRR_FL_3ABh_RdrObjHeading_FL_13       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ABh_RdrObjHeading_FL_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ABh_RdrObjHeading_FL_13(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ABh_RdrObjHeading_FL_13(buf) \
	SET_SRR_FL_3ABh_RdrObjHeading_FL_13(buf, 0)

/**
 * Signal RdrObjHeading_FL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ABh_RdrObjHeading_FL_13(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_13 raw initial value.
 */
#define START_SRR_FL_3ABh_RdrObjHeading_FL_13       0

/**
 * Signal RdrObjHeading_FL_13 raw minimum value.
 */
#define MIN_SRR_FL_3ABh_RdrObjHeading_FL_13         0

/**
 * Signal RdrObjHeading_FL_13 raw maximum value.
 */
#define MAX_SRR_FL_3ABh_RdrObjHeading_FL_13         360

/**
 * Signal RdrObjHeading_FL_13 raw offset value.
 */
#define OFF_SRR_FL_3ABh_RdrObjHeading_FL_13         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjChks_FL_14 Signal RdrObjChks_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjChks_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjChks_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjChks_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjChks_FL_14            1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjChks_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjChks_FL_14          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjChks_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjChks_FL_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjChks_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjChks_FL_14(buf, 0)

/**
 * Signal RdrObjChks_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjChks_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjChks_FL_14          0

/**
 * Signal RdrObjChks_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjChks_FL_14            0

/**
 * Signal RdrObjChks_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjChks_FL_14            255

/**
 * Signal RdrObjChks_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjChks_FL_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjCntr_FL_14 Signal RdrObjCntr_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjCntr_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjCntr_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjCntr_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjCntr_FL_14            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjCntr_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjCntr_FL_14          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjCntr_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjCntr_FL_14(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjCntr_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjCntr_FL_14(buf, 0)

/**
 * Signal RdrObjCntr_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjCntr_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjCntr_FL_14          0

/**
 * Signal RdrObjCntr_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjCntr_FL_14            0

/**
 * Signal RdrObjCntr_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjCntr_FL_14            15

/**
 * Signal RdrObjCntr_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjCntr_FL_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjAy_FL_14 Signal RdrObjAy_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjAy_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjAy_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjAy_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjAy_FL_14              1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjAy_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjAy_FL_14            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjAy_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjAy_FL_14(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjAy_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjAy_FL_14(buf, 0)

/**
 * Signal RdrObjAy_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjAy_FL_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjAy_FL_14            0

/**
 * Signal RdrObjAy_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjAy_FL_14              0

/**
 * Signal RdrObjAy_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjAy_FL_14              128

/**
 * Signal RdrObjAy_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjAy_FL_14              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjAx_FL_14 Signal RdrObjAx_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjAx_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjAx_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjAx_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjAx_FL_14              1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjAx_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjAx_FL_14            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjAx_FL_14(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjAx_FL_14(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjAx_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjAx_FL_14(buf, 0)

/**
 * Signal RdrObjAx_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjAx_FL_14(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjAx_FL_14            0

/**
 * Signal RdrObjAx_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjAx_FL_14              0

/**
 * Signal RdrObjAx_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjAx_FL_14              512

/**
 * Signal RdrObjAx_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjAx_FL_14              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjCoast_FL_14 Signal RdrObjCoast_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjCoast_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjCoast_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjCoast_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjCoast_FL_14           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjCoast_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjCoast_FL_14         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjCoast_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjCoast_FL_14(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjCoast_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjCoast_FL_14(buf, 0)

/**
 * Signal RdrObjCoast_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjCoast_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjCoast_FL_14         0

/**
 * Signal RdrObjCoast_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjCoast_FL_14           0

/**
 * Signal RdrObjCoast_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjCoast_FL_14           1

/**
 * Signal RdrObjCoast_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjCoast_FL_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjConf_FL_14 Signal RdrObjConf_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjConf_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjConf_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjConf_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjConf_FL_14            1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjConf_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjConf_FL_14          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjConf_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjConf_FL_14(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjConf_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjConf_FL_14(buf, 0)

/**
 * Signal RdrObjConf_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjConf_FL_14(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjConf_FL_14          0

/**
 * Signal RdrObjConf_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjConf_FL_14            0

/**
 * Signal RdrObjConf_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjConf_FL_14            14

/**
 * Signal RdrObjConf_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjConf_FL_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjMtnPat_FL_14 Signal RdrObjMtnPat_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjMtnPat_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjMtnPat_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjMtnPat_FL_14          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjMtnPat_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjMtnPat_FL_14        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjMtnPat_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjMtnPat_FL_14(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjMtnPat_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjMtnPat_FL_14(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjMtnPat_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjMtnPat_FL_14        0

/**
 * Signal RdrObjMtnPat_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjMtnPat_FL_14          0

/**
 * Signal RdrObjMtnPat_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjMtnPat_FL_14          3

/**
 * Signal RdrObjMtnPat_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjMtnPat_FL_14          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjID_FL_14 Signal RdrObjID_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjID_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjID_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjID_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjID_FL_14              1, 0, 47, 7

/**
 * Signal RdrObjID_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjID_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjID_FL_14            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjID_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjID_FL_14(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjID_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjID_FL_14(buf, 0)

/**
 * Signal RdrObjID_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjID_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjID_FL_14            0

/**
 * Signal RdrObjID_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjID_FL_14              0

/**
 * Signal RdrObjID_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjID_FL_14              255

/**
 * Signal RdrObjID_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjID_FL_14              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjTyp_FL_14 Signal RdrObjTyp_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjTyp_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjTyp_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjTyp_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjTyp_FL_14             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjTyp_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjTyp_FL_14           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjTyp_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjTyp_FL_14(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjTyp_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjTyp_FL_14(buf, 0)

/**
 * Signal RdrObjTyp_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjTyp_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjTyp_FL_14           0

/**
 * Signal RdrObjTyp_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjTyp_FL_14             0

/**
 * Signal RdrObjTyp_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjTyp_FL_14             3

/**
 * Signal RdrObjTyp_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjTyp_FL_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ACh_RdrObjDy_FL_14 Signal RdrObjDy_FL_14 of Message SRR_FL_3ACh (0x3ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ACh
 * @{
 */

/**
 * Signal RdrObjDy_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ACh_RdrObjDy_FL_14 and \ref GET_SRR_FL_3ACh_RdrObjDy_FL_14 instead.
 */
#define SIG_SRR_FL_3ACh_RdrObjDy_FL_14              1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ACh_RdrObjDy_FL_14 or \ref INIT_SRR_FL_3ACh instead.
 */
#define SETUP_SRR_FL_3ACh_RdrObjDy_FL_14            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ACh_RdrObjDy_FL_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ACh_RdrObjDy_FL_14(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ACh_RdrObjDy_FL_14(buf) \
	SET_SRR_FL_3ACh_RdrObjDy_FL_14(buf, 0)

/**
 * Signal RdrObjDy_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ACh_RdrObjDy_FL_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_14 raw initial value.
 */
#define START_SRR_FL_3ACh_RdrObjDy_FL_14            0

/**
 * Signal RdrObjDy_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ACh_RdrObjDy_FL_14              0

/**
 * Signal RdrObjDy_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ACh_RdrObjDy_FL_14              2046

/**
 * Signal RdrObjDy_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ACh_RdrObjDy_FL_14              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjChks2_FL_14 Signal RdrObjChks2_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjChks2_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjChks2_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjChks2_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjChks2_FL_14           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjChks2_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjChks2_FL_14         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjChks2_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjChks2_FL_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjChks2_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjChks2_FL_14(buf, 0)

/**
 * Signal RdrObjChks2_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjChks2_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjChks2_FL_14         0

/**
 * Signal RdrObjChks2_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjChks2_FL_14           0

/**
 * Signal RdrObjChks2_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjChks2_FL_14           255

/**
 * Signal RdrObjChks2_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjChks2_FL_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjDx_FL_14 Signal RdrObjDx_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjDx_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjDx_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjDx_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjDx_FL_14              1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjDx_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjDx_FL_14            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjDx_FL_14(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjDx_FL_14(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjDx_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjDx_FL_14(buf, 0)

/**
 * Signal RdrObjDx_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjDx_FL_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjDx_FL_14            0

/**
 * Signal RdrObjDx_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjDx_FL_14              0

/**
 * Signal RdrObjDx_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjDx_FL_14              2540

/**
 * Signal RdrObjDx_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjDx_FL_14              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjTiAlv_FL_14 Signal RdrObjTiAlv_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjTiAlv_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjTiAlv_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjTiAlv_FL_14           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjTiAlv_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjTiAlv_FL_14         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjTiAlv_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjTiAlv_FL_14(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjTiAlv_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjTiAlv_FL_14(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjTiAlv_FL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjTiAlv_FL_14         0

/**
 * Signal RdrObjTiAlv_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjTiAlv_FL_14           0

/**
 * Signal RdrObjTiAlv_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjTiAlv_FL_14           127

/**
 * Signal RdrObjTiAlv_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjTiAlv_FL_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjVy_FL_14 Signal RdrObjVy_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjVy_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjVy_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjVy_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjVy_FL_14              1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjVy_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjVy_FL_14            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjVy_FL_14(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjVy_FL_14(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjVy_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjVy_FL_14(buf, 0)

/**
 * Signal RdrObjVy_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjVy_FL_14(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjVy_FL_14            0

/**
 * Signal RdrObjVy_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjVy_FL_14              0

/**
 * Signal RdrObjVy_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjVy_FL_14              1023

/**
 * Signal RdrObjVy_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjVy_FL_14              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjVx_FL_14 Signal RdrObjVx_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjVx_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjVx_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjVx_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjVx_FL_14              1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjVx_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjVx_FL_14            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjVx_FL_14(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjVx_FL_14(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjVx_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjVx_FL_14(buf, 0)

/**
 * Signal RdrObjVx_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjVx_FL_14(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjVx_FL_14            0

/**
 * Signal RdrObjVx_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjVx_FL_14              0

/**
 * Signal RdrObjVx_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjVx_FL_14              1023

/**
 * Signal RdrObjVx_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjVx_FL_14              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjWth_FL_14 Signal RdrObjWth_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjWth_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjWth_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjWth_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjWth_FL_14             1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjWth_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjWth_FL_14           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjWth_FL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjWth_FL_14(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjWth_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjWth_FL_14(buf, 0)

/**
 * Signal RdrObjWth_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjWth_FL_14(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjWth_FL_14           0

/**
 * Signal RdrObjWth_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjWth_FL_14             0

/**
 * Signal RdrObjWth_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjWth_FL_14             50

/**
 * Signal RdrObjWth_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjWth_FL_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3ADh_RdrObjHeading_FL_14 Signal RdrObjHeading_FL_14 of Message SRR_FL_3ADh (0x3ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3ADh
 * @{
 */

/**
 * Signal RdrObjHeading_FL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3ADh_RdrObjHeading_FL_14 and \ref GET_SRR_FL_3ADh_RdrObjHeading_FL_14 instead.
 */
#define SIG_SRR_FL_3ADh_RdrObjHeading_FL_14         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3ADh_RdrObjHeading_FL_14 or \ref INIT_SRR_FL_3ADh instead.
 */
#define SETUP_SRR_FL_3ADh_RdrObjHeading_FL_14       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3ADh_RdrObjHeading_FL_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3ADh_RdrObjHeading_FL_14(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3ADh_RdrObjHeading_FL_14(buf) \
	SET_SRR_FL_3ADh_RdrObjHeading_FL_14(buf, 0)

/**
 * Signal RdrObjHeading_FL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3ADh_RdrObjHeading_FL_14(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_14 raw initial value.
 */
#define START_SRR_FL_3ADh_RdrObjHeading_FL_14       0

/**
 * Signal RdrObjHeading_FL_14 raw minimum value.
 */
#define MIN_SRR_FL_3ADh_RdrObjHeading_FL_14         0

/**
 * Signal RdrObjHeading_FL_14 raw maximum value.
 */
#define MAX_SRR_FL_3ADh_RdrObjHeading_FL_14         360

/**
 * Signal RdrObjHeading_FL_14 raw offset value.
 */
#define OFF_SRR_FL_3ADh_RdrObjHeading_FL_14         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjChks_FL_15 Signal RdrObjChks_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjChks_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjChks_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjChks_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjChks_FL_15            1, 0, 7, 8

/**
 * Signal RdrObjChks_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjChks_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjChks_FL_15          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjChks_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjChks_FL_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjChks_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjChks_FL_15(buf, 0)

/**
 * Signal RdrObjChks_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjChks_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjChks_FL_15          0

/**
 * Signal RdrObjChks_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjChks_FL_15            0

/**
 * Signal RdrObjChks_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjChks_FL_15            255

/**
 * Signal RdrObjChks_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjChks_FL_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjCntr_FL_15 Signal RdrObjCntr_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjCntr_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjCntr_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjCntr_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjCntr_FL_15            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjCntr_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjCntr_FL_15          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjCntr_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjCntr_FL_15(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjCntr_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjCntr_FL_15(buf, 0)

/**
 * Signal RdrObjCntr_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjCntr_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjCntr_FL_15          0

/**
 * Signal RdrObjCntr_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjCntr_FL_15            0

/**
 * Signal RdrObjCntr_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjCntr_FL_15            15

/**
 * Signal RdrObjCntr_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjCntr_FL_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjAy_FL_15 Signal RdrObjAy_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjAy_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjAy_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjAy_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjAy_FL_15              1, 0, 23, 7

/**
 * Signal RdrObjAy_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjAy_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjAy_FL_15            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjAy_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjAy_FL_15(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjAy_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjAy_FL_15(buf, 0)

/**
 * Signal RdrObjAy_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjAy_FL_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjAy_FL_15            0

/**
 * Signal RdrObjAy_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjAy_FL_15              0

/**
 * Signal RdrObjAy_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjAy_FL_15              128

/**
 * Signal RdrObjAy_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjAy_FL_15              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjAx_FL_15 Signal RdrObjAx_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjAx_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjAx_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjAx_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjAx_FL_15              1, 0, 16, 9

/**
 * Signal RdrObjAx_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjAx_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjAx_FL_15            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjAx_FL_15(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjAx_FL_15(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjAx_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjAx_FL_15(buf, 0)

/**
 * Signal RdrObjAx_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjAx_FL_15(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjAx_FL_15            0

/**
 * Signal RdrObjAx_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjAx_FL_15              0

/**
 * Signal RdrObjAx_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjAx_FL_15              512

/**
 * Signal RdrObjAx_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjAx_FL_15              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjCoast_FL_15 Signal RdrObjCoast_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjCoast_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjCoast_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjCoast_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjCoast_FL_15           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjCoast_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjCoast_FL_15         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjCoast_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjCoast_FL_15(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjCoast_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjCoast_FL_15(buf, 0)

/**
 * Signal RdrObjCoast_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjCoast_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjCoast_FL_15         0

/**
 * Signal RdrObjCoast_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjCoast_FL_15           0

/**
 * Signal RdrObjCoast_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjCoast_FL_15           1

/**
 * Signal RdrObjCoast_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjCoast_FL_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjConf_FL_15 Signal RdrObjConf_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjConf_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjConf_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjConf_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjConf_FL_15            1, 0, 38, 4

/**
 * Signal RdrObjConf_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjConf_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjConf_FL_15          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjConf_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjConf_FL_15(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjConf_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjConf_FL_15(buf, 0)

/**
 * Signal RdrObjConf_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjConf_FL_15(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjConf_FL_15          0

/**
 * Signal RdrObjConf_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjConf_FL_15            0

/**
 * Signal RdrObjConf_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjConf_FL_15            14

/**
 * Signal RdrObjConf_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjConf_FL_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjMtnPat_FL_15 Signal RdrObjMtnPat_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjMtnPat_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjMtnPat_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjMtnPat_FL_15          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjMtnPat_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjMtnPat_FL_15        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjMtnPat_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjMtnPat_FL_15(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjMtnPat_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjMtnPat_FL_15(buf, 0)

/**
 * Signal RdrObjMtnPat_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjMtnPat_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjMtnPat_FL_15        0

/**
 * Signal RdrObjMtnPat_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjMtnPat_FL_15          0

/**
 * Signal RdrObjMtnPat_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjMtnPat_FL_15          3

/**
 * Signal RdrObjMtnPat_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjMtnPat_FL_15          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjID_FL_15 Signal RdrObjID_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjID_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjID_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjID_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjID_FL_15              1, 0, 47, 7

/**
 * Signal RdrObjID_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjID_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjID_FL_15            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjID_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjID_FL_15(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjID_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjID_FL_15(buf, 0)

/**
 * Signal RdrObjID_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjID_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjID_FL_15            0

/**
 * Signal RdrObjID_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjID_FL_15              0

/**
 * Signal RdrObjID_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjID_FL_15              255

/**
 * Signal RdrObjID_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjID_FL_15              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjTyp_FL_15 Signal RdrObjTyp_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjTyp_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjTyp_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjTyp_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjTyp_FL_15             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjTyp_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjTyp_FL_15           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjTyp_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjTyp_FL_15(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjTyp_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjTyp_FL_15(buf, 0)

/**
 * Signal RdrObjTyp_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjTyp_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjTyp_FL_15           0

/**
 * Signal RdrObjTyp_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjTyp_FL_15             0

/**
 * Signal RdrObjTyp_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjTyp_FL_15             3

/**
 * Signal RdrObjTyp_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjTyp_FL_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AEh_RdrObjDy_FL_15 Signal RdrObjDy_FL_15 of Message SRR_FL_3AEh (0x3ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AEh
 * @{
 */

/**
 * Signal RdrObjDy_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AEh_RdrObjDy_FL_15 and \ref GET_SRR_FL_3AEh_RdrObjDy_FL_15 instead.
 */
#define SIG_SRR_FL_3AEh_RdrObjDy_FL_15              1, 0, 53, 11

/**
 * Signal RdrObjDy_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AEh_RdrObjDy_FL_15 or \ref INIT_SRR_FL_3AEh instead.
 */
#define SETUP_SRR_FL_3AEh_RdrObjDy_FL_15            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AEh_RdrObjDy_FL_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AEh_RdrObjDy_FL_15(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AEh_RdrObjDy_FL_15(buf) \
	SET_SRR_FL_3AEh_RdrObjDy_FL_15(buf, 0)

/**
 * Signal RdrObjDy_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AEh_RdrObjDy_FL_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FL_15 raw initial value.
 */
#define START_SRR_FL_3AEh_RdrObjDy_FL_15            0

/**
 * Signal RdrObjDy_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AEh_RdrObjDy_FL_15              0

/**
 * Signal RdrObjDy_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AEh_RdrObjDy_FL_15              2046

/**
 * Signal RdrObjDy_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AEh_RdrObjDy_FL_15              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjChks2_FL_15 Signal RdrObjChks2_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjChks2_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjChks2_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjChks2_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjChks2_FL_15           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjChks2_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjChks2_FL_15         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjChks2_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjChks2_FL_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjChks2_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjChks2_FL_15(buf, 0)

/**
 * Signal RdrObjChks2_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjChks2_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjChks2_FL_15         0

/**
 * Signal RdrObjChks2_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjChks2_FL_15           0

/**
 * Signal RdrObjChks2_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjChks2_FL_15           255

/**
 * Signal RdrObjChks2_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjChks2_FL_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjDx_FL_15 Signal RdrObjDx_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjDx_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjDx_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjDx_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjDx_FL_15              1, 0, 14, 12

/**
 * Signal RdrObjDx_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjDx_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjDx_FL_15            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjDx_FL_15(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjDx_FL_15(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjDx_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjDx_FL_15(buf, 0)

/**
 * Signal RdrObjDx_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjDx_FL_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjDx_FL_15            0

/**
 * Signal RdrObjDx_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjDx_FL_15              0

/**
 * Signal RdrObjDx_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjDx_FL_15              2540

/**
 * Signal RdrObjDx_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjDx_FL_15              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjTiAlv_FL_15 Signal RdrObjTiAlv_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjTiAlv_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjTiAlv_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjTiAlv_FL_15           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjTiAlv_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjTiAlv_FL_15         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjTiAlv_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjTiAlv_FL_15(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjTiAlv_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjTiAlv_FL_15(buf, 0)

/**
 * Signal RdrObjTiAlv_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjTiAlv_FL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjTiAlv_FL_15         0

/**
 * Signal RdrObjTiAlv_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjTiAlv_FL_15           0

/**
 * Signal RdrObjTiAlv_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjTiAlv_FL_15           127

/**
 * Signal RdrObjTiAlv_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjTiAlv_FL_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjVy_FL_15 Signal RdrObjVy_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjVy_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjVy_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjVy_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjVy_FL_15              1, 0, 27, 10

/**
 * Signal RdrObjVy_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjVy_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjVy_FL_15            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjVy_FL_15(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjVy_FL_15(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjVy_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjVy_FL_15(buf, 0)

/**
 * Signal RdrObjVy_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjVy_FL_15(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjVy_FL_15            0

/**
 * Signal RdrObjVy_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjVy_FL_15              0

/**
 * Signal RdrObjVy_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjVy_FL_15              1023

/**
 * Signal RdrObjVy_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjVy_FL_15              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjVx_FL_15 Signal RdrObjVx_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjVx_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjVx_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjVx_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjVx_FL_15              1, 0, 33, 10

/**
 * Signal RdrObjVx_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjVx_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjVx_FL_15            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjVx_FL_15(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjVx_FL_15(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjVx_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjVx_FL_15(buf, 0)

/**
 * Signal RdrObjVx_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjVx_FL_15(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjVx_FL_15            0

/**
 * Signal RdrObjVx_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjVx_FL_15              0

/**
 * Signal RdrObjVx_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjVx_FL_15              1023

/**
 * Signal RdrObjVx_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjVx_FL_15              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjWth_FL_15 Signal RdrObjWth_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjWth_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjWth_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjWth_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjWth_FL_15             1, 0, 55, 6

/**
 * Signal RdrObjWth_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjWth_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjWth_FL_15           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjWth_FL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjWth_FL_15(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjWth_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjWth_FL_15(buf, 0)

/**
 * Signal RdrObjWth_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjWth_FL_15(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjWth_FL_15           0

/**
 * Signal RdrObjWth_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjWth_FL_15             0

/**
 * Signal RdrObjWth_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjWth_FL_15             50

/**
 * Signal RdrObjWth_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjWth_FL_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FL_3AFh_RdrObjHeading_FL_15 Signal RdrObjHeading_FL_15 of Message SRR_FL_3AFh (0x3af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FL_3AFh
 * @{
 */

/**
 * Signal RdrObjHeading_FL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FL_3AFh_RdrObjHeading_FL_15 and \ref GET_SRR_FL_3AFh_RdrObjHeading_FL_15 instead.
 */
#define SIG_SRR_FL_3AFh_RdrObjHeading_FL_15         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FL_3AFh_RdrObjHeading_FL_15 or \ref INIT_SRR_FL_3AFh instead.
 */
#define SETUP_SRR_FL_3AFh_RdrObjHeading_FL_15       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FL_3AFh_RdrObjHeading_FL_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FL_3AFh_RdrObjHeading_FL_15(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FL_3AFh_RdrObjHeading_FL_15(buf) \
	SET_SRR_FL_3AFh_RdrObjHeading_FL_15(buf, 0)

/**
 * Signal RdrObjHeading_FL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FL_3AFh_RdrObjHeading_FL_15(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FL_15 raw initial value.
 */
#define START_SRR_FL_3AFh_RdrObjHeading_FL_15       0

/**
 * Signal RdrObjHeading_FL_15 raw minimum value.
 */
#define MIN_SRR_FL_3AFh_RdrObjHeading_FL_15         0

/**
 * Signal RdrObjHeading_FL_15 raw maximum value.
 */
#define MAX_SRR_FL_3AFh_RdrObjHeading_FL_15         360

/**
 * Signal RdrObjHeading_FL_15 raw offset value.
 */
#define OFF_SRR_FL_3AFh_RdrObjHeading_FL_15         -180

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Tester_705h_TesterDiagRequestData_SRR_FR Signal TesterDiagRequestData_SRR_FR of Message IECU_Tester_705h (0x705)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Tester_705h
 * @{
 */

/**
 * Signal TesterDiagRequestData_SRR_FR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Tester_705h_TesterDiagRequestData_SRR_FR and \ref GET_IECU_Tester_705h_TesterDiagRequestData_SRR_FR instead.
 */
#define SIG_IECU_Tester_705h_TesterDiagRequestData_SRR_FR        1, 0, 7, 64

/**
 * Signal TesterDiagRequestData_SRR_FR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Tester_705h_TesterDiagRequestData_SRR_FR or \ref INIT_IECU_Tester_705h instead.
 */
#define SETUP_IECU_Tester_705h_TesterDiagRequestData_SRR_FR      1, 0, 7, 64, 0

/**
 * Get signal TesterDiagRequestData_SRR_FR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Tester_705h_TesterDiagRequestData_SRR_FR(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TesterDiagRequestData_SRR_FR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Tester_705h_TesterDiagRequestData_SRR_FR(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TesterDiagRequestData_SRR_FR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Tester_705h_TesterDiagRequestData_SRR_FR(buf) \
	SET_IECU_Tester_705h_TesterDiagRequestData_SRR_FR(buf, 0)

/**
 * Signal TesterDiagRequestData_SRR_FR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Tester_705h_TesterDiagRequestData_SRR_FR(x, fmt) \
	((x) * fmt)

/**
 * Signal TesterDiagRequestData_SRR_FR raw initial value.
 */
#define START_IECU_Tester_705h_TesterDiagRequestData_SRR_FR      0

/**
 * Signal TesterDiagRequestData_SRR_FR raw minimum value.
 */
#define MIN_IECU_Tester_705h_TesterDiagRequestData_SRR_FR        0

/**
 * Signal TesterDiagRequestData_SRR_FR raw maximum value.
 */
#define MAX_IECU_Tester_705h_TesterDiagRequestData_SRR_FR        255

/**
 * Signal TesterDiagRequestData_SRR_FR raw offset value.
 */
#define OFF_IECU_Tester_705h_TesterDiagRequestData_SRR_FR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_785h_SRR_FRDiagResponseData Signal SRR_FRDiagResponseData of Message SRR_FR_785h (0x785)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_785h
 * @{
 */

/**
 * Signal SRR_FRDiagResponseData configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_785h_SRR_FRDiagResponseData and \ref GET_SRR_FR_785h_SRR_FRDiagResponseData instead.
 */
#define SIG_SRR_FR_785h_SRR_FRDiagResponseData        1, 0, 7, 64

/**
 * Signal SRR_FRDiagResponseData setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_785h_SRR_FRDiagResponseData or \ref INIT_SRR_FR_785h instead.
 */
#define SETUP_SRR_FR_785h_SRR_FRDiagResponseData      1, 0, 7, 64, 0

/**
 * Get signal SRR_FRDiagResponseData from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_785h_SRR_FRDiagResponseData(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SRR_FRDiagResponseData in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_785h_SRR_FRDiagResponseData(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SRR_FRDiagResponseData in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_785h_SRR_FRDiagResponseData(buf) \
	SET_SRR_FR_785h_SRR_FRDiagResponseData(buf, 0)

/**
 * Signal SRR_FRDiagResponseData value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_785h_SRR_FRDiagResponseData(x, fmt) \
	((x) * fmt)

/**
 * Signal SRR_FRDiagResponseData raw initial value.
 */
#define START_SRR_FR_785h_SRR_FRDiagResponseData      0

/**
 * Signal SRR_FRDiagResponseData raw minimum value.
 */
#define MIN_SRR_FR_785h_SRR_FRDiagResponseData        0

/**
 * Signal SRR_FRDiagResponseData raw maximum value.
 */
#define MAX_SRR_FR_785h_SRR_FRDiagResponseData        255

/**
 * Signal SRR_FRDiagResponseData raw offset value.
 */
#define OFF_SRR_FR_785h_SRR_FRDiagResponseData        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B0h_RdrStsChks_RR Signal RdrStsChks_RR of Message SRR_FR_3B0h (0x3b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B0h
 * @{
 */

/**
 * Signal RdrStsChks_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B0h_RdrStsChks_RR and \ref GET_SRR_FR_3B0h_RdrStsChks_RR instead.
 */
#define SIG_SRR_FR_3B0h_RdrStsChks_RR               1, 0, 7, 8

/**
 * Signal RdrStsChks_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B0h_RdrStsChks_RR or \ref INIT_SRR_FR_3B0h instead.
 */
#define SETUP_SRR_FR_3B0h_RdrStsChks_RR             1, 0, 7, 8, 0

/**
 * Get signal RdrStsChks_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B0h_RdrStsChks_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsChks_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B0h_RdrStsChks_RR(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsChks_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B0h_RdrStsChks_RR(buf) \
	SET_SRR_FR_3B0h_RdrStsChks_RR(buf, 0)

/**
 * Signal RdrStsChks_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B0h_RdrStsChks_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsChks_RR raw initial value.
 */
#define START_SRR_FR_3B0h_RdrStsChks_RR             0

/**
 * Signal RdrStsChks_RR raw minimum value.
 */
#define MIN_SRR_FR_3B0h_RdrStsChks_RR               0

/**
 * Signal RdrStsChks_RR raw maximum value.
 */
#define MAX_SRR_FR_3B0h_RdrStsChks_RR               255

/**
 * Signal RdrStsChks_RR raw offset value.
 */
#define OFF_SRR_FR_3B0h_RdrStsChks_RR               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B0h_RdrStsCntr_RR Signal RdrStsCntr_RR of Message SRR_FR_3B0h (0x3b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B0h
 * @{
 */

/**
 * Signal RdrStsCntr_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B0h_RdrStsCntr_RR and \ref GET_SRR_FR_3B0h_RdrStsCntr_RR instead.
 */
#define SIG_SRR_FR_3B0h_RdrStsCntr_RR               1, 0, 15, 4

/**
 * Signal RdrStsCntr_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B0h_RdrStsCntr_RR or \ref INIT_SRR_FR_3B0h instead.
 */
#define SETUP_SRR_FR_3B0h_RdrStsCntr_RR             1, 0, 15, 4, 0

/**
 * Get signal RdrStsCntr_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B0h_RdrStsCntr_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsCntr_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B0h_RdrStsCntr_RR(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsCntr_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B0h_RdrStsCntr_RR(buf) \
	SET_SRR_FR_3B0h_RdrStsCntr_RR(buf, 0)

/**
 * Signal RdrStsCntr_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B0h_RdrStsCntr_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsCntr_RR raw initial value.
 */
#define START_SRR_FR_3B0h_RdrStsCntr_RR             0

/**
 * Signal RdrStsCntr_RR raw minimum value.
 */
#define MIN_SRR_FR_3B0h_RdrStsCntr_RR               0

/**
 * Signal RdrStsCntr_RR raw maximum value.
 */
#define MAX_SRR_FR_3B0h_RdrStsCntr_RR               15

/**
 * Signal RdrStsCntr_RR raw offset value.
 */
#define OFF_SRR_FR_3B0h_RdrStsCntr_RR               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B0h_RdrStsIfVersMajor_RR Signal RdrStsIfVersMajor_RR of Message SRR_FR_3B0h (0x3b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B0h
 * @{
 */

/**
 * Signal RdrStsIfVersMajor_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B0h_RdrStsIfVersMajor_RR and \ref GET_SRR_FR_3B0h_RdrStsIfVersMajor_RR instead.
 */
#define SIG_SRR_FR_3B0h_RdrStsIfVersMajor_RR        1, 0, 11, 4

/**
 * Signal RdrStsIfVersMajor_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B0h_RdrStsIfVersMajor_RR or \ref INIT_SRR_FR_3B0h instead.
 */
#define SETUP_SRR_FR_3B0h_RdrStsIfVersMajor_RR      1, 0, 11, 4, 0

/**
 * Get signal RdrStsIfVersMajor_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B0h_RdrStsIfVersMajor_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMajor_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B0h_RdrStsIfVersMajor_RR(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMajor_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B0h_RdrStsIfVersMajor_RR(buf) \
	SET_SRR_FR_3B0h_RdrStsIfVersMajor_RR(buf, 0)

/**
 * Signal RdrStsIfVersMajor_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B0h_RdrStsIfVersMajor_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMajor_RR raw initial value.
 */
#define START_SRR_FR_3B0h_RdrStsIfVersMajor_RR      0

/**
 * Signal RdrStsIfVersMajor_RR raw minimum value.
 */
#define MIN_SRR_FR_3B0h_RdrStsIfVersMajor_RR        0

/**
 * Signal RdrStsIfVersMajor_RR raw maximum value.
 */
#define MAX_SRR_FR_3B0h_RdrStsIfVersMajor_RR        15

/**
 * Signal RdrStsIfVersMajor_RR raw offset value.
 */
#define OFF_SRR_FR_3B0h_RdrStsIfVersMajor_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B0h_RdrStsIfVersMiddle_RR Signal RdrStsIfVersMiddle_RR of Message SRR_FR_3B0h (0x3b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B0h
 * @{
 */

/**
 * Signal RdrStsIfVersMiddle_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B0h_RdrStsIfVersMiddle_RR and \ref GET_SRR_FR_3B0h_RdrStsIfVersMiddle_RR instead.
 */
#define SIG_SRR_FR_3B0h_RdrStsIfVersMiddle_RR        1, 0, 23, 4

/**
 * Signal RdrStsIfVersMiddle_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B0h_RdrStsIfVersMiddle_RR or \ref INIT_SRR_FR_3B0h instead.
 */
#define SETUP_SRR_FR_3B0h_RdrStsIfVersMiddle_RR      1, 0, 23, 4, 0

/**
 * Get signal RdrStsIfVersMiddle_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B0h_RdrStsIfVersMiddle_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMiddle_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B0h_RdrStsIfVersMiddle_RR(buf, val) { \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsIfVersMiddle_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B0h_RdrStsIfVersMiddle_RR(buf) \
	SET_SRR_FR_3B0h_RdrStsIfVersMiddle_RR(buf, 0)

/**
 * Signal RdrStsIfVersMiddle_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B0h_RdrStsIfVersMiddle_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMiddle_RR raw initial value.
 */
#define START_SRR_FR_3B0h_RdrStsIfVersMiddle_RR      0

/**
 * Signal RdrStsIfVersMiddle_RR raw minimum value.
 */
#define MIN_SRR_FR_3B0h_RdrStsIfVersMiddle_RR        0

/**
 * Signal RdrStsIfVersMiddle_RR raw maximum value.
 */
#define MAX_SRR_FR_3B0h_RdrStsIfVersMiddle_RR        15

/**
 * Signal RdrStsIfVersMiddle_RR raw offset value.
 */
#define OFF_SRR_FR_3B0h_RdrStsIfVersMiddle_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B0h_RdrStsIfVersMinor_RR Signal RdrStsIfVersMinor_RR of Message SRR_FR_3B0h (0x3b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B0h
 * @{
 */

/**
 * Signal RdrStsIfVersMinor_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B0h_RdrStsIfVersMinor_RR and \ref GET_SRR_FR_3B0h_RdrStsIfVersMinor_RR instead.
 */
#define SIG_SRR_FR_3B0h_RdrStsIfVersMinor_RR        1, 0, 19, 4

/**
 * Signal RdrStsIfVersMinor_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B0h_RdrStsIfVersMinor_RR or \ref INIT_SRR_FR_3B0h instead.
 */
#define SETUP_SRR_FR_3B0h_RdrStsIfVersMinor_RR      1, 0, 19, 4, 0

/**
 * Get signal RdrStsIfVersMinor_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B0h_RdrStsIfVersMinor_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMinor_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B0h_RdrStsIfVersMinor_RR(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMinor_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B0h_RdrStsIfVersMinor_RR(buf) \
	SET_SRR_FR_3B0h_RdrStsIfVersMinor_RR(buf, 0)

/**
 * Signal RdrStsIfVersMinor_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B0h_RdrStsIfVersMinor_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMinor_RR raw initial value.
 */
#define START_SRR_FR_3B0h_RdrStsIfVersMinor_RR      0

/**
 * Signal RdrStsIfVersMinor_RR raw minimum value.
 */
#define MIN_SRR_FR_3B0h_RdrStsIfVersMinor_RR        0

/**
 * Signal RdrStsIfVersMinor_RR raw maximum value.
 */
#define MAX_SRR_FR_3B0h_RdrStsIfVersMinor_RR        15

/**
 * Signal RdrStsIfVersMinor_RR raw offset value.
 */
#define OFF_SRR_FR_3B0h_RdrStsIfVersMinor_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B0h_RdrStsTiStamp_RR Signal RdrStsTiStamp_RR of Message SRR_FR_3B0h (0x3b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B0h
 * @{
 */

/**
 * Signal RdrStsTiStamp_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B0h_RdrStsTiStamp_RR and \ref GET_SRR_FR_3B0h_RdrStsTiStamp_RR instead.
 */
#define SIG_SRR_FR_3B0h_RdrStsTiStamp_RR            1, 0, 31, 32

/**
 * Signal RdrStsTiStamp_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B0h_RdrStsTiStamp_RR or \ref INIT_SRR_FR_3B0h instead.
 */
#define SETUP_SRR_FR_3B0h_RdrStsTiStamp_RR          1, 0, 31, 32, 0

/**
 * Get signal RdrStsTiStamp_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B0h_RdrStsTiStamp_RR(buf) (0 \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsTiStamp_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B0h_RdrStsTiStamp_RR(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsTiStamp_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B0h_RdrStsTiStamp_RR(buf) \
	SET_SRR_FR_3B0h_RdrStsTiStamp_RR(buf, 0)

/**
 * Signal RdrStsTiStamp_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B0h_RdrStsTiStamp_RR(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal RdrStsTiStamp_RR raw initial value.
 */
#define START_SRR_FR_3B0h_RdrStsTiStamp_RR          0

/**
 * Signal RdrStsTiStamp_RR raw minimum value.
 */
#define MIN_SRR_FR_3B0h_RdrStsTiStamp_RR            0

/**
 * Signal RdrStsTiStamp_RR raw maximum value.
 */
#define MAX_SRR_FR_3B0h_RdrStsTiStamp_RR            4294967295

/**
 * Signal RdrStsTiStamp_RR raw offset value.
 */
#define OFF_SRR_FR_3B0h_RdrStsTiStamp_RR            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B1h_Genrl_SnsrLatency_RR Signal Genrl_SnsrLatency_RR of Message SRR_FR_3B1h (0x3b1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B1h
 * @{
 */

/**
 * Signal Genrl_SnsrLatency_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B1h_Genrl_SnsrLatency_RR and \ref GET_SRR_FR_3B1h_Genrl_SnsrLatency_RR instead.
 */
#define SIG_SRR_FR_3B1h_Genrl_SnsrLatency_RR        1, 0, 7, 7

/**
 * Signal Genrl_SnsrLatency_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B1h_Genrl_SnsrLatency_RR or \ref INIT_SRR_FR_3B1h instead.
 */
#define SETUP_SRR_FR_3B1h_Genrl_SnsrLatency_RR      1, 0, 7, 7, 0

/**
 * Get signal Genrl_SnsrLatency_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B1h_Genrl_SnsrLatency_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Genrl_SnsrLatency_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B1h_Genrl_SnsrLatency_RR(buf, val) { \
	buf[0] &= ~(0x7f << 1); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Genrl_SnsrLatency_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B1h_Genrl_SnsrLatency_RR(buf) \
	SET_SRR_FR_3B1h_Genrl_SnsrLatency_RR(buf, 0)

/**
 * Signal Genrl_SnsrLatency_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B1h_Genrl_SnsrLatency_RR(x, fmt) \
	((x) * fmt * 10)

/**
 * Signal Genrl_SnsrLatency_RR raw initial value.
 */
#define START_SRR_FR_3B1h_Genrl_SnsrLatency_RR      0

/**
 * Signal Genrl_SnsrLatency_RR raw minimum value.
 */
#define MIN_SRR_FR_3B1h_Genrl_SnsrLatency_RR        0

/**
 * Signal Genrl_SnsrLatency_RR raw maximum value.
 */
#define MAX_SRR_FR_3B1h_Genrl_SnsrLatency_RR        127

/**
 * Signal Genrl_SnsrLatency_RR raw offset value.
 */
#define OFF_SRR_FR_3B1h_Genrl_SnsrLatency_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B1h_RdrSysSts_RR Signal RdrSysSts_RR of Message SRR_FR_3B1h (0x3b1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B1h
 * @{
 */

/**
 * Signal RdrSysSts_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B1h_RdrSysSts_RR and \ref GET_SRR_FR_3B1h_RdrSysSts_RR instead.
 */
#define SIG_SRR_FR_3B1h_RdrSysSts_RR                1, 0, 15, 3

/**
 * Signal RdrSysSts_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B1h_RdrSysSts_RR or \ref INIT_SRR_FR_3B1h instead.
 */
#define SETUP_SRR_FR_3B1h_RdrSysSts_RR              1, 0, 15, 3, 0

/**
 * Get signal RdrSysSts_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B1h_RdrSysSts_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 5) & 0x07) << 0) \
)

/**
 * Set signal RdrSysSts_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B1h_RdrSysSts_RR(buf, val) { \
	buf[1] &= ~(0x07 << 5); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal RdrSysSts_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B1h_RdrSysSts_RR(buf) \
	SET_SRR_FR_3B1h_RdrSysSts_RR(buf, 0)

/**
 * Signal RdrSysSts_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B1h_RdrSysSts_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrSysSts_RR raw initial value.
 */
#define START_SRR_FR_3B1h_RdrSysSts_RR              0

/**
 * Signal RdrSysSts_RR raw minimum value.
 */
#define MIN_SRR_FR_3B1h_RdrSysSts_RR                0

/**
 * Signal RdrSysSts_RR raw maximum value.
 */
#define MAX_SRR_FR_3B1h_RdrSysSts_RR                7

/**
 * Signal RdrSysSts_RR raw offset value.
 */
#define OFF_SRR_FR_3B1h_RdrSysSts_RR                0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjChks_FR_1 Signal RdrObjChks_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjChks_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjChks_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjChks_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjChks_FR_1             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjChks_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjChks_FR_1           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjChks_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjChks_FR_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjChks_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjChks_FR_1(buf, 0)

/**
 * Signal RdrObjChks_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjChks_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjChks_FR_1           0

/**
 * Signal RdrObjChks_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjChks_FR_1             0

/**
 * Signal RdrObjChks_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjChks_FR_1             255

/**
 * Signal RdrObjChks_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjChks_FR_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjCntr_FR_1 Signal RdrObjCntr_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjCntr_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjCntr_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjCntr_FR_1             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjCntr_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjCntr_FR_1           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjCntr_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjCntr_FR_1(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjCntr_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjCntr_FR_1(buf, 0)

/**
 * Signal RdrObjCntr_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjCntr_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjCntr_FR_1           0

/**
 * Signal RdrObjCntr_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjCntr_FR_1             0

/**
 * Signal RdrObjCntr_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjCntr_FR_1             15

/**
 * Signal RdrObjCntr_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjCntr_FR_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjAy_FR_1 Signal RdrObjAy_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjAy_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjAy_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjAy_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjAy_FR_1               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjAy_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjAy_FR_1             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjAy_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjAy_FR_1(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjAy_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjAy_FR_1(buf, 0)

/**
 * Signal RdrObjAy_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjAy_FR_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjAy_FR_1             0

/**
 * Signal RdrObjAy_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjAy_FR_1               0

/**
 * Signal RdrObjAy_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjAy_FR_1               128

/**
 * Signal RdrObjAy_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjAy_FR_1               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjAx_FR_1 Signal RdrObjAx_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjAx_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjAx_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjAx_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjAx_FR_1               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjAx_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjAx_FR_1             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjAx_FR_1(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjAx_FR_1(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjAx_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjAx_FR_1(buf, 0)

/**
 * Signal RdrObjAx_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjAx_FR_1(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjAx_FR_1             0

/**
 * Signal RdrObjAx_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjAx_FR_1               0

/**
 * Signal RdrObjAx_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjAx_FR_1               512

/**
 * Signal RdrObjAx_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjAx_FR_1               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjCoast_FR_1 Signal RdrObjCoast_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjCoast_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjCoast_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjCoast_FR_1            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjCoast_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjCoast_FR_1          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjCoast_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjCoast_FR_1(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjCoast_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjCoast_FR_1(buf, 0)

/**
 * Signal RdrObjCoast_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjCoast_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjCoast_FR_1          0

/**
 * Signal RdrObjCoast_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjCoast_FR_1            0

/**
 * Signal RdrObjCoast_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjCoast_FR_1            1

/**
 * Signal RdrObjCoast_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjCoast_FR_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjConf_FR_1 Signal RdrObjConf_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjConf_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjConf_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjConf_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjConf_FR_1             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjConf_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjConf_FR_1           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjConf_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjConf_FR_1(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjConf_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjConf_FR_1(buf, 0)

/**
 * Signal RdrObjConf_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjConf_FR_1(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjConf_FR_1           0

/**
 * Signal RdrObjConf_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjConf_FR_1             0

/**
 * Signal RdrObjConf_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjConf_FR_1             14

/**
 * Signal RdrObjConf_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjConf_FR_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjMtnPat_FR_1 Signal RdrObjMtnPat_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjMtnPat_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjMtnPat_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjMtnPat_FR_1           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjMtnPat_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjMtnPat_FR_1         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjMtnPat_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjMtnPat_FR_1(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjMtnPat_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjMtnPat_FR_1(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjMtnPat_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjMtnPat_FR_1         0

/**
 * Signal RdrObjMtnPat_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjMtnPat_FR_1           0

/**
 * Signal RdrObjMtnPat_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjMtnPat_FR_1           3

/**
 * Signal RdrObjMtnPat_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjMtnPat_FR_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjID_FR_1 Signal RdrObjID_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjID_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjID_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjID_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjID_FR_1               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjID_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjID_FR_1             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjID_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjID_FR_1(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjID_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjID_FR_1(buf, 0)

/**
 * Signal RdrObjID_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjID_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjID_FR_1             0

/**
 * Signal RdrObjID_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjID_FR_1               0

/**
 * Signal RdrObjID_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjID_FR_1               255

/**
 * Signal RdrObjID_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjID_FR_1               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjTyp_FR_1 Signal RdrObjTyp_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjTyp_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjTyp_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjTyp_FR_1              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjTyp_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjTyp_FR_1            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjTyp_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjTyp_FR_1(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjTyp_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjTyp_FR_1(buf, 0)

/**
 * Signal RdrObjTyp_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjTyp_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjTyp_FR_1            0

/**
 * Signal RdrObjTyp_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjTyp_FR_1              0

/**
 * Signal RdrObjTyp_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjTyp_FR_1              3

/**
 * Signal RdrObjTyp_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjTyp_FR_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B2h_RdrObjDy_FR_1 Signal RdrObjDy_FR_1 of Message SRR_FR_3B2h (0x3b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B2h
 * @{
 */

/**
 * Signal RdrObjDy_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B2h_RdrObjDy_FR_1 and \ref GET_SRR_FR_3B2h_RdrObjDy_FR_1 instead.
 */
#define SIG_SRR_FR_3B2h_RdrObjDy_FR_1               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B2h_RdrObjDy_FR_1 or \ref INIT_SRR_FR_3B2h instead.
 */
#define SETUP_SRR_FR_3B2h_RdrObjDy_FR_1             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B2h_RdrObjDy_FR_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B2h_RdrObjDy_FR_1(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B2h_RdrObjDy_FR_1(buf) \
	SET_SRR_FR_3B2h_RdrObjDy_FR_1(buf, 0)

/**
 * Signal RdrObjDy_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B2h_RdrObjDy_FR_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_1 raw initial value.
 */
#define START_SRR_FR_3B2h_RdrObjDy_FR_1             0

/**
 * Signal RdrObjDy_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B2h_RdrObjDy_FR_1               0

/**
 * Signal RdrObjDy_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B2h_RdrObjDy_FR_1               2046

/**
 * Signal RdrObjDy_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B2h_RdrObjDy_FR_1               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjChks2_FR_1 Signal RdrObjChks2_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjChks2_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjChks2_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjChks2_FR_1            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjChks2_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjChks2_FR_1          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjChks2_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjChks2_FR_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjChks2_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjChks2_FR_1(buf, 0)

/**
 * Signal RdrObjChks2_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjChks2_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjChks2_FR_1          0

/**
 * Signal RdrObjChks2_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjChks2_FR_1            0

/**
 * Signal RdrObjChks2_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjChks2_FR_1            255

/**
 * Signal RdrObjChks2_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjChks2_FR_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjDx_FR_1 Signal RdrObjDx_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjDx_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjDx_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjDx_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjDx_FR_1               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjDx_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjDx_FR_1             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjDx_FR_1(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjDx_FR_1(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjDx_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjDx_FR_1(buf, 0)

/**
 * Signal RdrObjDx_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjDx_FR_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjDx_FR_1             0

/**
 * Signal RdrObjDx_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjDx_FR_1               0

/**
 * Signal RdrObjDx_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjDx_FR_1               2540

/**
 * Signal RdrObjDx_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjDx_FR_1               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjTiAlv_FR_1 Signal RdrObjTiAlv_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjTiAlv_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjTiAlv_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjTiAlv_FR_1            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjTiAlv_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjTiAlv_FR_1          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjTiAlv_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjTiAlv_FR_1(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjTiAlv_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjTiAlv_FR_1(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjTiAlv_FR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjTiAlv_FR_1          0

/**
 * Signal RdrObjTiAlv_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjTiAlv_FR_1            0

/**
 * Signal RdrObjTiAlv_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjTiAlv_FR_1            127

/**
 * Signal RdrObjTiAlv_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjTiAlv_FR_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjVy_FR_1 Signal RdrObjVy_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjVy_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjVy_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjVy_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjVy_FR_1               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjVy_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjVy_FR_1             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjVy_FR_1(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjVy_FR_1(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjVy_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjVy_FR_1(buf, 0)

/**
 * Signal RdrObjVy_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjVy_FR_1(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjVy_FR_1             0

/**
 * Signal RdrObjVy_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjVy_FR_1               0

/**
 * Signal RdrObjVy_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjVy_FR_1               1023

/**
 * Signal RdrObjVy_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjVy_FR_1               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjVx_FR_1 Signal RdrObjVx_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjVx_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjVx_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjVx_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjVx_FR_1               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjVx_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjVx_FR_1             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjVx_FR_1(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjVx_FR_1(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjVx_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjVx_FR_1(buf, 0)

/**
 * Signal RdrObjVx_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjVx_FR_1(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjVx_FR_1             0

/**
 * Signal RdrObjVx_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjVx_FR_1               0

/**
 * Signal RdrObjVx_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjVx_FR_1               1023

/**
 * Signal RdrObjVx_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjVx_FR_1               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjWth_FR_1 Signal RdrObjWth_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjWth_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjWth_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjWth_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjWth_FR_1              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjWth_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjWth_FR_1            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjWth_FR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjWth_FR_1(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjWth_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjWth_FR_1(buf, 0)

/**
 * Signal RdrObjWth_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjWth_FR_1(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjWth_FR_1            0

/**
 * Signal RdrObjWth_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjWth_FR_1              0

/**
 * Signal RdrObjWth_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjWth_FR_1              50

/**
 * Signal RdrObjWth_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjWth_FR_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B3h_RdrObjHeading_FR_1 Signal RdrObjHeading_FR_1 of Message SRR_FR_3B3h (0x3b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B3h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B3h_RdrObjHeading_FR_1 and \ref GET_SRR_FR_3B3h_RdrObjHeading_FR_1 instead.
 */
#define SIG_SRR_FR_3B3h_RdrObjHeading_FR_1          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B3h_RdrObjHeading_FR_1 or \ref INIT_SRR_FR_3B3h instead.
 */
#define SETUP_SRR_FR_3B3h_RdrObjHeading_FR_1        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B3h_RdrObjHeading_FR_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B3h_RdrObjHeading_FR_1(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B3h_RdrObjHeading_FR_1(buf) \
	SET_SRR_FR_3B3h_RdrObjHeading_FR_1(buf, 0)

/**
 * Signal RdrObjHeading_FR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B3h_RdrObjHeading_FR_1(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_1 raw initial value.
 */
#define START_SRR_FR_3B3h_RdrObjHeading_FR_1        0

/**
 * Signal RdrObjHeading_FR_1 raw minimum value.
 */
#define MIN_SRR_FR_3B3h_RdrObjHeading_FR_1          0

/**
 * Signal RdrObjHeading_FR_1 raw maximum value.
 */
#define MAX_SRR_FR_3B3h_RdrObjHeading_FR_1          360

/**
 * Signal RdrObjHeading_FR_1 raw offset value.
 */
#define OFF_SRR_FR_3B3h_RdrObjHeading_FR_1          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjChks_FR_2 Signal RdrObjChks_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjChks_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjChks_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjChks_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjChks_FR_2             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjChks_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjChks_FR_2           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjChks_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjChks_FR_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjChks_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjChks_FR_2(buf, 0)

/**
 * Signal RdrObjChks_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjChks_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjChks_FR_2           0

/**
 * Signal RdrObjChks_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjChks_FR_2             0

/**
 * Signal RdrObjChks_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjChks_FR_2             255

/**
 * Signal RdrObjChks_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjChks_FR_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjCntr_FR_2 Signal RdrObjCntr_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjCntr_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjCntr_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjCntr_FR_2             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjCntr_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjCntr_FR_2           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjCntr_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjCntr_FR_2(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjCntr_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjCntr_FR_2(buf, 0)

/**
 * Signal RdrObjCntr_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjCntr_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjCntr_FR_2           0

/**
 * Signal RdrObjCntr_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjCntr_FR_2             0

/**
 * Signal RdrObjCntr_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjCntr_FR_2             15

/**
 * Signal RdrObjCntr_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjCntr_FR_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjAy_FR_2 Signal RdrObjAy_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjAy_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjAy_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjAy_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjAy_FR_2               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjAy_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjAy_FR_2             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjAy_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjAy_FR_2(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjAy_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjAy_FR_2(buf, 0)

/**
 * Signal RdrObjAy_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjAy_FR_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjAy_FR_2             0

/**
 * Signal RdrObjAy_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjAy_FR_2               0

/**
 * Signal RdrObjAy_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjAy_FR_2               128

/**
 * Signal RdrObjAy_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjAy_FR_2               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjAx_FR_2 Signal RdrObjAx_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjAx_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjAx_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjAx_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjAx_FR_2               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjAx_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjAx_FR_2             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjAx_FR_2(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjAx_FR_2(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjAx_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjAx_FR_2(buf, 0)

/**
 * Signal RdrObjAx_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjAx_FR_2(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjAx_FR_2             0

/**
 * Signal RdrObjAx_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjAx_FR_2               0

/**
 * Signal RdrObjAx_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjAx_FR_2               512

/**
 * Signal RdrObjAx_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjAx_FR_2               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjCoast_FR_2 Signal RdrObjCoast_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjCoast_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjCoast_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjCoast_FR_2            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjCoast_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjCoast_FR_2          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjCoast_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjCoast_FR_2(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjCoast_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjCoast_FR_2(buf, 0)

/**
 * Signal RdrObjCoast_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjCoast_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjCoast_FR_2          0

/**
 * Signal RdrObjCoast_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjCoast_FR_2            0

/**
 * Signal RdrObjCoast_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjCoast_FR_2            1

/**
 * Signal RdrObjCoast_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjCoast_FR_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjConf_FR_2 Signal RdrObjConf_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjConf_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjConf_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjConf_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjConf_FR_2             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjConf_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjConf_FR_2           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjConf_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjConf_FR_2(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjConf_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjConf_FR_2(buf, 0)

/**
 * Signal RdrObjConf_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjConf_FR_2(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjConf_FR_2           0

/**
 * Signal RdrObjConf_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjConf_FR_2             0

/**
 * Signal RdrObjConf_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjConf_FR_2             14

/**
 * Signal RdrObjConf_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjConf_FR_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjMtnPat_FR_2 Signal RdrObjMtnPat_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjMtnPat_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjMtnPat_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjMtnPat_FR_2           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjMtnPat_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjMtnPat_FR_2         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjMtnPat_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjMtnPat_FR_2(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjMtnPat_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjMtnPat_FR_2(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjMtnPat_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjMtnPat_FR_2         0

/**
 * Signal RdrObjMtnPat_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjMtnPat_FR_2           0

/**
 * Signal RdrObjMtnPat_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjMtnPat_FR_2           3

/**
 * Signal RdrObjMtnPat_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjMtnPat_FR_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjID_FR_2 Signal RdrObjID_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjID_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjID_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjID_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjID_FR_2               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjID_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjID_FR_2             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjID_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjID_FR_2(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjID_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjID_FR_2(buf, 0)

/**
 * Signal RdrObjID_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjID_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjID_FR_2             0

/**
 * Signal RdrObjID_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjID_FR_2               0

/**
 * Signal RdrObjID_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjID_FR_2               255

/**
 * Signal RdrObjID_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjID_FR_2               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjTyp_FR_2 Signal RdrObjTyp_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjTyp_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjTyp_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjTyp_FR_2              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjTyp_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjTyp_FR_2            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjTyp_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjTyp_FR_2(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjTyp_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjTyp_FR_2(buf, 0)

/**
 * Signal RdrObjTyp_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjTyp_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjTyp_FR_2            0

/**
 * Signal RdrObjTyp_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjTyp_FR_2              0

/**
 * Signal RdrObjTyp_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjTyp_FR_2              3

/**
 * Signal RdrObjTyp_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjTyp_FR_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B4h_RdrObjDy_FR_2 Signal RdrObjDy_FR_2 of Message SRR_FR_3B4h (0x3b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B4h
 * @{
 */

/**
 * Signal RdrObjDy_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B4h_RdrObjDy_FR_2 and \ref GET_SRR_FR_3B4h_RdrObjDy_FR_2 instead.
 */
#define SIG_SRR_FR_3B4h_RdrObjDy_FR_2               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B4h_RdrObjDy_FR_2 or \ref INIT_SRR_FR_3B4h instead.
 */
#define SETUP_SRR_FR_3B4h_RdrObjDy_FR_2             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B4h_RdrObjDy_FR_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B4h_RdrObjDy_FR_2(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B4h_RdrObjDy_FR_2(buf) \
	SET_SRR_FR_3B4h_RdrObjDy_FR_2(buf, 0)

/**
 * Signal RdrObjDy_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B4h_RdrObjDy_FR_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_2 raw initial value.
 */
#define START_SRR_FR_3B4h_RdrObjDy_FR_2             0

/**
 * Signal RdrObjDy_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B4h_RdrObjDy_FR_2               0

/**
 * Signal RdrObjDy_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B4h_RdrObjDy_FR_2               2046

/**
 * Signal RdrObjDy_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B4h_RdrObjDy_FR_2               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjChks2_FR_2 Signal RdrObjChks2_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjChks2_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjChks2_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjChks2_FR_2            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjChks2_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjChks2_FR_2          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjChks2_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjChks2_FR_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjChks2_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjChks2_FR_2(buf, 0)

/**
 * Signal RdrObjChks2_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjChks2_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjChks2_FR_2          0

/**
 * Signal RdrObjChks2_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjChks2_FR_2            0

/**
 * Signal RdrObjChks2_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjChks2_FR_2            255

/**
 * Signal RdrObjChks2_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjChks2_FR_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjDx_FR_2 Signal RdrObjDx_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjDx_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjDx_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjDx_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjDx_FR_2               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjDx_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjDx_FR_2             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjDx_FR_2(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjDx_FR_2(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjDx_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjDx_FR_2(buf, 0)

/**
 * Signal RdrObjDx_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjDx_FR_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjDx_FR_2             0

/**
 * Signal RdrObjDx_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjDx_FR_2               0

/**
 * Signal RdrObjDx_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjDx_FR_2               2540

/**
 * Signal RdrObjDx_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjDx_FR_2               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjTiAlv_FR_2 Signal RdrObjTiAlv_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjTiAlv_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjTiAlv_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjTiAlv_FR_2            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjTiAlv_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjTiAlv_FR_2          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjTiAlv_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjTiAlv_FR_2(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjTiAlv_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjTiAlv_FR_2(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjTiAlv_FR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjTiAlv_FR_2          0

/**
 * Signal RdrObjTiAlv_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjTiAlv_FR_2            0

/**
 * Signal RdrObjTiAlv_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjTiAlv_FR_2            127

/**
 * Signal RdrObjTiAlv_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjTiAlv_FR_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjVy_FR_2 Signal RdrObjVy_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjVy_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjVy_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjVy_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjVy_FR_2               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjVy_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjVy_FR_2             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjVy_FR_2(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjVy_FR_2(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjVy_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjVy_FR_2(buf, 0)

/**
 * Signal RdrObjVy_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjVy_FR_2(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjVy_FR_2             0

/**
 * Signal RdrObjVy_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjVy_FR_2               0

/**
 * Signal RdrObjVy_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjVy_FR_2               1023

/**
 * Signal RdrObjVy_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjVy_FR_2               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjVx_FR_2 Signal RdrObjVx_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjVx_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjVx_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjVx_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjVx_FR_2               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjVx_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjVx_FR_2             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjVx_FR_2(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjVx_FR_2(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjVx_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjVx_FR_2(buf, 0)

/**
 * Signal RdrObjVx_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjVx_FR_2(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjVx_FR_2             0

/**
 * Signal RdrObjVx_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjVx_FR_2               0

/**
 * Signal RdrObjVx_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjVx_FR_2               1023

/**
 * Signal RdrObjVx_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjVx_FR_2               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjWth_FR_2 Signal RdrObjWth_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjWth_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjWth_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjWth_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjWth_FR_2              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjWth_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjWth_FR_2            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjWth_FR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjWth_FR_2(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjWth_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjWth_FR_2(buf, 0)

/**
 * Signal RdrObjWth_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjWth_FR_2(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjWth_FR_2            0

/**
 * Signal RdrObjWth_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjWth_FR_2              0

/**
 * Signal RdrObjWth_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjWth_FR_2              50

/**
 * Signal RdrObjWth_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjWth_FR_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B5h_RdrObjHeading_FR_2 Signal RdrObjHeading_FR_2 of Message SRR_FR_3B5h (0x3b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B5h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B5h_RdrObjHeading_FR_2 and \ref GET_SRR_FR_3B5h_RdrObjHeading_FR_2 instead.
 */
#define SIG_SRR_FR_3B5h_RdrObjHeading_FR_2          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B5h_RdrObjHeading_FR_2 or \ref INIT_SRR_FR_3B5h instead.
 */
#define SETUP_SRR_FR_3B5h_RdrObjHeading_FR_2        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B5h_RdrObjHeading_FR_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B5h_RdrObjHeading_FR_2(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B5h_RdrObjHeading_FR_2(buf) \
	SET_SRR_FR_3B5h_RdrObjHeading_FR_2(buf, 0)

/**
 * Signal RdrObjHeading_FR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B5h_RdrObjHeading_FR_2(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_2 raw initial value.
 */
#define START_SRR_FR_3B5h_RdrObjHeading_FR_2        0

/**
 * Signal RdrObjHeading_FR_2 raw minimum value.
 */
#define MIN_SRR_FR_3B5h_RdrObjHeading_FR_2          0

/**
 * Signal RdrObjHeading_FR_2 raw maximum value.
 */
#define MAX_SRR_FR_3B5h_RdrObjHeading_FR_2          360

/**
 * Signal RdrObjHeading_FR_2 raw offset value.
 */
#define OFF_SRR_FR_3B5h_RdrObjHeading_FR_2          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjChks_FR_3 Signal RdrObjChks_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjChks_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjChks_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjChks_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjChks_FR_3             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjChks_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjChks_FR_3           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjChks_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjChks_FR_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjChks_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjChks_FR_3(buf, 0)

/**
 * Signal RdrObjChks_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjChks_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjChks_FR_3           0

/**
 * Signal RdrObjChks_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjChks_FR_3             0

/**
 * Signal RdrObjChks_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjChks_FR_3             255

/**
 * Signal RdrObjChks_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjChks_FR_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjCntr_FR_3 Signal RdrObjCntr_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjCntr_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjCntr_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjCntr_FR_3             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjCntr_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjCntr_FR_3           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjCntr_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjCntr_FR_3(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjCntr_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjCntr_FR_3(buf, 0)

/**
 * Signal RdrObjCntr_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjCntr_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjCntr_FR_3           0

/**
 * Signal RdrObjCntr_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjCntr_FR_3             0

/**
 * Signal RdrObjCntr_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjCntr_FR_3             15

/**
 * Signal RdrObjCntr_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjCntr_FR_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjAy_FR_3 Signal RdrObjAy_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjAy_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjAy_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjAy_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjAy_FR_3               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjAy_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjAy_FR_3             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjAy_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjAy_FR_3(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjAy_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjAy_FR_3(buf, 0)

/**
 * Signal RdrObjAy_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjAy_FR_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjAy_FR_3             0

/**
 * Signal RdrObjAy_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjAy_FR_3               0

/**
 * Signal RdrObjAy_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjAy_FR_3               128

/**
 * Signal RdrObjAy_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjAy_FR_3               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjAx_FR_3 Signal RdrObjAx_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjAx_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjAx_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjAx_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjAx_FR_3               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjAx_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjAx_FR_3             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjAx_FR_3(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjAx_FR_3(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjAx_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjAx_FR_3(buf, 0)

/**
 * Signal RdrObjAx_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjAx_FR_3(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjAx_FR_3             0

/**
 * Signal RdrObjAx_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjAx_FR_3               0

/**
 * Signal RdrObjAx_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjAx_FR_3               512

/**
 * Signal RdrObjAx_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjAx_FR_3               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjCoast_FR_3 Signal RdrObjCoast_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjCoast_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjCoast_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjCoast_FR_3            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjCoast_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjCoast_FR_3          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjCoast_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjCoast_FR_3(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjCoast_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjCoast_FR_3(buf, 0)

/**
 * Signal RdrObjCoast_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjCoast_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjCoast_FR_3          0

/**
 * Signal RdrObjCoast_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjCoast_FR_3            0

/**
 * Signal RdrObjCoast_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjCoast_FR_3            1

/**
 * Signal RdrObjCoast_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjCoast_FR_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjConf_FR_3 Signal RdrObjConf_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjConf_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjConf_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjConf_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjConf_FR_3             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjConf_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjConf_FR_3           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjConf_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjConf_FR_3(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjConf_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjConf_FR_3(buf, 0)

/**
 * Signal RdrObjConf_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjConf_FR_3(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjConf_FR_3           0

/**
 * Signal RdrObjConf_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjConf_FR_3             0

/**
 * Signal RdrObjConf_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjConf_FR_3             14

/**
 * Signal RdrObjConf_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjConf_FR_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjMtnPat_FR_3 Signal RdrObjMtnPat_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjMtnPat_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjMtnPat_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjMtnPat_FR_3           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjMtnPat_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjMtnPat_FR_3         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjMtnPat_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjMtnPat_FR_3(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjMtnPat_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjMtnPat_FR_3(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjMtnPat_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjMtnPat_FR_3         0

/**
 * Signal RdrObjMtnPat_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjMtnPat_FR_3           0

/**
 * Signal RdrObjMtnPat_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjMtnPat_FR_3           3

/**
 * Signal RdrObjMtnPat_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjMtnPat_FR_3           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjID_FR_3 Signal RdrObjID_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjID_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjID_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjID_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjID_FR_3               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjID_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjID_FR_3             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjID_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjID_FR_3(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjID_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjID_FR_3(buf, 0)

/**
 * Signal RdrObjID_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjID_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjID_FR_3             0

/**
 * Signal RdrObjID_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjID_FR_3               0

/**
 * Signal RdrObjID_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjID_FR_3               255

/**
 * Signal RdrObjID_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjID_FR_3               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjTyp_FR_3 Signal RdrObjTyp_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjTyp_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjTyp_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjTyp_FR_3              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjTyp_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjTyp_FR_3            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjTyp_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjTyp_FR_3(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjTyp_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjTyp_FR_3(buf, 0)

/**
 * Signal RdrObjTyp_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjTyp_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjTyp_FR_3            0

/**
 * Signal RdrObjTyp_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjTyp_FR_3              0

/**
 * Signal RdrObjTyp_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjTyp_FR_3              3

/**
 * Signal RdrObjTyp_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjTyp_FR_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B6h_RdrObjDy_FR_3 Signal RdrObjDy_FR_3 of Message SRR_FR_3B6h (0x3b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B6h
 * @{
 */

/**
 * Signal RdrObjDy_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B6h_RdrObjDy_FR_3 and \ref GET_SRR_FR_3B6h_RdrObjDy_FR_3 instead.
 */
#define SIG_SRR_FR_3B6h_RdrObjDy_FR_3               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B6h_RdrObjDy_FR_3 or \ref INIT_SRR_FR_3B6h instead.
 */
#define SETUP_SRR_FR_3B6h_RdrObjDy_FR_3             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B6h_RdrObjDy_FR_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B6h_RdrObjDy_FR_3(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B6h_RdrObjDy_FR_3(buf) \
	SET_SRR_FR_3B6h_RdrObjDy_FR_3(buf, 0)

/**
 * Signal RdrObjDy_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B6h_RdrObjDy_FR_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_3 raw initial value.
 */
#define START_SRR_FR_3B6h_RdrObjDy_FR_3             0

/**
 * Signal RdrObjDy_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B6h_RdrObjDy_FR_3               0

/**
 * Signal RdrObjDy_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B6h_RdrObjDy_FR_3               2046

/**
 * Signal RdrObjDy_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B6h_RdrObjDy_FR_3               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjChks2_FR_3 Signal RdrObjChks2_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjChks2_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjChks2_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjChks2_FR_3            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjChks2_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjChks2_FR_3          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjChks2_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjChks2_FR_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjChks2_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjChks2_FR_3(buf, 0)

/**
 * Signal RdrObjChks2_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjChks2_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjChks2_FR_3          0

/**
 * Signal RdrObjChks2_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjChks2_FR_3            0

/**
 * Signal RdrObjChks2_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjChks2_FR_3            255

/**
 * Signal RdrObjChks2_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjChks2_FR_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjDx_FR_3 Signal RdrObjDx_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjDx_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjDx_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjDx_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjDx_FR_3               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjDx_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjDx_FR_3             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjDx_FR_3(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjDx_FR_3(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjDx_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjDx_FR_3(buf, 0)

/**
 * Signal RdrObjDx_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjDx_FR_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjDx_FR_3             0

/**
 * Signal RdrObjDx_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjDx_FR_3               0

/**
 * Signal RdrObjDx_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjDx_FR_3               2540

/**
 * Signal RdrObjDx_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjDx_FR_3               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjTiAlv_FR_3 Signal RdrObjTiAlv_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjTiAlv_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjTiAlv_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjTiAlv_FR_3            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjTiAlv_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjTiAlv_FR_3          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjTiAlv_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjTiAlv_FR_3(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjTiAlv_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjTiAlv_FR_3(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjTiAlv_FR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjTiAlv_FR_3          0

/**
 * Signal RdrObjTiAlv_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjTiAlv_FR_3            0

/**
 * Signal RdrObjTiAlv_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjTiAlv_FR_3            127

/**
 * Signal RdrObjTiAlv_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjTiAlv_FR_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjVy_FR_3 Signal RdrObjVy_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjVy_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjVy_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjVy_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjVy_FR_3               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjVy_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjVy_FR_3             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjVy_FR_3(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjVy_FR_3(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjVy_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjVy_FR_3(buf, 0)

/**
 * Signal RdrObjVy_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjVy_FR_3(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjVy_FR_3             0

/**
 * Signal RdrObjVy_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjVy_FR_3               0

/**
 * Signal RdrObjVy_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjVy_FR_3               1023

/**
 * Signal RdrObjVy_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjVy_FR_3               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjVx_FR_3 Signal RdrObjVx_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjVx_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjVx_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjVx_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjVx_FR_3               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjVx_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjVx_FR_3             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjVx_FR_3(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjVx_FR_3(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjVx_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjVx_FR_3(buf, 0)

/**
 * Signal RdrObjVx_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjVx_FR_3(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjVx_FR_3             0

/**
 * Signal RdrObjVx_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjVx_FR_3               0

/**
 * Signal RdrObjVx_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjVx_FR_3               1023

/**
 * Signal RdrObjVx_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjVx_FR_3               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjWth_FR_3 Signal RdrObjWth_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjWth_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjWth_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjWth_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjWth_FR_3              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjWth_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjWth_FR_3            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjWth_FR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjWth_FR_3(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjWth_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjWth_FR_3(buf, 0)

/**
 * Signal RdrObjWth_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjWth_FR_3(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjWth_FR_3            0

/**
 * Signal RdrObjWth_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjWth_FR_3              0

/**
 * Signal RdrObjWth_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjWth_FR_3              50

/**
 * Signal RdrObjWth_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjWth_FR_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B7h_RdrObjHeading_FR_3 Signal RdrObjHeading_FR_3 of Message SRR_FR_3B7h (0x3b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B7h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B7h_RdrObjHeading_FR_3 and \ref GET_SRR_FR_3B7h_RdrObjHeading_FR_3 instead.
 */
#define SIG_SRR_FR_3B7h_RdrObjHeading_FR_3          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B7h_RdrObjHeading_FR_3 or \ref INIT_SRR_FR_3B7h instead.
 */
#define SETUP_SRR_FR_3B7h_RdrObjHeading_FR_3        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B7h_RdrObjHeading_FR_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B7h_RdrObjHeading_FR_3(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B7h_RdrObjHeading_FR_3(buf) \
	SET_SRR_FR_3B7h_RdrObjHeading_FR_3(buf, 0)

/**
 * Signal RdrObjHeading_FR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B7h_RdrObjHeading_FR_3(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_3 raw initial value.
 */
#define START_SRR_FR_3B7h_RdrObjHeading_FR_3        0

/**
 * Signal RdrObjHeading_FR_3 raw minimum value.
 */
#define MIN_SRR_FR_3B7h_RdrObjHeading_FR_3          0

/**
 * Signal RdrObjHeading_FR_3 raw maximum value.
 */
#define MAX_SRR_FR_3B7h_RdrObjHeading_FR_3          360

/**
 * Signal RdrObjHeading_FR_3 raw offset value.
 */
#define OFF_SRR_FR_3B7h_RdrObjHeading_FR_3          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjChks_FR_4 Signal RdrObjChks_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjChks_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjChks_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjChks_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjChks_FR_4             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjChks_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjChks_FR_4           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjChks_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjChks_FR_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjChks_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjChks_FR_4(buf, 0)

/**
 * Signal RdrObjChks_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjChks_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjChks_FR_4           0

/**
 * Signal RdrObjChks_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjChks_FR_4             0

/**
 * Signal RdrObjChks_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjChks_FR_4             255

/**
 * Signal RdrObjChks_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjChks_FR_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjCntr_FR_4 Signal RdrObjCntr_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjCntr_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjCntr_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjCntr_FR_4             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjCntr_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjCntr_FR_4           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjCntr_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjCntr_FR_4(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjCntr_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjCntr_FR_4(buf, 0)

/**
 * Signal RdrObjCntr_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjCntr_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjCntr_FR_4           0

/**
 * Signal RdrObjCntr_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjCntr_FR_4             0

/**
 * Signal RdrObjCntr_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjCntr_FR_4             15

/**
 * Signal RdrObjCntr_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjCntr_FR_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjAy_FR_4 Signal RdrObjAy_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjAy_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjAy_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjAy_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjAy_FR_4               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjAy_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjAy_FR_4             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjAy_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjAy_FR_4(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjAy_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjAy_FR_4(buf, 0)

/**
 * Signal RdrObjAy_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjAy_FR_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjAy_FR_4             0

/**
 * Signal RdrObjAy_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjAy_FR_4               0

/**
 * Signal RdrObjAy_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjAy_FR_4               128

/**
 * Signal RdrObjAy_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjAy_FR_4               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjAx_FR_4 Signal RdrObjAx_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjAx_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjAx_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjAx_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjAx_FR_4               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjAx_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjAx_FR_4             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjAx_FR_4(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjAx_FR_4(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjAx_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjAx_FR_4(buf, 0)

/**
 * Signal RdrObjAx_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjAx_FR_4(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjAx_FR_4             0

/**
 * Signal RdrObjAx_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjAx_FR_4               0

/**
 * Signal RdrObjAx_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjAx_FR_4               512

/**
 * Signal RdrObjAx_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjAx_FR_4               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjCoast_FR_4 Signal RdrObjCoast_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjCoast_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjCoast_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjCoast_FR_4            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjCoast_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjCoast_FR_4          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjCoast_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjCoast_FR_4(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjCoast_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjCoast_FR_4(buf, 0)

/**
 * Signal RdrObjCoast_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjCoast_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjCoast_FR_4          0

/**
 * Signal RdrObjCoast_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjCoast_FR_4            0

/**
 * Signal RdrObjCoast_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjCoast_FR_4            1

/**
 * Signal RdrObjCoast_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjCoast_FR_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjConf_FR_4 Signal RdrObjConf_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjConf_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjConf_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjConf_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjConf_FR_4             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjConf_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjConf_FR_4           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjConf_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjConf_FR_4(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjConf_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjConf_FR_4(buf, 0)

/**
 * Signal RdrObjConf_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjConf_FR_4(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjConf_FR_4           0

/**
 * Signal RdrObjConf_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjConf_FR_4             0

/**
 * Signal RdrObjConf_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjConf_FR_4             14

/**
 * Signal RdrObjConf_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjConf_FR_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjMtnPat_FR_4 Signal RdrObjMtnPat_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjMtnPat_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjMtnPat_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjMtnPat_FR_4           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjMtnPat_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjMtnPat_FR_4         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjMtnPat_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjMtnPat_FR_4(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjMtnPat_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjMtnPat_FR_4(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjMtnPat_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjMtnPat_FR_4         0

/**
 * Signal RdrObjMtnPat_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjMtnPat_FR_4           0

/**
 * Signal RdrObjMtnPat_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjMtnPat_FR_4           3

/**
 * Signal RdrObjMtnPat_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjMtnPat_FR_4           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjID_FR_4 Signal RdrObjID_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjID_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjID_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjID_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjID_FR_4               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjID_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjID_FR_4             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjID_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjID_FR_4(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjID_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjID_FR_4(buf, 0)

/**
 * Signal RdrObjID_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjID_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjID_FR_4             0

/**
 * Signal RdrObjID_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjID_FR_4               0

/**
 * Signal RdrObjID_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjID_FR_4               255

/**
 * Signal RdrObjID_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjID_FR_4               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjTyp_FR_4 Signal RdrObjTyp_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjTyp_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjTyp_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjTyp_FR_4              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjTyp_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjTyp_FR_4            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjTyp_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjTyp_FR_4(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjTyp_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjTyp_FR_4(buf, 0)

/**
 * Signal RdrObjTyp_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjTyp_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjTyp_FR_4            0

/**
 * Signal RdrObjTyp_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjTyp_FR_4              0

/**
 * Signal RdrObjTyp_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjTyp_FR_4              3

/**
 * Signal RdrObjTyp_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjTyp_FR_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B8h_RdrObjDy_FR_4 Signal RdrObjDy_FR_4 of Message SRR_FR_3B8h (0x3b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B8h
 * @{
 */

/**
 * Signal RdrObjDy_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B8h_RdrObjDy_FR_4 and \ref GET_SRR_FR_3B8h_RdrObjDy_FR_4 instead.
 */
#define SIG_SRR_FR_3B8h_RdrObjDy_FR_4               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B8h_RdrObjDy_FR_4 or \ref INIT_SRR_FR_3B8h instead.
 */
#define SETUP_SRR_FR_3B8h_RdrObjDy_FR_4             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B8h_RdrObjDy_FR_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B8h_RdrObjDy_FR_4(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B8h_RdrObjDy_FR_4(buf) \
	SET_SRR_FR_3B8h_RdrObjDy_FR_4(buf, 0)

/**
 * Signal RdrObjDy_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B8h_RdrObjDy_FR_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_4 raw initial value.
 */
#define START_SRR_FR_3B8h_RdrObjDy_FR_4             0

/**
 * Signal RdrObjDy_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B8h_RdrObjDy_FR_4               0

/**
 * Signal RdrObjDy_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B8h_RdrObjDy_FR_4               2046

/**
 * Signal RdrObjDy_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B8h_RdrObjDy_FR_4               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjChks2_FR_4 Signal RdrObjChks2_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjChks2_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjChks2_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjChks2_FR_4            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjChks2_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjChks2_FR_4          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjChks2_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjChks2_FR_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjChks2_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjChks2_FR_4(buf, 0)

/**
 * Signal RdrObjChks2_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjChks2_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjChks2_FR_4          0

/**
 * Signal RdrObjChks2_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjChks2_FR_4            0

/**
 * Signal RdrObjChks2_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjChks2_FR_4            255

/**
 * Signal RdrObjChks2_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjChks2_FR_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjDx_FR_4 Signal RdrObjDx_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjDx_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjDx_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjDx_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjDx_FR_4               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjDx_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjDx_FR_4             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjDx_FR_4(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjDx_FR_4(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjDx_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjDx_FR_4(buf, 0)

/**
 * Signal RdrObjDx_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjDx_FR_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjDx_FR_4             0

/**
 * Signal RdrObjDx_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjDx_FR_4               0

/**
 * Signal RdrObjDx_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjDx_FR_4               2540

/**
 * Signal RdrObjDx_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjDx_FR_4               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjTiAlv_FR_4 Signal RdrObjTiAlv_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjTiAlv_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjTiAlv_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjTiAlv_FR_4            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjTiAlv_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjTiAlv_FR_4          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjTiAlv_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjTiAlv_FR_4(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjTiAlv_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjTiAlv_FR_4(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjTiAlv_FR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjTiAlv_FR_4          0

/**
 * Signal RdrObjTiAlv_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjTiAlv_FR_4            0

/**
 * Signal RdrObjTiAlv_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjTiAlv_FR_4            127

/**
 * Signal RdrObjTiAlv_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjTiAlv_FR_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjVy_FR_4 Signal RdrObjVy_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjVy_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjVy_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjVy_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjVy_FR_4               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjVy_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjVy_FR_4             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjVy_FR_4(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjVy_FR_4(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjVy_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjVy_FR_4(buf, 0)

/**
 * Signal RdrObjVy_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjVy_FR_4(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjVy_FR_4             0

/**
 * Signal RdrObjVy_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjVy_FR_4               0

/**
 * Signal RdrObjVy_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjVy_FR_4               1023

/**
 * Signal RdrObjVy_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjVy_FR_4               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjVx_FR_4 Signal RdrObjVx_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjVx_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjVx_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjVx_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjVx_FR_4               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjVx_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjVx_FR_4             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjVx_FR_4(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjVx_FR_4(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjVx_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjVx_FR_4(buf, 0)

/**
 * Signal RdrObjVx_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjVx_FR_4(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjVx_FR_4             0

/**
 * Signal RdrObjVx_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjVx_FR_4               0

/**
 * Signal RdrObjVx_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjVx_FR_4               1023

/**
 * Signal RdrObjVx_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjVx_FR_4               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjWth_FR_4 Signal RdrObjWth_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjWth_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjWth_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjWth_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjWth_FR_4              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjWth_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjWth_FR_4            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjWth_FR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjWth_FR_4(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjWth_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjWth_FR_4(buf, 0)

/**
 * Signal RdrObjWth_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjWth_FR_4(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjWth_FR_4            0

/**
 * Signal RdrObjWth_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjWth_FR_4              0

/**
 * Signal RdrObjWth_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjWth_FR_4              50

/**
 * Signal RdrObjWth_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjWth_FR_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3B9h_RdrObjHeading_FR_4 Signal RdrObjHeading_FR_4 of Message SRR_FR_3B9h (0x3b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3B9h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3B9h_RdrObjHeading_FR_4 and \ref GET_SRR_FR_3B9h_RdrObjHeading_FR_4 instead.
 */
#define SIG_SRR_FR_3B9h_RdrObjHeading_FR_4          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3B9h_RdrObjHeading_FR_4 or \ref INIT_SRR_FR_3B9h instead.
 */
#define SETUP_SRR_FR_3B9h_RdrObjHeading_FR_4        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3B9h_RdrObjHeading_FR_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3B9h_RdrObjHeading_FR_4(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3B9h_RdrObjHeading_FR_4(buf) \
	SET_SRR_FR_3B9h_RdrObjHeading_FR_4(buf, 0)

/**
 * Signal RdrObjHeading_FR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3B9h_RdrObjHeading_FR_4(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_4 raw initial value.
 */
#define START_SRR_FR_3B9h_RdrObjHeading_FR_4        0

/**
 * Signal RdrObjHeading_FR_4 raw minimum value.
 */
#define MIN_SRR_FR_3B9h_RdrObjHeading_FR_4          0

/**
 * Signal RdrObjHeading_FR_4 raw maximum value.
 */
#define MAX_SRR_FR_3B9h_RdrObjHeading_FR_4          360

/**
 * Signal RdrObjHeading_FR_4 raw offset value.
 */
#define OFF_SRR_FR_3B9h_RdrObjHeading_FR_4          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjChks_FR_5 Signal RdrObjChks_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjChks_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjChks_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjChks_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjChks_FR_5             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjChks_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjChks_FR_5           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjChks_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjChks_FR_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjChks_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjChks_FR_5(buf, 0)

/**
 * Signal RdrObjChks_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjChks_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjChks_FR_5           0

/**
 * Signal RdrObjChks_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjChks_FR_5             0

/**
 * Signal RdrObjChks_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjChks_FR_5             255

/**
 * Signal RdrObjChks_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjChks_FR_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjCntr_FR_5 Signal RdrObjCntr_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjCntr_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjCntr_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjCntr_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjCntr_FR_5             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjCntr_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjCntr_FR_5           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjCntr_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjCntr_FR_5(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjCntr_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjCntr_FR_5(buf, 0)

/**
 * Signal RdrObjCntr_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjCntr_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjCntr_FR_5           0

/**
 * Signal RdrObjCntr_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjCntr_FR_5             0

/**
 * Signal RdrObjCntr_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjCntr_FR_5             15

/**
 * Signal RdrObjCntr_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjCntr_FR_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjAy_FR_5 Signal RdrObjAy_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjAy_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjAy_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjAy_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjAy_FR_5               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjAy_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjAy_FR_5             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjAy_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjAy_FR_5(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjAy_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjAy_FR_5(buf, 0)

/**
 * Signal RdrObjAy_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjAy_FR_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjAy_FR_5             0

/**
 * Signal RdrObjAy_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjAy_FR_5               0

/**
 * Signal RdrObjAy_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjAy_FR_5               128

/**
 * Signal RdrObjAy_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjAy_FR_5               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjAx_FR_5 Signal RdrObjAx_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjAx_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjAx_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjAx_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjAx_FR_5               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjAx_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjAx_FR_5             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjAx_FR_5(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjAx_FR_5(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjAx_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjAx_FR_5(buf, 0)

/**
 * Signal RdrObjAx_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjAx_FR_5(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjAx_FR_5             0

/**
 * Signal RdrObjAx_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjAx_FR_5               0

/**
 * Signal RdrObjAx_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjAx_FR_5               512

/**
 * Signal RdrObjAx_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjAx_FR_5               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjCoast_FR_5 Signal RdrObjCoast_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjCoast_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjCoast_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjCoast_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjCoast_FR_5            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjCoast_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjCoast_FR_5          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjCoast_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjCoast_FR_5(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjCoast_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjCoast_FR_5(buf, 0)

/**
 * Signal RdrObjCoast_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjCoast_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjCoast_FR_5          0

/**
 * Signal RdrObjCoast_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjCoast_FR_5            0

/**
 * Signal RdrObjCoast_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjCoast_FR_5            1

/**
 * Signal RdrObjCoast_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjCoast_FR_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjConf_FR_5 Signal RdrObjConf_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjConf_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjConf_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjConf_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjConf_FR_5             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjConf_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjConf_FR_5           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjConf_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjConf_FR_5(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjConf_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjConf_FR_5(buf, 0)

/**
 * Signal RdrObjConf_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjConf_FR_5(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjConf_FR_5           0

/**
 * Signal RdrObjConf_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjConf_FR_5             0

/**
 * Signal RdrObjConf_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjConf_FR_5             14

/**
 * Signal RdrObjConf_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjConf_FR_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjMtnPat_FR_5 Signal RdrObjMtnPat_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjMtnPat_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjMtnPat_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjMtnPat_FR_5           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjMtnPat_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjMtnPat_FR_5         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjMtnPat_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjMtnPat_FR_5(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjMtnPat_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjMtnPat_FR_5(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjMtnPat_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjMtnPat_FR_5         0

/**
 * Signal RdrObjMtnPat_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjMtnPat_FR_5           0

/**
 * Signal RdrObjMtnPat_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjMtnPat_FR_5           3

/**
 * Signal RdrObjMtnPat_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjMtnPat_FR_5           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjID_FR_5 Signal RdrObjID_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjID_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjID_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjID_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjID_FR_5               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjID_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjID_FR_5             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjID_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjID_FR_5(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjID_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjID_FR_5(buf, 0)

/**
 * Signal RdrObjID_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjID_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjID_FR_5             0

/**
 * Signal RdrObjID_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjID_FR_5               0

/**
 * Signal RdrObjID_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjID_FR_5               255

/**
 * Signal RdrObjID_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjID_FR_5               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjTyp_FR_5 Signal RdrObjTyp_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjTyp_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjTyp_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjTyp_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjTyp_FR_5              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjTyp_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjTyp_FR_5            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjTyp_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjTyp_FR_5(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjTyp_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjTyp_FR_5(buf, 0)

/**
 * Signal RdrObjTyp_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjTyp_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjTyp_FR_5            0

/**
 * Signal RdrObjTyp_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjTyp_FR_5              0

/**
 * Signal RdrObjTyp_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjTyp_FR_5              3

/**
 * Signal RdrObjTyp_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjTyp_FR_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BAh_RdrObjDy_FR_5 Signal RdrObjDy_FR_5 of Message SRR_FR_3BAh (0x3ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BAh
 * @{
 */

/**
 * Signal RdrObjDy_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BAh_RdrObjDy_FR_5 and \ref GET_SRR_FR_3BAh_RdrObjDy_FR_5 instead.
 */
#define SIG_SRR_FR_3BAh_RdrObjDy_FR_5               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BAh_RdrObjDy_FR_5 or \ref INIT_SRR_FR_3BAh instead.
 */
#define SETUP_SRR_FR_3BAh_RdrObjDy_FR_5             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BAh_RdrObjDy_FR_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BAh_RdrObjDy_FR_5(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BAh_RdrObjDy_FR_5(buf) \
	SET_SRR_FR_3BAh_RdrObjDy_FR_5(buf, 0)

/**
 * Signal RdrObjDy_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BAh_RdrObjDy_FR_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_5 raw initial value.
 */
#define START_SRR_FR_3BAh_RdrObjDy_FR_5             0

/**
 * Signal RdrObjDy_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BAh_RdrObjDy_FR_5               0

/**
 * Signal RdrObjDy_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BAh_RdrObjDy_FR_5               2046

/**
 * Signal RdrObjDy_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BAh_RdrObjDy_FR_5               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjChks2_FR_5 Signal RdrObjChks2_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjChks2_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjChks2_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjChks2_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjChks2_FR_5            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjChks2_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjChks2_FR_5          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjChks2_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjChks2_FR_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjChks2_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjChks2_FR_5(buf, 0)

/**
 * Signal RdrObjChks2_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjChks2_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjChks2_FR_5          0

/**
 * Signal RdrObjChks2_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjChks2_FR_5            0

/**
 * Signal RdrObjChks2_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjChks2_FR_5            255

/**
 * Signal RdrObjChks2_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjChks2_FR_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjDx_FR_5 Signal RdrObjDx_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjDx_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjDx_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjDx_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjDx_FR_5               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjDx_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjDx_FR_5             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjDx_FR_5(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjDx_FR_5(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjDx_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjDx_FR_5(buf, 0)

/**
 * Signal RdrObjDx_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjDx_FR_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjDx_FR_5             0

/**
 * Signal RdrObjDx_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjDx_FR_5               0

/**
 * Signal RdrObjDx_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjDx_FR_5               2540

/**
 * Signal RdrObjDx_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjDx_FR_5               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjTiAlv_FR_5 Signal RdrObjTiAlv_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjTiAlv_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjTiAlv_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjTiAlv_FR_5            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjTiAlv_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjTiAlv_FR_5          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjTiAlv_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjTiAlv_FR_5(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjTiAlv_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjTiAlv_FR_5(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjTiAlv_FR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjTiAlv_FR_5          0

/**
 * Signal RdrObjTiAlv_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjTiAlv_FR_5            0

/**
 * Signal RdrObjTiAlv_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjTiAlv_FR_5            127

/**
 * Signal RdrObjTiAlv_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjTiAlv_FR_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjVy_FR_5 Signal RdrObjVy_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjVy_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjVy_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjVy_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjVy_FR_5               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjVy_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjVy_FR_5             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjVy_FR_5(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjVy_FR_5(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjVy_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjVy_FR_5(buf, 0)

/**
 * Signal RdrObjVy_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjVy_FR_5(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjVy_FR_5             0

/**
 * Signal RdrObjVy_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjVy_FR_5               0

/**
 * Signal RdrObjVy_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjVy_FR_5               1023

/**
 * Signal RdrObjVy_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjVy_FR_5               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjVx_FR_5 Signal RdrObjVx_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjVx_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjVx_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjVx_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjVx_FR_5               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjVx_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjVx_FR_5             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjVx_FR_5(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjVx_FR_5(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjVx_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjVx_FR_5(buf, 0)

/**
 * Signal RdrObjVx_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjVx_FR_5(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjVx_FR_5             0

/**
 * Signal RdrObjVx_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjVx_FR_5               0

/**
 * Signal RdrObjVx_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjVx_FR_5               1023

/**
 * Signal RdrObjVx_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjVx_FR_5               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjWth_FR_5 Signal RdrObjWth_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjWth_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjWth_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjWth_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjWth_FR_5              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjWth_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjWth_FR_5            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjWth_FR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjWth_FR_5(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjWth_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjWth_FR_5(buf, 0)

/**
 * Signal RdrObjWth_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjWth_FR_5(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjWth_FR_5            0

/**
 * Signal RdrObjWth_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjWth_FR_5              0

/**
 * Signal RdrObjWth_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjWth_FR_5              50

/**
 * Signal RdrObjWth_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjWth_FR_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BBh_RdrObjHeading_FR_5 Signal RdrObjHeading_FR_5 of Message SRR_FR_3BBh (0x3bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BBh
 * @{
 */

/**
 * Signal RdrObjHeading_FR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BBh_RdrObjHeading_FR_5 and \ref GET_SRR_FR_3BBh_RdrObjHeading_FR_5 instead.
 */
#define SIG_SRR_FR_3BBh_RdrObjHeading_FR_5          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BBh_RdrObjHeading_FR_5 or \ref INIT_SRR_FR_3BBh instead.
 */
#define SETUP_SRR_FR_3BBh_RdrObjHeading_FR_5        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BBh_RdrObjHeading_FR_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BBh_RdrObjHeading_FR_5(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BBh_RdrObjHeading_FR_5(buf) \
	SET_SRR_FR_3BBh_RdrObjHeading_FR_5(buf, 0)

/**
 * Signal RdrObjHeading_FR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BBh_RdrObjHeading_FR_5(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_5 raw initial value.
 */
#define START_SRR_FR_3BBh_RdrObjHeading_FR_5        0

/**
 * Signal RdrObjHeading_FR_5 raw minimum value.
 */
#define MIN_SRR_FR_3BBh_RdrObjHeading_FR_5          0

/**
 * Signal RdrObjHeading_FR_5 raw maximum value.
 */
#define MAX_SRR_FR_3BBh_RdrObjHeading_FR_5          360

/**
 * Signal RdrObjHeading_FR_5 raw offset value.
 */
#define OFF_SRR_FR_3BBh_RdrObjHeading_FR_5          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjChks_FR_6 Signal RdrObjChks_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjChks_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjChks_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjChks_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjChks_FR_6             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjChks_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjChks_FR_6           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjChks_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjChks_FR_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjChks_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjChks_FR_6(buf, 0)

/**
 * Signal RdrObjChks_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjChks_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjChks_FR_6           0

/**
 * Signal RdrObjChks_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjChks_FR_6             0

/**
 * Signal RdrObjChks_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjChks_FR_6             255

/**
 * Signal RdrObjChks_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjChks_FR_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjCntr_FR_6 Signal RdrObjCntr_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjCntr_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjCntr_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjCntr_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjCntr_FR_6             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjCntr_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjCntr_FR_6           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjCntr_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjCntr_FR_6(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjCntr_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjCntr_FR_6(buf, 0)

/**
 * Signal RdrObjCntr_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjCntr_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjCntr_FR_6           0

/**
 * Signal RdrObjCntr_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjCntr_FR_6             0

/**
 * Signal RdrObjCntr_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjCntr_FR_6             15

/**
 * Signal RdrObjCntr_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjCntr_FR_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjAy_FR_6 Signal RdrObjAy_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjAy_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjAy_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjAy_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjAy_FR_6               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjAy_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjAy_FR_6             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjAy_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjAy_FR_6(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjAy_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjAy_FR_6(buf, 0)

/**
 * Signal RdrObjAy_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjAy_FR_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjAy_FR_6             0

/**
 * Signal RdrObjAy_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjAy_FR_6               0

/**
 * Signal RdrObjAy_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjAy_FR_6               128

/**
 * Signal RdrObjAy_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjAy_FR_6               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjAx_FR_6 Signal RdrObjAx_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjAx_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjAx_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjAx_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjAx_FR_6               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjAx_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjAx_FR_6             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjAx_FR_6(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjAx_FR_6(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjAx_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjAx_FR_6(buf, 0)

/**
 * Signal RdrObjAx_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjAx_FR_6(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjAx_FR_6             0

/**
 * Signal RdrObjAx_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjAx_FR_6               0

/**
 * Signal RdrObjAx_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjAx_FR_6               512

/**
 * Signal RdrObjAx_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjAx_FR_6               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjCoast_FR_6 Signal RdrObjCoast_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjCoast_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjCoast_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjCoast_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjCoast_FR_6            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjCoast_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjCoast_FR_6          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjCoast_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjCoast_FR_6(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjCoast_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjCoast_FR_6(buf, 0)

/**
 * Signal RdrObjCoast_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjCoast_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjCoast_FR_6          0

/**
 * Signal RdrObjCoast_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjCoast_FR_6            0

/**
 * Signal RdrObjCoast_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjCoast_FR_6            1

/**
 * Signal RdrObjCoast_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjCoast_FR_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjConf_FR_6 Signal RdrObjConf_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjConf_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjConf_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjConf_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjConf_FR_6             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjConf_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjConf_FR_6           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjConf_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjConf_FR_6(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjConf_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjConf_FR_6(buf, 0)

/**
 * Signal RdrObjConf_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjConf_FR_6(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjConf_FR_6           0

/**
 * Signal RdrObjConf_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjConf_FR_6             0

/**
 * Signal RdrObjConf_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjConf_FR_6             14

/**
 * Signal RdrObjConf_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjConf_FR_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjMtnPat_FR_6 Signal RdrObjMtnPat_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjMtnPat_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjMtnPat_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjMtnPat_FR_6           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjMtnPat_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjMtnPat_FR_6         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjMtnPat_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjMtnPat_FR_6(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjMtnPat_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjMtnPat_FR_6(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjMtnPat_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjMtnPat_FR_6         0

/**
 * Signal RdrObjMtnPat_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjMtnPat_FR_6           0

/**
 * Signal RdrObjMtnPat_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjMtnPat_FR_6           3

/**
 * Signal RdrObjMtnPat_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjMtnPat_FR_6           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjID_FR_6 Signal RdrObjID_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjID_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjID_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjID_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjID_FR_6               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjID_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjID_FR_6             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjID_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjID_FR_6(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjID_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjID_FR_6(buf, 0)

/**
 * Signal RdrObjID_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjID_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjID_FR_6             0

/**
 * Signal RdrObjID_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjID_FR_6               0

/**
 * Signal RdrObjID_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjID_FR_6               255

/**
 * Signal RdrObjID_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjID_FR_6               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjTyp_FR_6 Signal RdrObjTyp_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjTyp_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjTyp_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjTyp_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjTyp_FR_6              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjTyp_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjTyp_FR_6            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjTyp_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjTyp_FR_6(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjTyp_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjTyp_FR_6(buf, 0)

/**
 * Signal RdrObjTyp_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjTyp_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjTyp_FR_6            0

/**
 * Signal RdrObjTyp_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjTyp_FR_6              0

/**
 * Signal RdrObjTyp_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjTyp_FR_6              3

/**
 * Signal RdrObjTyp_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjTyp_FR_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BCh_RdrObjDy_FR_6 Signal RdrObjDy_FR_6 of Message SRR_FR_3BCh (0x3bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BCh
 * @{
 */

/**
 * Signal RdrObjDy_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BCh_RdrObjDy_FR_6 and \ref GET_SRR_FR_3BCh_RdrObjDy_FR_6 instead.
 */
#define SIG_SRR_FR_3BCh_RdrObjDy_FR_6               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BCh_RdrObjDy_FR_6 or \ref INIT_SRR_FR_3BCh instead.
 */
#define SETUP_SRR_FR_3BCh_RdrObjDy_FR_6             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BCh_RdrObjDy_FR_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BCh_RdrObjDy_FR_6(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BCh_RdrObjDy_FR_6(buf) \
	SET_SRR_FR_3BCh_RdrObjDy_FR_6(buf, 0)

/**
 * Signal RdrObjDy_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BCh_RdrObjDy_FR_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_6 raw initial value.
 */
#define START_SRR_FR_3BCh_RdrObjDy_FR_6             0

/**
 * Signal RdrObjDy_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BCh_RdrObjDy_FR_6               0

/**
 * Signal RdrObjDy_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BCh_RdrObjDy_FR_6               2046

/**
 * Signal RdrObjDy_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BCh_RdrObjDy_FR_6               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjChks2_FR_6 Signal RdrObjChks2_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjChks2_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjChks2_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjChks2_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjChks2_FR_6            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjChks2_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjChks2_FR_6          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjChks2_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjChks2_FR_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjChks2_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjChks2_FR_6(buf, 0)

/**
 * Signal RdrObjChks2_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjChks2_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjChks2_FR_6          0

/**
 * Signal RdrObjChks2_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjChks2_FR_6            0

/**
 * Signal RdrObjChks2_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjChks2_FR_6            255

/**
 * Signal RdrObjChks2_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjChks2_FR_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjDx_FR_6 Signal RdrObjDx_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjDx_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjDx_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjDx_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjDx_FR_6               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjDx_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjDx_FR_6             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjDx_FR_6(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjDx_FR_6(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjDx_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjDx_FR_6(buf, 0)

/**
 * Signal RdrObjDx_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjDx_FR_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjDx_FR_6             0

/**
 * Signal RdrObjDx_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjDx_FR_6               0

/**
 * Signal RdrObjDx_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjDx_FR_6               2540

/**
 * Signal RdrObjDx_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjDx_FR_6               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjTiAlv_FR_6 Signal RdrObjTiAlv_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjTiAlv_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjTiAlv_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjTiAlv_FR_6            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjTiAlv_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjTiAlv_FR_6          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjTiAlv_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjTiAlv_FR_6(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjTiAlv_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjTiAlv_FR_6(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjTiAlv_FR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjTiAlv_FR_6          0

/**
 * Signal RdrObjTiAlv_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjTiAlv_FR_6            0

/**
 * Signal RdrObjTiAlv_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjTiAlv_FR_6            127

/**
 * Signal RdrObjTiAlv_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjTiAlv_FR_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjVy_FR_6 Signal RdrObjVy_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjVy_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjVy_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjVy_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjVy_FR_6               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjVy_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjVy_FR_6             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjVy_FR_6(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjVy_FR_6(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjVy_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjVy_FR_6(buf, 0)

/**
 * Signal RdrObjVy_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjVy_FR_6(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjVy_FR_6             0

/**
 * Signal RdrObjVy_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjVy_FR_6               0

/**
 * Signal RdrObjVy_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjVy_FR_6               1023

/**
 * Signal RdrObjVy_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjVy_FR_6               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjVx_FR_6 Signal RdrObjVx_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjVx_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjVx_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjVx_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjVx_FR_6               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjVx_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjVx_FR_6             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjVx_FR_6(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjVx_FR_6(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjVx_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjVx_FR_6(buf, 0)

/**
 * Signal RdrObjVx_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjVx_FR_6(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjVx_FR_6             0

/**
 * Signal RdrObjVx_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjVx_FR_6               0

/**
 * Signal RdrObjVx_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjVx_FR_6               1023

/**
 * Signal RdrObjVx_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjVx_FR_6               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjWth_FR_6 Signal RdrObjWth_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjWth_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjWth_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjWth_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjWth_FR_6              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjWth_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjWth_FR_6            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjWth_FR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjWth_FR_6(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjWth_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjWth_FR_6(buf, 0)

/**
 * Signal RdrObjWth_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjWth_FR_6(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjWth_FR_6            0

/**
 * Signal RdrObjWth_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjWth_FR_6              0

/**
 * Signal RdrObjWth_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjWth_FR_6              50

/**
 * Signal RdrObjWth_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjWth_FR_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BDh_RdrObjHeading_FR_6 Signal RdrObjHeading_FR_6 of Message SRR_FR_3BDh (0x3bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BDh
 * @{
 */

/**
 * Signal RdrObjHeading_FR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BDh_RdrObjHeading_FR_6 and \ref GET_SRR_FR_3BDh_RdrObjHeading_FR_6 instead.
 */
#define SIG_SRR_FR_3BDh_RdrObjHeading_FR_6          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BDh_RdrObjHeading_FR_6 or \ref INIT_SRR_FR_3BDh instead.
 */
#define SETUP_SRR_FR_3BDh_RdrObjHeading_FR_6        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BDh_RdrObjHeading_FR_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BDh_RdrObjHeading_FR_6(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BDh_RdrObjHeading_FR_6(buf) \
	SET_SRR_FR_3BDh_RdrObjHeading_FR_6(buf, 0)

/**
 * Signal RdrObjHeading_FR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BDh_RdrObjHeading_FR_6(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_6 raw initial value.
 */
#define START_SRR_FR_3BDh_RdrObjHeading_FR_6        0

/**
 * Signal RdrObjHeading_FR_6 raw minimum value.
 */
#define MIN_SRR_FR_3BDh_RdrObjHeading_FR_6          0

/**
 * Signal RdrObjHeading_FR_6 raw maximum value.
 */
#define MAX_SRR_FR_3BDh_RdrObjHeading_FR_6          360

/**
 * Signal RdrObjHeading_FR_6 raw offset value.
 */
#define OFF_SRR_FR_3BDh_RdrObjHeading_FR_6          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjChks_FR_7 Signal RdrObjChks_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjChks_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjChks_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjChks_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjChks_FR_7             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjChks_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjChks_FR_7           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjChks_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjChks_FR_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjChks_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjChks_FR_7(buf, 0)

/**
 * Signal RdrObjChks_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjChks_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjChks_FR_7           0

/**
 * Signal RdrObjChks_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjChks_FR_7             0

/**
 * Signal RdrObjChks_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjChks_FR_7             255

/**
 * Signal RdrObjChks_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjChks_FR_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjCntr_FR_7 Signal RdrObjCntr_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjCntr_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjCntr_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjCntr_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjCntr_FR_7             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjCntr_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjCntr_FR_7           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjCntr_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjCntr_FR_7(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjCntr_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjCntr_FR_7(buf, 0)

/**
 * Signal RdrObjCntr_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjCntr_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjCntr_FR_7           0

/**
 * Signal RdrObjCntr_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjCntr_FR_7             0

/**
 * Signal RdrObjCntr_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjCntr_FR_7             15

/**
 * Signal RdrObjCntr_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjCntr_FR_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjAy_FR_7 Signal RdrObjAy_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjAy_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjAy_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjAy_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjAy_FR_7               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjAy_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjAy_FR_7             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjAy_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjAy_FR_7(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjAy_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjAy_FR_7(buf, 0)

/**
 * Signal RdrObjAy_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjAy_FR_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjAy_FR_7             0

/**
 * Signal RdrObjAy_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjAy_FR_7               0

/**
 * Signal RdrObjAy_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjAy_FR_7               128

/**
 * Signal RdrObjAy_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjAy_FR_7               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjAx_FR_7 Signal RdrObjAx_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjAx_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjAx_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjAx_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjAx_FR_7               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjAx_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjAx_FR_7             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjAx_FR_7(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjAx_FR_7(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjAx_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjAx_FR_7(buf, 0)

/**
 * Signal RdrObjAx_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjAx_FR_7(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjAx_FR_7             0

/**
 * Signal RdrObjAx_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjAx_FR_7               0

/**
 * Signal RdrObjAx_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjAx_FR_7               512

/**
 * Signal RdrObjAx_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjAx_FR_7               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjCoast_FR_7 Signal RdrObjCoast_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjCoast_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjCoast_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjCoast_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjCoast_FR_7            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjCoast_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjCoast_FR_7          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjCoast_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjCoast_FR_7(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjCoast_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjCoast_FR_7(buf, 0)

/**
 * Signal RdrObjCoast_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjCoast_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjCoast_FR_7          0

/**
 * Signal RdrObjCoast_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjCoast_FR_7            0

/**
 * Signal RdrObjCoast_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjCoast_FR_7            1

/**
 * Signal RdrObjCoast_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjCoast_FR_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjConf_FR_7 Signal RdrObjConf_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjConf_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjConf_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjConf_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjConf_FR_7             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjConf_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjConf_FR_7           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjConf_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjConf_FR_7(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjConf_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjConf_FR_7(buf, 0)

/**
 * Signal RdrObjConf_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjConf_FR_7(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjConf_FR_7           0

/**
 * Signal RdrObjConf_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjConf_FR_7             0

/**
 * Signal RdrObjConf_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjConf_FR_7             14

/**
 * Signal RdrObjConf_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjConf_FR_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjMtnPat_FR_7 Signal RdrObjMtnPat_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjMtnPat_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjMtnPat_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjMtnPat_FR_7           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjMtnPat_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjMtnPat_FR_7         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjMtnPat_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjMtnPat_FR_7(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjMtnPat_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjMtnPat_FR_7(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjMtnPat_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjMtnPat_FR_7         0

/**
 * Signal RdrObjMtnPat_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjMtnPat_FR_7           0

/**
 * Signal RdrObjMtnPat_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjMtnPat_FR_7           3

/**
 * Signal RdrObjMtnPat_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjMtnPat_FR_7           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjID_FR_7 Signal RdrObjID_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjID_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjID_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjID_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjID_FR_7               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjID_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjID_FR_7             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjID_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjID_FR_7(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjID_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjID_FR_7(buf, 0)

/**
 * Signal RdrObjID_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjID_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjID_FR_7             0

/**
 * Signal RdrObjID_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjID_FR_7               0

/**
 * Signal RdrObjID_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjID_FR_7               255

/**
 * Signal RdrObjID_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjID_FR_7               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjTyp_FR_7 Signal RdrObjTyp_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjTyp_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjTyp_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjTyp_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjTyp_FR_7              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjTyp_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjTyp_FR_7            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjTyp_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjTyp_FR_7(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjTyp_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjTyp_FR_7(buf, 0)

/**
 * Signal RdrObjTyp_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjTyp_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjTyp_FR_7            0

/**
 * Signal RdrObjTyp_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjTyp_FR_7              0

/**
 * Signal RdrObjTyp_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjTyp_FR_7              3

/**
 * Signal RdrObjTyp_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjTyp_FR_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BEh_RdrObjDy_FR_7 Signal RdrObjDy_FR_7 of Message SRR_FR_3BEh (0x3be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BEh
 * @{
 */

/**
 * Signal RdrObjDy_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BEh_RdrObjDy_FR_7 and \ref GET_SRR_FR_3BEh_RdrObjDy_FR_7 instead.
 */
#define SIG_SRR_FR_3BEh_RdrObjDy_FR_7               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BEh_RdrObjDy_FR_7 or \ref INIT_SRR_FR_3BEh instead.
 */
#define SETUP_SRR_FR_3BEh_RdrObjDy_FR_7             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BEh_RdrObjDy_FR_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BEh_RdrObjDy_FR_7(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BEh_RdrObjDy_FR_7(buf) \
	SET_SRR_FR_3BEh_RdrObjDy_FR_7(buf, 0)

/**
 * Signal RdrObjDy_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BEh_RdrObjDy_FR_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_7 raw initial value.
 */
#define START_SRR_FR_3BEh_RdrObjDy_FR_7             0

/**
 * Signal RdrObjDy_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BEh_RdrObjDy_FR_7               0

/**
 * Signal RdrObjDy_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BEh_RdrObjDy_FR_7               2046

/**
 * Signal RdrObjDy_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BEh_RdrObjDy_FR_7               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjChks2_FR_7 Signal RdrObjChks2_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjChks2_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjChks2_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjChks2_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjChks2_FR_7            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjChks2_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjChks2_FR_7          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjChks2_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjChks2_FR_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjChks2_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjChks2_FR_7(buf, 0)

/**
 * Signal RdrObjChks2_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjChks2_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjChks2_FR_7          0

/**
 * Signal RdrObjChks2_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjChks2_FR_7            0

/**
 * Signal RdrObjChks2_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjChks2_FR_7            255

/**
 * Signal RdrObjChks2_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjChks2_FR_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjDx_FR_7 Signal RdrObjDx_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjDx_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjDx_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjDx_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjDx_FR_7               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjDx_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjDx_FR_7             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjDx_FR_7(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjDx_FR_7(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjDx_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjDx_FR_7(buf, 0)

/**
 * Signal RdrObjDx_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjDx_FR_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjDx_FR_7             0

/**
 * Signal RdrObjDx_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjDx_FR_7               0

/**
 * Signal RdrObjDx_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjDx_FR_7               2540

/**
 * Signal RdrObjDx_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjDx_FR_7               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjTiAlv_FR_7 Signal RdrObjTiAlv_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjTiAlv_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjTiAlv_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjTiAlv_FR_7            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjTiAlv_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjTiAlv_FR_7          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjTiAlv_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjTiAlv_FR_7(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjTiAlv_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjTiAlv_FR_7(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjTiAlv_FR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjTiAlv_FR_7          0

/**
 * Signal RdrObjTiAlv_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjTiAlv_FR_7            0

/**
 * Signal RdrObjTiAlv_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjTiAlv_FR_7            127

/**
 * Signal RdrObjTiAlv_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjTiAlv_FR_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjVy_FR_7 Signal RdrObjVy_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjVy_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjVy_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjVy_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjVy_FR_7               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjVy_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjVy_FR_7             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjVy_FR_7(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjVy_FR_7(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjVy_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjVy_FR_7(buf, 0)

/**
 * Signal RdrObjVy_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjVy_FR_7(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjVy_FR_7             0

/**
 * Signal RdrObjVy_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjVy_FR_7               0

/**
 * Signal RdrObjVy_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjVy_FR_7               1023

/**
 * Signal RdrObjVy_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjVy_FR_7               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjVx_FR_7 Signal RdrObjVx_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjVx_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjVx_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjVx_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjVx_FR_7               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjVx_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjVx_FR_7             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjVx_FR_7(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjVx_FR_7(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjVx_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjVx_FR_7(buf, 0)

/**
 * Signal RdrObjVx_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjVx_FR_7(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjVx_FR_7             0

/**
 * Signal RdrObjVx_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjVx_FR_7               0

/**
 * Signal RdrObjVx_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjVx_FR_7               1023

/**
 * Signal RdrObjVx_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjVx_FR_7               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjWth_FR_7 Signal RdrObjWth_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjWth_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjWth_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjWth_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjWth_FR_7              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjWth_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjWth_FR_7            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjWth_FR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjWth_FR_7(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjWth_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjWth_FR_7(buf, 0)

/**
 * Signal RdrObjWth_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjWth_FR_7(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjWth_FR_7            0

/**
 * Signal RdrObjWth_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjWth_FR_7              0

/**
 * Signal RdrObjWth_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjWth_FR_7              50

/**
 * Signal RdrObjWth_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjWth_FR_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3BFh_RdrObjHeading_FR_7 Signal RdrObjHeading_FR_7 of Message SRR_FR_3BFh (0x3bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3BFh
 * @{
 */

/**
 * Signal RdrObjHeading_FR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3BFh_RdrObjHeading_FR_7 and \ref GET_SRR_FR_3BFh_RdrObjHeading_FR_7 instead.
 */
#define SIG_SRR_FR_3BFh_RdrObjHeading_FR_7          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3BFh_RdrObjHeading_FR_7 or \ref INIT_SRR_FR_3BFh instead.
 */
#define SETUP_SRR_FR_3BFh_RdrObjHeading_FR_7        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3BFh_RdrObjHeading_FR_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3BFh_RdrObjHeading_FR_7(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3BFh_RdrObjHeading_FR_7(buf) \
	SET_SRR_FR_3BFh_RdrObjHeading_FR_7(buf, 0)

/**
 * Signal RdrObjHeading_FR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3BFh_RdrObjHeading_FR_7(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_7 raw initial value.
 */
#define START_SRR_FR_3BFh_RdrObjHeading_FR_7        0

/**
 * Signal RdrObjHeading_FR_7 raw minimum value.
 */
#define MIN_SRR_FR_3BFh_RdrObjHeading_FR_7          0

/**
 * Signal RdrObjHeading_FR_7 raw maximum value.
 */
#define MAX_SRR_FR_3BFh_RdrObjHeading_FR_7          360

/**
 * Signal RdrObjHeading_FR_7 raw offset value.
 */
#define OFF_SRR_FR_3BFh_RdrObjHeading_FR_7          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjChks_FR_8 Signal RdrObjChks_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjChks_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjChks_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjChks_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjChks_FR_8             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjChks_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjChks_FR_8           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjChks_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjChks_FR_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjChks_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjChks_FR_8(buf, 0)

/**
 * Signal RdrObjChks_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjChks_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjChks_FR_8           0

/**
 * Signal RdrObjChks_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjChks_FR_8             0

/**
 * Signal RdrObjChks_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjChks_FR_8             255

/**
 * Signal RdrObjChks_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjChks_FR_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjCntr_FR_8 Signal RdrObjCntr_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjCntr_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjCntr_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjCntr_FR_8             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjCntr_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjCntr_FR_8           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjCntr_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjCntr_FR_8(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjCntr_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjCntr_FR_8(buf, 0)

/**
 * Signal RdrObjCntr_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjCntr_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjCntr_FR_8           0

/**
 * Signal RdrObjCntr_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjCntr_FR_8             0

/**
 * Signal RdrObjCntr_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjCntr_FR_8             15

/**
 * Signal RdrObjCntr_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjCntr_FR_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjAy_FR_8 Signal RdrObjAy_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjAy_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjAy_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjAy_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjAy_FR_8               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjAy_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjAy_FR_8             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjAy_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjAy_FR_8(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjAy_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjAy_FR_8(buf, 0)

/**
 * Signal RdrObjAy_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjAy_FR_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjAy_FR_8             0

/**
 * Signal RdrObjAy_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjAy_FR_8               0

/**
 * Signal RdrObjAy_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjAy_FR_8               128

/**
 * Signal RdrObjAy_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjAy_FR_8               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjAx_FR_8 Signal RdrObjAx_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjAx_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjAx_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjAx_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjAx_FR_8               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjAx_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjAx_FR_8             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjAx_FR_8(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjAx_FR_8(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjAx_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjAx_FR_8(buf, 0)

/**
 * Signal RdrObjAx_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjAx_FR_8(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjAx_FR_8             0

/**
 * Signal RdrObjAx_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjAx_FR_8               0

/**
 * Signal RdrObjAx_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjAx_FR_8               512

/**
 * Signal RdrObjAx_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjAx_FR_8               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjCoast_FR_8 Signal RdrObjCoast_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjCoast_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjCoast_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjCoast_FR_8            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjCoast_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjCoast_FR_8          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjCoast_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjCoast_FR_8(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjCoast_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjCoast_FR_8(buf, 0)

/**
 * Signal RdrObjCoast_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjCoast_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjCoast_FR_8          0

/**
 * Signal RdrObjCoast_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjCoast_FR_8            0

/**
 * Signal RdrObjCoast_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjCoast_FR_8            1

/**
 * Signal RdrObjCoast_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjCoast_FR_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjConf_FR_8 Signal RdrObjConf_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjConf_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjConf_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjConf_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjConf_FR_8             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjConf_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjConf_FR_8           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjConf_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjConf_FR_8(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjConf_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjConf_FR_8(buf, 0)

/**
 * Signal RdrObjConf_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjConf_FR_8(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjConf_FR_8           0

/**
 * Signal RdrObjConf_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjConf_FR_8             0

/**
 * Signal RdrObjConf_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjConf_FR_8             14

/**
 * Signal RdrObjConf_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjConf_FR_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjMtnPat_FR_8 Signal RdrObjMtnPat_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjMtnPat_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjMtnPat_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjMtnPat_FR_8           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjMtnPat_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjMtnPat_FR_8         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjMtnPat_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjMtnPat_FR_8(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjMtnPat_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjMtnPat_FR_8(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjMtnPat_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjMtnPat_FR_8         0

/**
 * Signal RdrObjMtnPat_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjMtnPat_FR_8           0

/**
 * Signal RdrObjMtnPat_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjMtnPat_FR_8           3

/**
 * Signal RdrObjMtnPat_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjMtnPat_FR_8           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjID_FR_8 Signal RdrObjID_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjID_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjID_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjID_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjID_FR_8               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjID_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjID_FR_8             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjID_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjID_FR_8(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjID_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjID_FR_8(buf, 0)

/**
 * Signal RdrObjID_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjID_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjID_FR_8             0

/**
 * Signal RdrObjID_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjID_FR_8               0

/**
 * Signal RdrObjID_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjID_FR_8               255

/**
 * Signal RdrObjID_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjID_FR_8               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjTyp_FR_8 Signal RdrObjTyp_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjTyp_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjTyp_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjTyp_FR_8              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjTyp_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjTyp_FR_8            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjTyp_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjTyp_FR_8(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjTyp_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjTyp_FR_8(buf, 0)

/**
 * Signal RdrObjTyp_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjTyp_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjTyp_FR_8            0

/**
 * Signal RdrObjTyp_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjTyp_FR_8              0

/**
 * Signal RdrObjTyp_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjTyp_FR_8              3

/**
 * Signal RdrObjTyp_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjTyp_FR_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C0h_RdrObjDy_FR_8 Signal RdrObjDy_FR_8 of Message SRR_FR_3C0h (0x3c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C0h
 * @{
 */

/**
 * Signal RdrObjDy_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C0h_RdrObjDy_FR_8 and \ref GET_SRR_FR_3C0h_RdrObjDy_FR_8 instead.
 */
#define SIG_SRR_FR_3C0h_RdrObjDy_FR_8               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C0h_RdrObjDy_FR_8 or \ref INIT_SRR_FR_3C0h instead.
 */
#define SETUP_SRR_FR_3C0h_RdrObjDy_FR_8             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C0h_RdrObjDy_FR_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C0h_RdrObjDy_FR_8(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C0h_RdrObjDy_FR_8(buf) \
	SET_SRR_FR_3C0h_RdrObjDy_FR_8(buf, 0)

/**
 * Signal RdrObjDy_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C0h_RdrObjDy_FR_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_8 raw initial value.
 */
#define START_SRR_FR_3C0h_RdrObjDy_FR_8             0

/**
 * Signal RdrObjDy_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C0h_RdrObjDy_FR_8               0

/**
 * Signal RdrObjDy_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C0h_RdrObjDy_FR_8               2046

/**
 * Signal RdrObjDy_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C0h_RdrObjDy_FR_8               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjChks2_FR_8 Signal RdrObjChks2_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjChks2_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjChks2_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjChks2_FR_8            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjChks2_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjChks2_FR_8          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjChks2_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjChks2_FR_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjChks2_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjChks2_FR_8(buf, 0)

/**
 * Signal RdrObjChks2_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjChks2_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjChks2_FR_8          0

/**
 * Signal RdrObjChks2_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjChks2_FR_8            0

/**
 * Signal RdrObjChks2_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjChks2_FR_8            255

/**
 * Signal RdrObjChks2_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjChks2_FR_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjDx_FR_8 Signal RdrObjDx_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjDx_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjDx_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjDx_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjDx_FR_8               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjDx_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjDx_FR_8             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjDx_FR_8(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjDx_FR_8(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjDx_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjDx_FR_8(buf, 0)

/**
 * Signal RdrObjDx_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjDx_FR_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjDx_FR_8             0

/**
 * Signal RdrObjDx_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjDx_FR_8               0

/**
 * Signal RdrObjDx_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjDx_FR_8               2540

/**
 * Signal RdrObjDx_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjDx_FR_8               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjTiAlv_FR_8 Signal RdrObjTiAlv_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjTiAlv_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjTiAlv_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjTiAlv_FR_8            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjTiAlv_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjTiAlv_FR_8          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjTiAlv_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjTiAlv_FR_8(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjTiAlv_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjTiAlv_FR_8(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjTiAlv_FR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjTiAlv_FR_8          0

/**
 * Signal RdrObjTiAlv_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjTiAlv_FR_8            0

/**
 * Signal RdrObjTiAlv_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjTiAlv_FR_8            127

/**
 * Signal RdrObjTiAlv_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjTiAlv_FR_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjVy_FR_8 Signal RdrObjVy_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjVy_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjVy_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjVy_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjVy_FR_8               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjVy_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjVy_FR_8             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjVy_FR_8(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjVy_FR_8(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjVy_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjVy_FR_8(buf, 0)

/**
 * Signal RdrObjVy_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjVy_FR_8(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjVy_FR_8             0

/**
 * Signal RdrObjVy_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjVy_FR_8               0

/**
 * Signal RdrObjVy_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjVy_FR_8               1023

/**
 * Signal RdrObjVy_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjVy_FR_8               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjVx_FR_8 Signal RdrObjVx_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjVx_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjVx_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjVx_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjVx_FR_8               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjVx_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjVx_FR_8             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjVx_FR_8(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjVx_FR_8(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjVx_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjVx_FR_8(buf, 0)

/**
 * Signal RdrObjVx_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjVx_FR_8(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjVx_FR_8             0

/**
 * Signal RdrObjVx_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjVx_FR_8               0

/**
 * Signal RdrObjVx_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjVx_FR_8               1023

/**
 * Signal RdrObjVx_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjVx_FR_8               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjWth_FR_8 Signal RdrObjWth_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjWth_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjWth_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjWth_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjWth_FR_8              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjWth_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjWth_FR_8            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjWth_FR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjWth_FR_8(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjWth_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjWth_FR_8(buf, 0)

/**
 * Signal RdrObjWth_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjWth_FR_8(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjWth_FR_8            0

/**
 * Signal RdrObjWth_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjWth_FR_8              0

/**
 * Signal RdrObjWth_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjWth_FR_8              50

/**
 * Signal RdrObjWth_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjWth_FR_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C1h_RdrObjHeading_FR_8 Signal RdrObjHeading_FR_8 of Message SRR_FR_3C1h (0x3c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C1h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C1h_RdrObjHeading_FR_8 and \ref GET_SRR_FR_3C1h_RdrObjHeading_FR_8 instead.
 */
#define SIG_SRR_FR_3C1h_RdrObjHeading_FR_8          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C1h_RdrObjHeading_FR_8 or \ref INIT_SRR_FR_3C1h instead.
 */
#define SETUP_SRR_FR_3C1h_RdrObjHeading_FR_8        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C1h_RdrObjHeading_FR_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C1h_RdrObjHeading_FR_8(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C1h_RdrObjHeading_FR_8(buf) \
	SET_SRR_FR_3C1h_RdrObjHeading_FR_8(buf, 0)

/**
 * Signal RdrObjHeading_FR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C1h_RdrObjHeading_FR_8(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_8 raw initial value.
 */
#define START_SRR_FR_3C1h_RdrObjHeading_FR_8        0

/**
 * Signal RdrObjHeading_FR_8 raw minimum value.
 */
#define MIN_SRR_FR_3C1h_RdrObjHeading_FR_8          0

/**
 * Signal RdrObjHeading_FR_8 raw maximum value.
 */
#define MAX_SRR_FR_3C1h_RdrObjHeading_FR_8          360

/**
 * Signal RdrObjHeading_FR_8 raw offset value.
 */
#define OFF_SRR_FR_3C1h_RdrObjHeading_FR_8          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjChks_FR_9 Signal RdrObjChks_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjChks_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjChks_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjChks_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjChks_FR_9             1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjChks_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjChks_FR_9           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjChks_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjChks_FR_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjChks_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjChks_FR_9(buf, 0)

/**
 * Signal RdrObjChks_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjChks_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjChks_FR_9           0

/**
 * Signal RdrObjChks_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjChks_FR_9             0

/**
 * Signal RdrObjChks_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjChks_FR_9             255

/**
 * Signal RdrObjChks_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjChks_FR_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjCntr_FR_9 Signal RdrObjCntr_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjCntr_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjCntr_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjCntr_FR_9             1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjCntr_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjCntr_FR_9           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjCntr_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjCntr_FR_9(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjCntr_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjCntr_FR_9(buf, 0)

/**
 * Signal RdrObjCntr_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjCntr_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjCntr_FR_9           0

/**
 * Signal RdrObjCntr_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjCntr_FR_9             0

/**
 * Signal RdrObjCntr_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjCntr_FR_9             15

/**
 * Signal RdrObjCntr_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjCntr_FR_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjAy_FR_9 Signal RdrObjAy_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjAy_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjAy_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjAy_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjAy_FR_9               1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjAy_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjAy_FR_9             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjAy_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjAy_FR_9(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjAy_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjAy_FR_9(buf, 0)

/**
 * Signal RdrObjAy_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjAy_FR_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjAy_FR_9             0

/**
 * Signal RdrObjAy_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjAy_FR_9               0

/**
 * Signal RdrObjAy_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjAy_FR_9               128

/**
 * Signal RdrObjAy_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjAy_FR_9               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjAx_FR_9 Signal RdrObjAx_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjAx_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjAx_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjAx_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjAx_FR_9               1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjAx_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjAx_FR_9             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjAx_FR_9(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjAx_FR_9(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjAx_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjAx_FR_9(buf, 0)

/**
 * Signal RdrObjAx_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjAx_FR_9(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjAx_FR_9             0

/**
 * Signal RdrObjAx_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjAx_FR_9               0

/**
 * Signal RdrObjAx_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjAx_FR_9               512

/**
 * Signal RdrObjAx_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjAx_FR_9               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjCoast_FR_9 Signal RdrObjCoast_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjCoast_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjCoast_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjCoast_FR_9            1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjCoast_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjCoast_FR_9          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjCoast_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjCoast_FR_9(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjCoast_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjCoast_FR_9(buf, 0)

/**
 * Signal RdrObjCoast_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjCoast_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjCoast_FR_9          0

/**
 * Signal RdrObjCoast_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjCoast_FR_9            0

/**
 * Signal RdrObjCoast_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjCoast_FR_9            1

/**
 * Signal RdrObjCoast_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjCoast_FR_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjConf_FR_9 Signal RdrObjConf_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjConf_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjConf_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjConf_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjConf_FR_9             1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjConf_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjConf_FR_9           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjConf_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjConf_FR_9(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjConf_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjConf_FR_9(buf, 0)

/**
 * Signal RdrObjConf_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjConf_FR_9(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjConf_FR_9           0

/**
 * Signal RdrObjConf_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjConf_FR_9             0

/**
 * Signal RdrObjConf_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjConf_FR_9             14

/**
 * Signal RdrObjConf_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjConf_FR_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjMtnPat_FR_9 Signal RdrObjMtnPat_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjMtnPat_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjMtnPat_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjMtnPat_FR_9           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjMtnPat_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjMtnPat_FR_9         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjMtnPat_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjMtnPat_FR_9(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjMtnPat_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjMtnPat_FR_9(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjMtnPat_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjMtnPat_FR_9         0

/**
 * Signal RdrObjMtnPat_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjMtnPat_FR_9           0

/**
 * Signal RdrObjMtnPat_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjMtnPat_FR_9           3

/**
 * Signal RdrObjMtnPat_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjMtnPat_FR_9           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjID_FR_9 Signal RdrObjID_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjID_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjID_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjID_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjID_FR_9               1, 0, 47, 7

/**
 * Signal RdrObjID_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjID_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjID_FR_9             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjID_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjID_FR_9(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjID_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjID_FR_9(buf, 0)

/**
 * Signal RdrObjID_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjID_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjID_FR_9             0

/**
 * Signal RdrObjID_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjID_FR_9               0

/**
 * Signal RdrObjID_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjID_FR_9               255

/**
 * Signal RdrObjID_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjID_FR_9               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjTyp_FR_9 Signal RdrObjTyp_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjTyp_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjTyp_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjTyp_FR_9              1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjTyp_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjTyp_FR_9            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjTyp_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjTyp_FR_9(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjTyp_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjTyp_FR_9(buf, 0)

/**
 * Signal RdrObjTyp_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjTyp_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjTyp_FR_9            0

/**
 * Signal RdrObjTyp_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjTyp_FR_9              0

/**
 * Signal RdrObjTyp_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjTyp_FR_9              3

/**
 * Signal RdrObjTyp_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjTyp_FR_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C2h_RdrObjDy_FR_9 Signal RdrObjDy_FR_9 of Message SRR_FR_3C2h (0x3c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C2h
 * @{
 */

/**
 * Signal RdrObjDy_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C2h_RdrObjDy_FR_9 and \ref GET_SRR_FR_3C2h_RdrObjDy_FR_9 instead.
 */
#define SIG_SRR_FR_3C2h_RdrObjDy_FR_9               1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C2h_RdrObjDy_FR_9 or \ref INIT_SRR_FR_3C2h instead.
 */
#define SETUP_SRR_FR_3C2h_RdrObjDy_FR_9             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C2h_RdrObjDy_FR_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C2h_RdrObjDy_FR_9(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C2h_RdrObjDy_FR_9(buf) \
	SET_SRR_FR_3C2h_RdrObjDy_FR_9(buf, 0)

/**
 * Signal RdrObjDy_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C2h_RdrObjDy_FR_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_9 raw initial value.
 */
#define START_SRR_FR_3C2h_RdrObjDy_FR_9             0

/**
 * Signal RdrObjDy_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C2h_RdrObjDy_FR_9               0

/**
 * Signal RdrObjDy_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C2h_RdrObjDy_FR_9               2046

/**
 * Signal RdrObjDy_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C2h_RdrObjDy_FR_9               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjChks2_FR_9 Signal RdrObjChks2_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjChks2_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjChks2_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjChks2_FR_9            1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjChks2_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjChks2_FR_9          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjChks2_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjChks2_FR_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjChks2_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjChks2_FR_9(buf, 0)

/**
 * Signal RdrObjChks2_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjChks2_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjChks2_FR_9          0

/**
 * Signal RdrObjChks2_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjChks2_FR_9            0

/**
 * Signal RdrObjChks2_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjChks2_FR_9            255

/**
 * Signal RdrObjChks2_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjChks2_FR_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjDx_FR_9 Signal RdrObjDx_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjDx_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjDx_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjDx_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjDx_FR_9               1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjDx_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjDx_FR_9             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjDx_FR_9(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjDx_FR_9(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjDx_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjDx_FR_9(buf, 0)

/**
 * Signal RdrObjDx_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjDx_FR_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjDx_FR_9             0

/**
 * Signal RdrObjDx_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjDx_FR_9               0

/**
 * Signal RdrObjDx_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjDx_FR_9               2540

/**
 * Signal RdrObjDx_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjDx_FR_9               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjTiAlv_FR_9 Signal RdrObjTiAlv_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjTiAlv_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjTiAlv_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjTiAlv_FR_9            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjTiAlv_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjTiAlv_FR_9          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjTiAlv_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjTiAlv_FR_9(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjTiAlv_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjTiAlv_FR_9(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjTiAlv_FR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjTiAlv_FR_9          0

/**
 * Signal RdrObjTiAlv_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjTiAlv_FR_9            0

/**
 * Signal RdrObjTiAlv_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjTiAlv_FR_9            127

/**
 * Signal RdrObjTiAlv_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjTiAlv_FR_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjVy_FR_9 Signal RdrObjVy_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjVy_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjVy_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjVy_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjVy_FR_9               1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjVy_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjVy_FR_9             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjVy_FR_9(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjVy_FR_9(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjVy_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjVy_FR_9(buf, 0)

/**
 * Signal RdrObjVy_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjVy_FR_9(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjVy_FR_9             0

/**
 * Signal RdrObjVy_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjVy_FR_9               0

/**
 * Signal RdrObjVy_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjVy_FR_9               1023

/**
 * Signal RdrObjVy_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjVy_FR_9               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjVx_FR_9 Signal RdrObjVx_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjVx_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjVx_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjVx_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjVx_FR_9               1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjVx_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjVx_FR_9             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjVx_FR_9(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjVx_FR_9(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjVx_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjVx_FR_9(buf, 0)

/**
 * Signal RdrObjVx_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjVx_FR_9(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjVx_FR_9             0

/**
 * Signal RdrObjVx_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjVx_FR_9               0

/**
 * Signal RdrObjVx_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjVx_FR_9               1023

/**
 * Signal RdrObjVx_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjVx_FR_9               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjWth_FR_9 Signal RdrObjWth_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjWth_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjWth_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjWth_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjWth_FR_9              1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjWth_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjWth_FR_9            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjWth_FR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjWth_FR_9(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjWth_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjWth_FR_9(buf, 0)

/**
 * Signal RdrObjWth_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjWth_FR_9(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjWth_FR_9            0

/**
 * Signal RdrObjWth_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjWth_FR_9              0

/**
 * Signal RdrObjWth_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjWth_FR_9              50

/**
 * Signal RdrObjWth_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjWth_FR_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C3h_RdrObjHeading_FR_9 Signal RdrObjHeading_FR_9 of Message SRR_FR_3C3h (0x3c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C3h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C3h_RdrObjHeading_FR_9 and \ref GET_SRR_FR_3C3h_RdrObjHeading_FR_9 instead.
 */
#define SIG_SRR_FR_3C3h_RdrObjHeading_FR_9          1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C3h_RdrObjHeading_FR_9 or \ref INIT_SRR_FR_3C3h instead.
 */
#define SETUP_SRR_FR_3C3h_RdrObjHeading_FR_9        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C3h_RdrObjHeading_FR_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C3h_RdrObjHeading_FR_9(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C3h_RdrObjHeading_FR_9(buf) \
	SET_SRR_FR_3C3h_RdrObjHeading_FR_9(buf, 0)

/**
 * Signal RdrObjHeading_FR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C3h_RdrObjHeading_FR_9(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_9 raw initial value.
 */
#define START_SRR_FR_3C3h_RdrObjHeading_FR_9        0

/**
 * Signal RdrObjHeading_FR_9 raw minimum value.
 */
#define MIN_SRR_FR_3C3h_RdrObjHeading_FR_9          0

/**
 * Signal RdrObjHeading_FR_9 raw maximum value.
 */
#define MAX_SRR_FR_3C3h_RdrObjHeading_FR_9          360

/**
 * Signal RdrObjHeading_FR_9 raw offset value.
 */
#define OFF_SRR_FR_3C3h_RdrObjHeading_FR_9          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjChks_FR_10 Signal RdrObjChks_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjChks_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjChks_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjChks_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjChks_FR_10            1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjChks_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjChks_FR_10          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjChks_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjChks_FR_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjChks_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjChks_FR_10(buf, 0)

/**
 * Signal RdrObjChks_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjChks_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjChks_FR_10          0

/**
 * Signal RdrObjChks_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjChks_FR_10            0

/**
 * Signal RdrObjChks_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjChks_FR_10            255

/**
 * Signal RdrObjChks_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjChks_FR_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjCntr_FR_10 Signal RdrObjCntr_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjCntr_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjCntr_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjCntr_FR_10            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjCntr_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjCntr_FR_10          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjCntr_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjCntr_FR_10(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjCntr_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjCntr_FR_10(buf, 0)

/**
 * Signal RdrObjCntr_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjCntr_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjCntr_FR_10          0

/**
 * Signal RdrObjCntr_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjCntr_FR_10            0

/**
 * Signal RdrObjCntr_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjCntr_FR_10            15

/**
 * Signal RdrObjCntr_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjCntr_FR_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjAy_FR_10 Signal RdrObjAy_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjAy_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjAy_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjAy_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjAy_FR_10              1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjAy_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjAy_FR_10            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjAy_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjAy_FR_10(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjAy_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjAy_FR_10(buf, 0)

/**
 * Signal RdrObjAy_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjAy_FR_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjAy_FR_10            0

/**
 * Signal RdrObjAy_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjAy_FR_10              0

/**
 * Signal RdrObjAy_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjAy_FR_10              128

/**
 * Signal RdrObjAy_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjAy_FR_10              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjAx_FR_10 Signal RdrObjAx_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjAx_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjAx_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjAx_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjAx_FR_10              1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjAx_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjAx_FR_10            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjAx_FR_10(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjAx_FR_10(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjAx_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjAx_FR_10(buf, 0)

/**
 * Signal RdrObjAx_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjAx_FR_10(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjAx_FR_10            0

/**
 * Signal RdrObjAx_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjAx_FR_10              0

/**
 * Signal RdrObjAx_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjAx_FR_10              512

/**
 * Signal RdrObjAx_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjAx_FR_10              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjCoast_FR_10 Signal RdrObjCoast_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjCoast_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjCoast_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjCoast_FR_10           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjCoast_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjCoast_FR_10         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjCoast_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjCoast_FR_10(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjCoast_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjCoast_FR_10(buf, 0)

/**
 * Signal RdrObjCoast_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjCoast_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjCoast_FR_10         0

/**
 * Signal RdrObjCoast_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjCoast_FR_10           0

/**
 * Signal RdrObjCoast_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjCoast_FR_10           1

/**
 * Signal RdrObjCoast_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjCoast_FR_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjConf_FR_10 Signal RdrObjConf_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjConf_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjConf_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjConf_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjConf_FR_10            1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjConf_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjConf_FR_10          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjConf_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjConf_FR_10(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjConf_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjConf_FR_10(buf, 0)

/**
 * Signal RdrObjConf_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjConf_FR_10(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjConf_FR_10          0

/**
 * Signal RdrObjConf_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjConf_FR_10            0

/**
 * Signal RdrObjConf_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjConf_FR_10            14

/**
 * Signal RdrObjConf_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjConf_FR_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjMtnPat_FR_10 Signal RdrObjMtnPat_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjMtnPat_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjMtnPat_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjMtnPat_FR_10          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjMtnPat_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjMtnPat_FR_10        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjMtnPat_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjMtnPat_FR_10(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjMtnPat_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjMtnPat_FR_10(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjMtnPat_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjMtnPat_FR_10        0

/**
 * Signal RdrObjMtnPat_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjMtnPat_FR_10          0

/**
 * Signal RdrObjMtnPat_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjMtnPat_FR_10          3

/**
 * Signal RdrObjMtnPat_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjMtnPat_FR_10          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjID_FR_10 Signal RdrObjID_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjID_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjID_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjID_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjID_FR_10              1, 0, 47, 7

/**
 * Signal RdrObjID_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjID_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjID_FR_10            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjID_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjID_FR_10(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjID_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjID_FR_10(buf, 0)

/**
 * Signal RdrObjID_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjID_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjID_FR_10            0

/**
 * Signal RdrObjID_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjID_FR_10              0

/**
 * Signal RdrObjID_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjID_FR_10              255

/**
 * Signal RdrObjID_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjID_FR_10              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjTyp_FR_10 Signal RdrObjTyp_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjTyp_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjTyp_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjTyp_FR_10             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjTyp_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjTyp_FR_10           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjTyp_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjTyp_FR_10(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjTyp_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjTyp_FR_10(buf, 0)

/**
 * Signal RdrObjTyp_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjTyp_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjTyp_FR_10           0

/**
 * Signal RdrObjTyp_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjTyp_FR_10             0

/**
 * Signal RdrObjTyp_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjTyp_FR_10             3

/**
 * Signal RdrObjTyp_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjTyp_FR_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C4h_RdrObjDy_FR_10 Signal RdrObjDy_FR_10 of Message SRR_FR_3C4h (0x3c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C4h
 * @{
 */

/**
 * Signal RdrObjDy_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C4h_RdrObjDy_FR_10 and \ref GET_SRR_FR_3C4h_RdrObjDy_FR_10 instead.
 */
#define SIG_SRR_FR_3C4h_RdrObjDy_FR_10              1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C4h_RdrObjDy_FR_10 or \ref INIT_SRR_FR_3C4h instead.
 */
#define SETUP_SRR_FR_3C4h_RdrObjDy_FR_10            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C4h_RdrObjDy_FR_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C4h_RdrObjDy_FR_10(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C4h_RdrObjDy_FR_10(buf) \
	SET_SRR_FR_3C4h_RdrObjDy_FR_10(buf, 0)

/**
 * Signal RdrObjDy_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C4h_RdrObjDy_FR_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_10 raw initial value.
 */
#define START_SRR_FR_3C4h_RdrObjDy_FR_10            0

/**
 * Signal RdrObjDy_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C4h_RdrObjDy_FR_10              0

/**
 * Signal RdrObjDy_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C4h_RdrObjDy_FR_10              2046

/**
 * Signal RdrObjDy_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C4h_RdrObjDy_FR_10              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjChks2_FR_10 Signal RdrObjChks2_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjChks2_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjChks2_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjChks2_FR_10           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjChks2_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjChks2_FR_10         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjChks2_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjChks2_FR_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjChks2_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjChks2_FR_10(buf, 0)

/**
 * Signal RdrObjChks2_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjChks2_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjChks2_FR_10         0

/**
 * Signal RdrObjChks2_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjChks2_FR_10           0

/**
 * Signal RdrObjChks2_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjChks2_FR_10           255

/**
 * Signal RdrObjChks2_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjChks2_FR_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjDx_FR_10 Signal RdrObjDx_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjDx_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjDx_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjDx_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjDx_FR_10              1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjDx_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjDx_FR_10            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjDx_FR_10(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjDx_FR_10(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjDx_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjDx_FR_10(buf, 0)

/**
 * Signal RdrObjDx_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjDx_FR_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjDx_FR_10            0

/**
 * Signal RdrObjDx_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjDx_FR_10              0

/**
 * Signal RdrObjDx_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjDx_FR_10              2540

/**
 * Signal RdrObjDx_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjDx_FR_10              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjTiAlv_FR_10 Signal RdrObjTiAlv_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjTiAlv_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjTiAlv_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjTiAlv_FR_10           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjTiAlv_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjTiAlv_FR_10         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjTiAlv_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjTiAlv_FR_10(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjTiAlv_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjTiAlv_FR_10(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjTiAlv_FR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjTiAlv_FR_10         0

/**
 * Signal RdrObjTiAlv_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjTiAlv_FR_10           0

/**
 * Signal RdrObjTiAlv_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjTiAlv_FR_10           127

/**
 * Signal RdrObjTiAlv_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjTiAlv_FR_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjVy_FR_10 Signal RdrObjVy_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjVy_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjVy_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjVy_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjVy_FR_10              1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjVy_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjVy_FR_10            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjVy_FR_10(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjVy_FR_10(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjVy_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjVy_FR_10(buf, 0)

/**
 * Signal RdrObjVy_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjVy_FR_10(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjVy_FR_10            0

/**
 * Signal RdrObjVy_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjVy_FR_10              0

/**
 * Signal RdrObjVy_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjVy_FR_10              1023

/**
 * Signal RdrObjVy_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjVy_FR_10              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjVx_FR_10 Signal RdrObjVx_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjVx_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjVx_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjVx_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjVx_FR_10              1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjVx_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjVx_FR_10            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjVx_FR_10(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjVx_FR_10(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjVx_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjVx_FR_10(buf, 0)

/**
 * Signal RdrObjVx_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjVx_FR_10(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjVx_FR_10            0

/**
 * Signal RdrObjVx_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjVx_FR_10              0

/**
 * Signal RdrObjVx_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjVx_FR_10              1023

/**
 * Signal RdrObjVx_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjVx_FR_10              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjWth_FR_10 Signal RdrObjWth_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjWth_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjWth_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjWth_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjWth_FR_10             1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjWth_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjWth_FR_10           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjWth_FR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjWth_FR_10(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjWth_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjWth_FR_10(buf, 0)

/**
 * Signal RdrObjWth_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjWth_FR_10(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjWth_FR_10           0

/**
 * Signal RdrObjWth_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjWth_FR_10             0

/**
 * Signal RdrObjWth_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjWth_FR_10             50

/**
 * Signal RdrObjWth_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjWth_FR_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C5h_RdrObjHeading_FR_10 Signal RdrObjHeading_FR_10 of Message SRR_FR_3C5h (0x3c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C5h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C5h_RdrObjHeading_FR_10 and \ref GET_SRR_FR_3C5h_RdrObjHeading_FR_10 instead.
 */
#define SIG_SRR_FR_3C5h_RdrObjHeading_FR_10         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C5h_RdrObjHeading_FR_10 or \ref INIT_SRR_FR_3C5h instead.
 */
#define SETUP_SRR_FR_3C5h_RdrObjHeading_FR_10       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C5h_RdrObjHeading_FR_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C5h_RdrObjHeading_FR_10(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C5h_RdrObjHeading_FR_10(buf) \
	SET_SRR_FR_3C5h_RdrObjHeading_FR_10(buf, 0)

/**
 * Signal RdrObjHeading_FR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C5h_RdrObjHeading_FR_10(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_10 raw initial value.
 */
#define START_SRR_FR_3C5h_RdrObjHeading_FR_10       0

/**
 * Signal RdrObjHeading_FR_10 raw minimum value.
 */
#define MIN_SRR_FR_3C5h_RdrObjHeading_FR_10         0

/**
 * Signal RdrObjHeading_FR_10 raw maximum value.
 */
#define MAX_SRR_FR_3C5h_RdrObjHeading_FR_10         360

/**
 * Signal RdrObjHeading_FR_10 raw offset value.
 */
#define OFF_SRR_FR_3C5h_RdrObjHeading_FR_10         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjChks_FR_11 Signal RdrObjChks_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjChks_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjChks_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjChks_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjChks_FR_11            1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjChks_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjChks_FR_11          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjChks_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjChks_FR_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjChks_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjChks_FR_11(buf, 0)

/**
 * Signal RdrObjChks_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjChks_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjChks_FR_11          0

/**
 * Signal RdrObjChks_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjChks_FR_11            0

/**
 * Signal RdrObjChks_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjChks_FR_11            255

/**
 * Signal RdrObjChks_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjChks_FR_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjCntr_FR_11 Signal RdrObjCntr_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjCntr_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjCntr_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjCntr_FR_11            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjCntr_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjCntr_FR_11          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjCntr_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjCntr_FR_11(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjCntr_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjCntr_FR_11(buf, 0)

/**
 * Signal RdrObjCntr_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjCntr_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjCntr_FR_11          0

/**
 * Signal RdrObjCntr_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjCntr_FR_11            0

/**
 * Signal RdrObjCntr_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjCntr_FR_11            15

/**
 * Signal RdrObjCntr_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjCntr_FR_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjAy_FR_11 Signal RdrObjAy_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjAy_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjAy_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjAy_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjAy_FR_11              1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjAy_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjAy_FR_11            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjAy_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjAy_FR_11(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjAy_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjAy_FR_11(buf, 0)

/**
 * Signal RdrObjAy_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjAy_FR_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjAy_FR_11            0

/**
 * Signal RdrObjAy_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjAy_FR_11              0

/**
 * Signal RdrObjAy_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjAy_FR_11              128

/**
 * Signal RdrObjAy_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjAy_FR_11              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjAx_FR_11 Signal RdrObjAx_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjAx_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjAx_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjAx_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjAx_FR_11              1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjAx_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjAx_FR_11            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjAx_FR_11(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjAx_FR_11(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjAx_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjAx_FR_11(buf, 0)

/**
 * Signal RdrObjAx_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjAx_FR_11(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjAx_FR_11            0

/**
 * Signal RdrObjAx_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjAx_FR_11              0

/**
 * Signal RdrObjAx_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjAx_FR_11              512

/**
 * Signal RdrObjAx_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjAx_FR_11              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjCoast_FR_11 Signal RdrObjCoast_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjCoast_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjCoast_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjCoast_FR_11           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjCoast_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjCoast_FR_11         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjCoast_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjCoast_FR_11(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjCoast_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjCoast_FR_11(buf, 0)

/**
 * Signal RdrObjCoast_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjCoast_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjCoast_FR_11         0

/**
 * Signal RdrObjCoast_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjCoast_FR_11           0

/**
 * Signal RdrObjCoast_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjCoast_FR_11           1

/**
 * Signal RdrObjCoast_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjCoast_FR_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjConf_FR_11 Signal RdrObjConf_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjConf_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjConf_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjConf_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjConf_FR_11            1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjConf_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjConf_FR_11          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjConf_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjConf_FR_11(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjConf_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjConf_FR_11(buf, 0)

/**
 * Signal RdrObjConf_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjConf_FR_11(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjConf_FR_11          0

/**
 * Signal RdrObjConf_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjConf_FR_11            0

/**
 * Signal RdrObjConf_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjConf_FR_11            14

/**
 * Signal RdrObjConf_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjConf_FR_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjMtnPat_FR_11 Signal RdrObjMtnPat_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjMtnPat_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjMtnPat_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjMtnPat_FR_11          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjMtnPat_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjMtnPat_FR_11        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjMtnPat_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjMtnPat_FR_11(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjMtnPat_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjMtnPat_FR_11(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjMtnPat_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjMtnPat_FR_11        0

/**
 * Signal RdrObjMtnPat_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjMtnPat_FR_11          0

/**
 * Signal RdrObjMtnPat_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjMtnPat_FR_11          3

/**
 * Signal RdrObjMtnPat_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjMtnPat_FR_11          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjID_FR_11 Signal RdrObjID_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjID_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjID_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjID_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjID_FR_11              1, 0, 47, 7

/**
 * Signal RdrObjID_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjID_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjID_FR_11            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjID_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjID_FR_11(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjID_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjID_FR_11(buf, 0)

/**
 * Signal RdrObjID_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjID_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjID_FR_11            0

/**
 * Signal RdrObjID_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjID_FR_11              0

/**
 * Signal RdrObjID_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjID_FR_11              255

/**
 * Signal RdrObjID_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjID_FR_11              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjTyp_FR_11 Signal RdrObjTyp_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjTyp_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjTyp_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjTyp_FR_11             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjTyp_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjTyp_FR_11           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjTyp_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjTyp_FR_11(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjTyp_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjTyp_FR_11(buf, 0)

/**
 * Signal RdrObjTyp_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjTyp_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjTyp_FR_11           0

/**
 * Signal RdrObjTyp_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjTyp_FR_11             0

/**
 * Signal RdrObjTyp_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjTyp_FR_11             3

/**
 * Signal RdrObjTyp_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjTyp_FR_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C6h_RdrObjDy_FR_11 Signal RdrObjDy_FR_11 of Message SRR_FR_3C6h (0x3c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C6h
 * @{
 */

/**
 * Signal RdrObjDy_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C6h_RdrObjDy_FR_11 and \ref GET_SRR_FR_3C6h_RdrObjDy_FR_11 instead.
 */
#define SIG_SRR_FR_3C6h_RdrObjDy_FR_11              1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C6h_RdrObjDy_FR_11 or \ref INIT_SRR_FR_3C6h instead.
 */
#define SETUP_SRR_FR_3C6h_RdrObjDy_FR_11            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C6h_RdrObjDy_FR_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C6h_RdrObjDy_FR_11(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C6h_RdrObjDy_FR_11(buf) \
	SET_SRR_FR_3C6h_RdrObjDy_FR_11(buf, 0)

/**
 * Signal RdrObjDy_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C6h_RdrObjDy_FR_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_11 raw initial value.
 */
#define START_SRR_FR_3C6h_RdrObjDy_FR_11            0

/**
 * Signal RdrObjDy_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C6h_RdrObjDy_FR_11              0

/**
 * Signal RdrObjDy_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C6h_RdrObjDy_FR_11              2046

/**
 * Signal RdrObjDy_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C6h_RdrObjDy_FR_11              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjChks2_FR_11 Signal RdrObjChks2_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjChks2_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjChks2_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjChks2_FR_11           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjChks2_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjChks2_FR_11         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjChks2_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjChks2_FR_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjChks2_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjChks2_FR_11(buf, 0)

/**
 * Signal RdrObjChks2_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjChks2_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjChks2_FR_11         0

/**
 * Signal RdrObjChks2_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjChks2_FR_11           0

/**
 * Signal RdrObjChks2_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjChks2_FR_11           255

/**
 * Signal RdrObjChks2_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjChks2_FR_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjDx_FR_11 Signal RdrObjDx_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjDx_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjDx_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjDx_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjDx_FR_11              1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjDx_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjDx_FR_11            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjDx_FR_11(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjDx_FR_11(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjDx_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjDx_FR_11(buf, 0)

/**
 * Signal RdrObjDx_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjDx_FR_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjDx_FR_11            0

/**
 * Signal RdrObjDx_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjDx_FR_11              0

/**
 * Signal RdrObjDx_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjDx_FR_11              2540

/**
 * Signal RdrObjDx_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjDx_FR_11              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjTiAlv_FR_11 Signal RdrObjTiAlv_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjTiAlv_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjTiAlv_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjTiAlv_FR_11           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjTiAlv_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjTiAlv_FR_11         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjTiAlv_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjTiAlv_FR_11(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjTiAlv_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjTiAlv_FR_11(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjTiAlv_FR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjTiAlv_FR_11         0

/**
 * Signal RdrObjTiAlv_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjTiAlv_FR_11           0

/**
 * Signal RdrObjTiAlv_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjTiAlv_FR_11           127

/**
 * Signal RdrObjTiAlv_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjTiAlv_FR_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjVy_FR_11 Signal RdrObjVy_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjVy_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjVy_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjVy_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjVy_FR_11              1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjVy_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjVy_FR_11            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjVy_FR_11(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjVy_FR_11(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjVy_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjVy_FR_11(buf, 0)

/**
 * Signal RdrObjVy_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjVy_FR_11(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjVy_FR_11            0

/**
 * Signal RdrObjVy_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjVy_FR_11              0

/**
 * Signal RdrObjVy_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjVy_FR_11              1023

/**
 * Signal RdrObjVy_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjVy_FR_11              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjVx_FR_11 Signal RdrObjVx_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjVx_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjVx_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjVx_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjVx_FR_11              1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjVx_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjVx_FR_11            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjVx_FR_11(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjVx_FR_11(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjVx_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjVx_FR_11(buf, 0)

/**
 * Signal RdrObjVx_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjVx_FR_11(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjVx_FR_11            0

/**
 * Signal RdrObjVx_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjVx_FR_11              0

/**
 * Signal RdrObjVx_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjVx_FR_11              1023

/**
 * Signal RdrObjVx_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjVx_FR_11              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjWth_FR_11 Signal RdrObjWth_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjWth_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjWth_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjWth_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjWth_FR_11             1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjWth_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjWth_FR_11           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjWth_FR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjWth_FR_11(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjWth_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjWth_FR_11(buf, 0)

/**
 * Signal RdrObjWth_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjWth_FR_11(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjWth_FR_11           0

/**
 * Signal RdrObjWth_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjWth_FR_11             0

/**
 * Signal RdrObjWth_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjWth_FR_11             50

/**
 * Signal RdrObjWth_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjWth_FR_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C7h_RdrObjHeading_FR_11 Signal RdrObjHeading_FR_11 of Message SRR_FR_3C7h (0x3c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C7h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C7h_RdrObjHeading_FR_11 and \ref GET_SRR_FR_3C7h_RdrObjHeading_FR_11 instead.
 */
#define SIG_SRR_FR_3C7h_RdrObjHeading_FR_11         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C7h_RdrObjHeading_FR_11 or \ref INIT_SRR_FR_3C7h instead.
 */
#define SETUP_SRR_FR_3C7h_RdrObjHeading_FR_11       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C7h_RdrObjHeading_FR_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C7h_RdrObjHeading_FR_11(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C7h_RdrObjHeading_FR_11(buf) \
	SET_SRR_FR_3C7h_RdrObjHeading_FR_11(buf, 0)

/**
 * Signal RdrObjHeading_FR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C7h_RdrObjHeading_FR_11(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_11 raw initial value.
 */
#define START_SRR_FR_3C7h_RdrObjHeading_FR_11       0

/**
 * Signal RdrObjHeading_FR_11 raw minimum value.
 */
#define MIN_SRR_FR_3C7h_RdrObjHeading_FR_11         0

/**
 * Signal RdrObjHeading_FR_11 raw maximum value.
 */
#define MAX_SRR_FR_3C7h_RdrObjHeading_FR_11         360

/**
 * Signal RdrObjHeading_FR_11 raw offset value.
 */
#define OFF_SRR_FR_3C7h_RdrObjHeading_FR_11         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjChks_FR_12 Signal RdrObjChks_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjChks_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjChks_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjChks_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjChks_FR_12            1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjChks_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjChks_FR_12          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjChks_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjChks_FR_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjChks_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjChks_FR_12(buf, 0)

/**
 * Signal RdrObjChks_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjChks_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjChks_FR_12          0

/**
 * Signal RdrObjChks_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjChks_FR_12            0

/**
 * Signal RdrObjChks_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjChks_FR_12            255

/**
 * Signal RdrObjChks_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjChks_FR_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjCntr_FR_12 Signal RdrObjCntr_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjCntr_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjCntr_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjCntr_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjCntr_FR_12            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjCntr_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjCntr_FR_12          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjCntr_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjCntr_FR_12(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjCntr_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjCntr_FR_12(buf, 0)

/**
 * Signal RdrObjCntr_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjCntr_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjCntr_FR_12          0

/**
 * Signal RdrObjCntr_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjCntr_FR_12            0

/**
 * Signal RdrObjCntr_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjCntr_FR_12            15

/**
 * Signal RdrObjCntr_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjCntr_FR_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjAy_FR_12 Signal RdrObjAy_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjAy_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjAy_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjAy_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjAy_FR_12              1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjAy_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjAy_FR_12            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjAy_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjAy_FR_12(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjAy_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjAy_FR_12(buf, 0)

/**
 * Signal RdrObjAy_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjAy_FR_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjAy_FR_12            0

/**
 * Signal RdrObjAy_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjAy_FR_12              0

/**
 * Signal RdrObjAy_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjAy_FR_12              128

/**
 * Signal RdrObjAy_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjAy_FR_12              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjAx_FR_12 Signal RdrObjAx_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjAx_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjAx_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjAx_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjAx_FR_12              1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjAx_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjAx_FR_12            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjAx_FR_12(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjAx_FR_12(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjAx_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjAx_FR_12(buf, 0)

/**
 * Signal RdrObjAx_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjAx_FR_12(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjAx_FR_12            0

/**
 * Signal RdrObjAx_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjAx_FR_12              0

/**
 * Signal RdrObjAx_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjAx_FR_12              512

/**
 * Signal RdrObjAx_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjAx_FR_12              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjCoast_FR_12 Signal RdrObjCoast_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjCoast_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjCoast_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjCoast_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjCoast_FR_12           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjCoast_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjCoast_FR_12         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjCoast_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjCoast_FR_12(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjCoast_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjCoast_FR_12(buf, 0)

/**
 * Signal RdrObjCoast_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjCoast_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjCoast_FR_12         0

/**
 * Signal RdrObjCoast_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjCoast_FR_12           0

/**
 * Signal RdrObjCoast_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjCoast_FR_12           1

/**
 * Signal RdrObjCoast_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjCoast_FR_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjConf_FR_12 Signal RdrObjConf_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjConf_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjConf_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjConf_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjConf_FR_12            1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjConf_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjConf_FR_12          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjConf_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjConf_FR_12(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjConf_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjConf_FR_12(buf, 0)

/**
 * Signal RdrObjConf_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjConf_FR_12(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjConf_FR_12          0

/**
 * Signal RdrObjConf_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjConf_FR_12            0

/**
 * Signal RdrObjConf_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjConf_FR_12            14

/**
 * Signal RdrObjConf_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjConf_FR_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjMtnPat_FR_12 Signal RdrObjMtnPat_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjMtnPat_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjMtnPat_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjMtnPat_FR_12          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjMtnPat_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjMtnPat_FR_12        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjMtnPat_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjMtnPat_FR_12(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjMtnPat_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjMtnPat_FR_12(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjMtnPat_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjMtnPat_FR_12        0

/**
 * Signal RdrObjMtnPat_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjMtnPat_FR_12          0

/**
 * Signal RdrObjMtnPat_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjMtnPat_FR_12          3

/**
 * Signal RdrObjMtnPat_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjMtnPat_FR_12          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjID_FR_12 Signal RdrObjID_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjID_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjID_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjID_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjID_FR_12              1, 0, 47, 7

/**
 * Signal RdrObjID_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjID_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjID_FR_12            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjID_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjID_FR_12(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjID_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjID_FR_12(buf, 0)

/**
 * Signal RdrObjID_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjID_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjID_FR_12            0

/**
 * Signal RdrObjID_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjID_FR_12              0

/**
 * Signal RdrObjID_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjID_FR_12              255

/**
 * Signal RdrObjID_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjID_FR_12              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjTyp_FR_12 Signal RdrObjTyp_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjTyp_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjTyp_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjTyp_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjTyp_FR_12             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjTyp_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjTyp_FR_12           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjTyp_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjTyp_FR_12(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjTyp_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjTyp_FR_12(buf, 0)

/**
 * Signal RdrObjTyp_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjTyp_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjTyp_FR_12           0

/**
 * Signal RdrObjTyp_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjTyp_FR_12             0

/**
 * Signal RdrObjTyp_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjTyp_FR_12             3

/**
 * Signal RdrObjTyp_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjTyp_FR_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C8h_RdrObjDy_FR_12 Signal RdrObjDy_FR_12 of Message SRR_FR_3C8h (0x3c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C8h
 * @{
 */

/**
 * Signal RdrObjDy_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C8h_RdrObjDy_FR_12 and \ref GET_SRR_FR_3C8h_RdrObjDy_FR_12 instead.
 */
#define SIG_SRR_FR_3C8h_RdrObjDy_FR_12              1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C8h_RdrObjDy_FR_12 or \ref INIT_SRR_FR_3C8h instead.
 */
#define SETUP_SRR_FR_3C8h_RdrObjDy_FR_12            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C8h_RdrObjDy_FR_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C8h_RdrObjDy_FR_12(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C8h_RdrObjDy_FR_12(buf) \
	SET_SRR_FR_3C8h_RdrObjDy_FR_12(buf, 0)

/**
 * Signal RdrObjDy_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C8h_RdrObjDy_FR_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_12 raw initial value.
 */
#define START_SRR_FR_3C8h_RdrObjDy_FR_12            0

/**
 * Signal RdrObjDy_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C8h_RdrObjDy_FR_12              0

/**
 * Signal RdrObjDy_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C8h_RdrObjDy_FR_12              2046

/**
 * Signal RdrObjDy_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C8h_RdrObjDy_FR_12              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjChks2_FR_12 Signal RdrObjChks2_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjChks2_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjChks2_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjChks2_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjChks2_FR_12           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjChks2_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjChks2_FR_12         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjChks2_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjChks2_FR_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjChks2_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjChks2_FR_12(buf, 0)

/**
 * Signal RdrObjChks2_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjChks2_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjChks2_FR_12         0

/**
 * Signal RdrObjChks2_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjChks2_FR_12           0

/**
 * Signal RdrObjChks2_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjChks2_FR_12           255

/**
 * Signal RdrObjChks2_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjChks2_FR_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjDx_FR_12 Signal RdrObjDx_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjDx_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjDx_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjDx_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjDx_FR_12              1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjDx_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjDx_FR_12            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjDx_FR_12(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjDx_FR_12(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjDx_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjDx_FR_12(buf, 0)

/**
 * Signal RdrObjDx_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjDx_FR_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjDx_FR_12            0

/**
 * Signal RdrObjDx_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjDx_FR_12              0

/**
 * Signal RdrObjDx_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjDx_FR_12              2540

/**
 * Signal RdrObjDx_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjDx_FR_12              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjTiAlv_FR_12 Signal RdrObjTiAlv_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjTiAlv_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjTiAlv_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjTiAlv_FR_12           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjTiAlv_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjTiAlv_FR_12         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjTiAlv_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjTiAlv_FR_12(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjTiAlv_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjTiAlv_FR_12(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjTiAlv_FR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjTiAlv_FR_12         0

/**
 * Signal RdrObjTiAlv_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjTiAlv_FR_12           0

/**
 * Signal RdrObjTiAlv_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjTiAlv_FR_12           127

/**
 * Signal RdrObjTiAlv_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjTiAlv_FR_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjVy_FR_12 Signal RdrObjVy_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjVy_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjVy_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjVy_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjVy_FR_12              1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjVy_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjVy_FR_12            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjVy_FR_12(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjVy_FR_12(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjVy_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjVy_FR_12(buf, 0)

/**
 * Signal RdrObjVy_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjVy_FR_12(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjVy_FR_12            0

/**
 * Signal RdrObjVy_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjVy_FR_12              0

/**
 * Signal RdrObjVy_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjVy_FR_12              1023

/**
 * Signal RdrObjVy_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjVy_FR_12              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjVx_FR_12 Signal RdrObjVx_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjVx_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjVx_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjVx_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjVx_FR_12              1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjVx_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjVx_FR_12            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjVx_FR_12(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjVx_FR_12(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjVx_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjVx_FR_12(buf, 0)

/**
 * Signal RdrObjVx_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjVx_FR_12(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjVx_FR_12            0

/**
 * Signal RdrObjVx_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjVx_FR_12              0

/**
 * Signal RdrObjVx_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjVx_FR_12              1023

/**
 * Signal RdrObjVx_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjVx_FR_12              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjWth_FR_12 Signal RdrObjWth_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjWth_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjWth_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjWth_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjWth_FR_12             1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjWth_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjWth_FR_12           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjWth_FR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjWth_FR_12(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjWth_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjWth_FR_12(buf, 0)

/**
 * Signal RdrObjWth_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjWth_FR_12(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjWth_FR_12           0

/**
 * Signal RdrObjWth_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjWth_FR_12             0

/**
 * Signal RdrObjWth_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjWth_FR_12             50

/**
 * Signal RdrObjWth_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjWth_FR_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3C9h_RdrObjHeading_FR_12 Signal RdrObjHeading_FR_12 of Message SRR_FR_3C9h (0x3c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3C9h
 * @{
 */

/**
 * Signal RdrObjHeading_FR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3C9h_RdrObjHeading_FR_12 and \ref GET_SRR_FR_3C9h_RdrObjHeading_FR_12 instead.
 */
#define SIG_SRR_FR_3C9h_RdrObjHeading_FR_12         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3C9h_RdrObjHeading_FR_12 or \ref INIT_SRR_FR_3C9h instead.
 */
#define SETUP_SRR_FR_3C9h_RdrObjHeading_FR_12       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3C9h_RdrObjHeading_FR_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3C9h_RdrObjHeading_FR_12(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3C9h_RdrObjHeading_FR_12(buf) \
	SET_SRR_FR_3C9h_RdrObjHeading_FR_12(buf, 0)

/**
 * Signal RdrObjHeading_FR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3C9h_RdrObjHeading_FR_12(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_12 raw initial value.
 */
#define START_SRR_FR_3C9h_RdrObjHeading_FR_12       0

/**
 * Signal RdrObjHeading_FR_12 raw minimum value.
 */
#define MIN_SRR_FR_3C9h_RdrObjHeading_FR_12         0

/**
 * Signal RdrObjHeading_FR_12 raw maximum value.
 */
#define MAX_SRR_FR_3C9h_RdrObjHeading_FR_12         360

/**
 * Signal RdrObjHeading_FR_12 raw offset value.
 */
#define OFF_SRR_FR_3C9h_RdrObjHeading_FR_12         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjChks_FR_13 Signal RdrObjChks_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjChks_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjChks_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjChks_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjChks_FR_13            1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjChks_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjChks_FR_13          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjChks_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjChks_FR_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjChks_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjChks_FR_13(buf, 0)

/**
 * Signal RdrObjChks_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjChks_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjChks_FR_13          0

/**
 * Signal RdrObjChks_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjChks_FR_13            0

/**
 * Signal RdrObjChks_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjChks_FR_13            255

/**
 * Signal RdrObjChks_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjChks_FR_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjCntr_FR_13 Signal RdrObjCntr_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjCntr_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjCntr_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjCntr_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjCntr_FR_13            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjCntr_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjCntr_FR_13          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjCntr_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjCntr_FR_13(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjCntr_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjCntr_FR_13(buf, 0)

/**
 * Signal RdrObjCntr_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjCntr_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjCntr_FR_13          0

/**
 * Signal RdrObjCntr_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjCntr_FR_13            0

/**
 * Signal RdrObjCntr_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjCntr_FR_13            15

/**
 * Signal RdrObjCntr_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjCntr_FR_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjAy_FR_13 Signal RdrObjAy_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjAy_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjAy_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjAy_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjAy_FR_13              1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjAy_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjAy_FR_13            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjAy_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjAy_FR_13(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjAy_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjAy_FR_13(buf, 0)

/**
 * Signal RdrObjAy_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjAy_FR_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjAy_FR_13            0

/**
 * Signal RdrObjAy_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjAy_FR_13              0

/**
 * Signal RdrObjAy_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjAy_FR_13              128

/**
 * Signal RdrObjAy_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjAy_FR_13              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjAx_FR_13 Signal RdrObjAx_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjAx_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjAx_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjAx_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjAx_FR_13              1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjAx_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjAx_FR_13            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjAx_FR_13(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjAx_FR_13(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjAx_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjAx_FR_13(buf, 0)

/**
 * Signal RdrObjAx_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjAx_FR_13(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjAx_FR_13            0

/**
 * Signal RdrObjAx_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjAx_FR_13              0

/**
 * Signal RdrObjAx_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjAx_FR_13              512

/**
 * Signal RdrObjAx_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjAx_FR_13              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjCoast_FR_13 Signal RdrObjCoast_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjCoast_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjCoast_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjCoast_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjCoast_FR_13           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjCoast_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjCoast_FR_13         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjCoast_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjCoast_FR_13(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjCoast_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjCoast_FR_13(buf, 0)

/**
 * Signal RdrObjCoast_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjCoast_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjCoast_FR_13         0

/**
 * Signal RdrObjCoast_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjCoast_FR_13           0

/**
 * Signal RdrObjCoast_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjCoast_FR_13           1

/**
 * Signal RdrObjCoast_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjCoast_FR_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjConf_FR_13 Signal RdrObjConf_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjConf_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjConf_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjConf_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjConf_FR_13            1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjConf_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjConf_FR_13          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjConf_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjConf_FR_13(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjConf_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjConf_FR_13(buf, 0)

/**
 * Signal RdrObjConf_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjConf_FR_13(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjConf_FR_13          0

/**
 * Signal RdrObjConf_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjConf_FR_13            0

/**
 * Signal RdrObjConf_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjConf_FR_13            14

/**
 * Signal RdrObjConf_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjConf_FR_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjMtnPat_FR_13 Signal RdrObjMtnPat_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjMtnPat_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjMtnPat_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjMtnPat_FR_13          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjMtnPat_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjMtnPat_FR_13        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjMtnPat_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjMtnPat_FR_13(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjMtnPat_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjMtnPat_FR_13(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjMtnPat_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjMtnPat_FR_13        0

/**
 * Signal RdrObjMtnPat_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjMtnPat_FR_13          0

/**
 * Signal RdrObjMtnPat_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjMtnPat_FR_13          3

/**
 * Signal RdrObjMtnPat_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjMtnPat_FR_13          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjID_FR_13 Signal RdrObjID_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjID_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjID_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjID_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjID_FR_13              1, 0, 47, 7

/**
 * Signal RdrObjID_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjID_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjID_FR_13            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjID_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjID_FR_13(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjID_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjID_FR_13(buf, 0)

/**
 * Signal RdrObjID_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjID_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjID_FR_13            0

/**
 * Signal RdrObjID_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjID_FR_13              0

/**
 * Signal RdrObjID_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjID_FR_13              255

/**
 * Signal RdrObjID_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjID_FR_13              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjTyp_FR_13 Signal RdrObjTyp_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjTyp_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjTyp_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjTyp_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjTyp_FR_13             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjTyp_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjTyp_FR_13           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjTyp_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjTyp_FR_13(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjTyp_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjTyp_FR_13(buf, 0)

/**
 * Signal RdrObjTyp_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjTyp_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjTyp_FR_13           0

/**
 * Signal RdrObjTyp_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjTyp_FR_13             0

/**
 * Signal RdrObjTyp_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjTyp_FR_13             3

/**
 * Signal RdrObjTyp_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjTyp_FR_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CAh_RdrObjDy_FR_13 Signal RdrObjDy_FR_13 of Message SRR_FR_3CAh (0x3ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CAh
 * @{
 */

/**
 * Signal RdrObjDy_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CAh_RdrObjDy_FR_13 and \ref GET_SRR_FR_3CAh_RdrObjDy_FR_13 instead.
 */
#define SIG_SRR_FR_3CAh_RdrObjDy_FR_13              1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CAh_RdrObjDy_FR_13 or \ref INIT_SRR_FR_3CAh instead.
 */
#define SETUP_SRR_FR_3CAh_RdrObjDy_FR_13            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CAh_RdrObjDy_FR_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CAh_RdrObjDy_FR_13(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CAh_RdrObjDy_FR_13(buf) \
	SET_SRR_FR_3CAh_RdrObjDy_FR_13(buf, 0)

/**
 * Signal RdrObjDy_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CAh_RdrObjDy_FR_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_13 raw initial value.
 */
#define START_SRR_FR_3CAh_RdrObjDy_FR_13            0

/**
 * Signal RdrObjDy_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CAh_RdrObjDy_FR_13              0

/**
 * Signal RdrObjDy_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CAh_RdrObjDy_FR_13              2046

/**
 * Signal RdrObjDy_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CAh_RdrObjDy_FR_13              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjChks2_FR_13 Signal RdrObjChks2_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjChks2_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjChks2_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjChks2_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjChks2_FR_13           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjChks2_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjChks2_FR_13         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjChks2_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjChks2_FR_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjChks2_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjChks2_FR_13(buf, 0)

/**
 * Signal RdrObjChks2_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjChks2_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjChks2_FR_13         0

/**
 * Signal RdrObjChks2_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjChks2_FR_13           0

/**
 * Signal RdrObjChks2_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjChks2_FR_13           255

/**
 * Signal RdrObjChks2_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjChks2_FR_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjDx_FR_13 Signal RdrObjDx_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjDx_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjDx_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjDx_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjDx_FR_13              1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjDx_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjDx_FR_13            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjDx_FR_13(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjDx_FR_13(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjDx_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjDx_FR_13(buf, 0)

/**
 * Signal RdrObjDx_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjDx_FR_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjDx_FR_13            0

/**
 * Signal RdrObjDx_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjDx_FR_13              0

/**
 * Signal RdrObjDx_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjDx_FR_13              2540

/**
 * Signal RdrObjDx_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjDx_FR_13              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjTiAlv_FR_13 Signal RdrObjTiAlv_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjTiAlv_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjTiAlv_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjTiAlv_FR_13           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjTiAlv_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjTiAlv_FR_13         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjTiAlv_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjTiAlv_FR_13(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjTiAlv_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjTiAlv_FR_13(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjTiAlv_FR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjTiAlv_FR_13         0

/**
 * Signal RdrObjTiAlv_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjTiAlv_FR_13           0

/**
 * Signal RdrObjTiAlv_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjTiAlv_FR_13           127

/**
 * Signal RdrObjTiAlv_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjTiAlv_FR_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjVy_FR_13 Signal RdrObjVy_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjVy_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjVy_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjVy_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjVy_FR_13              1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjVy_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjVy_FR_13            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjVy_FR_13(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjVy_FR_13(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjVy_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjVy_FR_13(buf, 0)

/**
 * Signal RdrObjVy_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjVy_FR_13(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjVy_FR_13            0

/**
 * Signal RdrObjVy_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjVy_FR_13              0

/**
 * Signal RdrObjVy_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjVy_FR_13              1023

/**
 * Signal RdrObjVy_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjVy_FR_13              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjVx_FR_13 Signal RdrObjVx_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjVx_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjVx_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjVx_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjVx_FR_13              1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjVx_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjVx_FR_13            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjVx_FR_13(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjVx_FR_13(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjVx_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjVx_FR_13(buf, 0)

/**
 * Signal RdrObjVx_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjVx_FR_13(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjVx_FR_13            0

/**
 * Signal RdrObjVx_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjVx_FR_13              0

/**
 * Signal RdrObjVx_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjVx_FR_13              1023

/**
 * Signal RdrObjVx_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjVx_FR_13              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjWth_FR_13 Signal RdrObjWth_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjWth_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjWth_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjWth_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjWth_FR_13             1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjWth_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjWth_FR_13           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjWth_FR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjWth_FR_13(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjWth_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjWth_FR_13(buf, 0)

/**
 * Signal RdrObjWth_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjWth_FR_13(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjWth_FR_13           0

/**
 * Signal RdrObjWth_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjWth_FR_13             0

/**
 * Signal RdrObjWth_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjWth_FR_13             50

/**
 * Signal RdrObjWth_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjWth_FR_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CBh_RdrObjHeading_FR_13 Signal RdrObjHeading_FR_13 of Message SRR_FR_3CBh (0x3cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CBh
 * @{
 */

/**
 * Signal RdrObjHeading_FR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CBh_RdrObjHeading_FR_13 and \ref GET_SRR_FR_3CBh_RdrObjHeading_FR_13 instead.
 */
#define SIG_SRR_FR_3CBh_RdrObjHeading_FR_13         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CBh_RdrObjHeading_FR_13 or \ref INIT_SRR_FR_3CBh instead.
 */
#define SETUP_SRR_FR_3CBh_RdrObjHeading_FR_13       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CBh_RdrObjHeading_FR_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CBh_RdrObjHeading_FR_13(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CBh_RdrObjHeading_FR_13(buf) \
	SET_SRR_FR_3CBh_RdrObjHeading_FR_13(buf, 0)

/**
 * Signal RdrObjHeading_FR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CBh_RdrObjHeading_FR_13(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_13 raw initial value.
 */
#define START_SRR_FR_3CBh_RdrObjHeading_FR_13       0

/**
 * Signal RdrObjHeading_FR_13 raw minimum value.
 */
#define MIN_SRR_FR_3CBh_RdrObjHeading_FR_13         0

/**
 * Signal RdrObjHeading_FR_13 raw maximum value.
 */
#define MAX_SRR_FR_3CBh_RdrObjHeading_FR_13         360

/**
 * Signal RdrObjHeading_FR_13 raw offset value.
 */
#define OFF_SRR_FR_3CBh_RdrObjHeading_FR_13         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjChks_FR_14 Signal RdrObjChks_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjChks_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjChks_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjChks_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjChks_FR_14            1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjChks_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjChks_FR_14          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjChks_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjChks_FR_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjChks_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjChks_FR_14(buf, 0)

/**
 * Signal RdrObjChks_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjChks_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjChks_FR_14          0

/**
 * Signal RdrObjChks_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjChks_FR_14            0

/**
 * Signal RdrObjChks_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjChks_FR_14            255

/**
 * Signal RdrObjChks_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjChks_FR_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjCntr_FR_14 Signal RdrObjCntr_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjCntr_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjCntr_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjCntr_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjCntr_FR_14            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjCntr_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjCntr_FR_14          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjCntr_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjCntr_FR_14(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjCntr_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjCntr_FR_14(buf, 0)

/**
 * Signal RdrObjCntr_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjCntr_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjCntr_FR_14          0

/**
 * Signal RdrObjCntr_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjCntr_FR_14            0

/**
 * Signal RdrObjCntr_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjCntr_FR_14            15

/**
 * Signal RdrObjCntr_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjCntr_FR_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjAy_FR_14 Signal RdrObjAy_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjAy_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjAy_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjAy_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjAy_FR_14              1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjAy_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjAy_FR_14            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjAy_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjAy_FR_14(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjAy_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjAy_FR_14(buf, 0)

/**
 * Signal RdrObjAy_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjAy_FR_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjAy_FR_14            0

/**
 * Signal RdrObjAy_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjAy_FR_14              0

/**
 * Signal RdrObjAy_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjAy_FR_14              128

/**
 * Signal RdrObjAy_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjAy_FR_14              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjAx_FR_14 Signal RdrObjAx_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjAx_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjAx_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjAx_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjAx_FR_14              1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjAx_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjAx_FR_14            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjAx_FR_14(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjAx_FR_14(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjAx_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjAx_FR_14(buf, 0)

/**
 * Signal RdrObjAx_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjAx_FR_14(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjAx_FR_14            0

/**
 * Signal RdrObjAx_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjAx_FR_14              0

/**
 * Signal RdrObjAx_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjAx_FR_14              512

/**
 * Signal RdrObjAx_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjAx_FR_14              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjCoast_FR_14 Signal RdrObjCoast_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjCoast_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjCoast_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjCoast_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjCoast_FR_14           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjCoast_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjCoast_FR_14         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjCoast_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjCoast_FR_14(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjCoast_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjCoast_FR_14(buf, 0)

/**
 * Signal RdrObjCoast_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjCoast_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjCoast_FR_14         0

/**
 * Signal RdrObjCoast_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjCoast_FR_14           0

/**
 * Signal RdrObjCoast_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjCoast_FR_14           1

/**
 * Signal RdrObjCoast_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjCoast_FR_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjConf_FR_14 Signal RdrObjConf_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjConf_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjConf_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjConf_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjConf_FR_14            1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjConf_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjConf_FR_14          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjConf_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjConf_FR_14(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjConf_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjConf_FR_14(buf, 0)

/**
 * Signal RdrObjConf_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjConf_FR_14(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjConf_FR_14          0

/**
 * Signal RdrObjConf_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjConf_FR_14            0

/**
 * Signal RdrObjConf_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjConf_FR_14            14

/**
 * Signal RdrObjConf_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjConf_FR_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjMtnPat_FR_14 Signal RdrObjMtnPat_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjMtnPat_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjMtnPat_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjMtnPat_FR_14          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjMtnPat_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjMtnPat_FR_14        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjMtnPat_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjMtnPat_FR_14(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjMtnPat_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjMtnPat_FR_14(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjMtnPat_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjMtnPat_FR_14        0

/**
 * Signal RdrObjMtnPat_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjMtnPat_FR_14          0

/**
 * Signal RdrObjMtnPat_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjMtnPat_FR_14          3

/**
 * Signal RdrObjMtnPat_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjMtnPat_FR_14          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjID_FR_14 Signal RdrObjID_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjID_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjID_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjID_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjID_FR_14              1, 0, 47, 7

/**
 * Signal RdrObjID_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjID_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjID_FR_14            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjID_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjID_FR_14(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjID_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjID_FR_14(buf, 0)

/**
 * Signal RdrObjID_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjID_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjID_FR_14            0

/**
 * Signal RdrObjID_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjID_FR_14              0

/**
 * Signal RdrObjID_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjID_FR_14              255

/**
 * Signal RdrObjID_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjID_FR_14              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjTyp_FR_14 Signal RdrObjTyp_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjTyp_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjTyp_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjTyp_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjTyp_FR_14             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjTyp_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjTyp_FR_14           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjTyp_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjTyp_FR_14(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjTyp_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjTyp_FR_14(buf, 0)

/**
 * Signal RdrObjTyp_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjTyp_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjTyp_FR_14           0

/**
 * Signal RdrObjTyp_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjTyp_FR_14             0

/**
 * Signal RdrObjTyp_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjTyp_FR_14             3

/**
 * Signal RdrObjTyp_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjTyp_FR_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CCh_RdrObjDy_FR_14 Signal RdrObjDy_FR_14 of Message SRR_FR_3CCh (0x3cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CCh
 * @{
 */

/**
 * Signal RdrObjDy_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CCh_RdrObjDy_FR_14 and \ref GET_SRR_FR_3CCh_RdrObjDy_FR_14 instead.
 */
#define SIG_SRR_FR_3CCh_RdrObjDy_FR_14              1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CCh_RdrObjDy_FR_14 or \ref INIT_SRR_FR_3CCh instead.
 */
#define SETUP_SRR_FR_3CCh_RdrObjDy_FR_14            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CCh_RdrObjDy_FR_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CCh_RdrObjDy_FR_14(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CCh_RdrObjDy_FR_14(buf) \
	SET_SRR_FR_3CCh_RdrObjDy_FR_14(buf, 0)

/**
 * Signal RdrObjDy_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CCh_RdrObjDy_FR_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_14 raw initial value.
 */
#define START_SRR_FR_3CCh_RdrObjDy_FR_14            0

/**
 * Signal RdrObjDy_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CCh_RdrObjDy_FR_14              0

/**
 * Signal RdrObjDy_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CCh_RdrObjDy_FR_14              2046

/**
 * Signal RdrObjDy_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CCh_RdrObjDy_FR_14              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjChks2_FR_14 Signal RdrObjChks2_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjChks2_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjChks2_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjChks2_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjChks2_FR_14           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjChks2_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjChks2_FR_14         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjChks2_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjChks2_FR_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjChks2_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjChks2_FR_14(buf, 0)

/**
 * Signal RdrObjChks2_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjChks2_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjChks2_FR_14         0

/**
 * Signal RdrObjChks2_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjChks2_FR_14           0

/**
 * Signal RdrObjChks2_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjChks2_FR_14           255

/**
 * Signal RdrObjChks2_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjChks2_FR_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjDx_FR_14 Signal RdrObjDx_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjDx_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjDx_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjDx_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjDx_FR_14              1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjDx_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjDx_FR_14            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjDx_FR_14(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjDx_FR_14(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjDx_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjDx_FR_14(buf, 0)

/**
 * Signal RdrObjDx_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjDx_FR_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjDx_FR_14            0

/**
 * Signal RdrObjDx_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjDx_FR_14              0

/**
 * Signal RdrObjDx_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjDx_FR_14              2540

/**
 * Signal RdrObjDx_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjDx_FR_14              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjTiAlv_FR_14 Signal RdrObjTiAlv_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjTiAlv_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjTiAlv_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjTiAlv_FR_14           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjTiAlv_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjTiAlv_FR_14         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjTiAlv_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjTiAlv_FR_14(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjTiAlv_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjTiAlv_FR_14(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjTiAlv_FR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjTiAlv_FR_14         0

/**
 * Signal RdrObjTiAlv_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjTiAlv_FR_14           0

/**
 * Signal RdrObjTiAlv_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjTiAlv_FR_14           127

/**
 * Signal RdrObjTiAlv_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjTiAlv_FR_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjVy_FR_14 Signal RdrObjVy_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjVy_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjVy_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjVy_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjVy_FR_14              1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjVy_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjVy_FR_14            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjVy_FR_14(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjVy_FR_14(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjVy_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjVy_FR_14(buf, 0)

/**
 * Signal RdrObjVy_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjVy_FR_14(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjVy_FR_14            0

/**
 * Signal RdrObjVy_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjVy_FR_14              0

/**
 * Signal RdrObjVy_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjVy_FR_14              1023

/**
 * Signal RdrObjVy_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjVy_FR_14              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjVx_FR_14 Signal RdrObjVx_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjVx_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjVx_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjVx_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjVx_FR_14              1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjVx_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjVx_FR_14            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjVx_FR_14(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjVx_FR_14(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjVx_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjVx_FR_14(buf, 0)

/**
 * Signal RdrObjVx_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjVx_FR_14(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjVx_FR_14            0

/**
 * Signal RdrObjVx_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjVx_FR_14              0

/**
 * Signal RdrObjVx_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjVx_FR_14              1023

/**
 * Signal RdrObjVx_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjVx_FR_14              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjWth_FR_14 Signal RdrObjWth_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjWth_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjWth_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjWth_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjWth_FR_14             1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjWth_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjWth_FR_14           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjWth_FR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjWth_FR_14(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjWth_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjWth_FR_14(buf, 0)

/**
 * Signal RdrObjWth_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjWth_FR_14(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjWth_FR_14           0

/**
 * Signal RdrObjWth_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjWth_FR_14             0

/**
 * Signal RdrObjWth_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjWth_FR_14             50

/**
 * Signal RdrObjWth_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjWth_FR_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CDh_RdrObjHeading_FR_14 Signal RdrObjHeading_FR_14 of Message SRR_FR_3CDh (0x3cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CDh
 * @{
 */

/**
 * Signal RdrObjHeading_FR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CDh_RdrObjHeading_FR_14 and \ref GET_SRR_FR_3CDh_RdrObjHeading_FR_14 instead.
 */
#define SIG_SRR_FR_3CDh_RdrObjHeading_FR_14         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CDh_RdrObjHeading_FR_14 or \ref INIT_SRR_FR_3CDh instead.
 */
#define SETUP_SRR_FR_3CDh_RdrObjHeading_FR_14       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CDh_RdrObjHeading_FR_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CDh_RdrObjHeading_FR_14(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CDh_RdrObjHeading_FR_14(buf) \
	SET_SRR_FR_3CDh_RdrObjHeading_FR_14(buf, 0)

/**
 * Signal RdrObjHeading_FR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CDh_RdrObjHeading_FR_14(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_14 raw initial value.
 */
#define START_SRR_FR_3CDh_RdrObjHeading_FR_14       0

/**
 * Signal RdrObjHeading_FR_14 raw minimum value.
 */
#define MIN_SRR_FR_3CDh_RdrObjHeading_FR_14         0

/**
 * Signal RdrObjHeading_FR_14 raw maximum value.
 */
#define MAX_SRR_FR_3CDh_RdrObjHeading_FR_14         360

/**
 * Signal RdrObjHeading_FR_14 raw offset value.
 */
#define OFF_SRR_FR_3CDh_RdrObjHeading_FR_14         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjChks_FR_15 Signal RdrObjChks_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjChks_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjChks_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjChks_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjChks_FR_15            1, 0, 7, 8

/**
 * Signal RdrObjChks_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjChks_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjChks_FR_15          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjChks_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjChks_FR_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjChks_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjChks_FR_15(buf, 0)

/**
 * Signal RdrObjChks_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjChks_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjChks_FR_15          0

/**
 * Signal RdrObjChks_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjChks_FR_15            0

/**
 * Signal RdrObjChks_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjChks_FR_15            255

/**
 * Signal RdrObjChks_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjChks_FR_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjCntr_FR_15 Signal RdrObjCntr_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjCntr_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjCntr_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjCntr_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjCntr_FR_15            1, 0, 15, 4

/**
 * Signal RdrObjCntr_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjCntr_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjCntr_FR_15          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjCntr_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjCntr_FR_15(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjCntr_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjCntr_FR_15(buf, 0)

/**
 * Signal RdrObjCntr_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjCntr_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjCntr_FR_15          0

/**
 * Signal RdrObjCntr_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjCntr_FR_15            0

/**
 * Signal RdrObjCntr_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjCntr_FR_15            15

/**
 * Signal RdrObjCntr_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjCntr_FR_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjAy_FR_15 Signal RdrObjAy_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjAy_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjAy_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjAy_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjAy_FR_15              1, 0, 23, 7

/**
 * Signal RdrObjAy_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjAy_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjAy_FR_15            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjAy_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjAy_FR_15(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjAy_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjAy_FR_15(buf, 0)

/**
 * Signal RdrObjAy_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjAy_FR_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjAy_FR_15            0

/**
 * Signal RdrObjAy_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjAy_FR_15              0

/**
 * Signal RdrObjAy_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjAy_FR_15              128

/**
 * Signal RdrObjAy_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjAy_FR_15              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjAx_FR_15 Signal RdrObjAx_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjAx_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjAx_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjAx_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjAx_FR_15              1, 0, 16, 9

/**
 * Signal RdrObjAx_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjAx_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjAx_FR_15            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjAx_FR_15(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjAx_FR_15(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjAx_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjAx_FR_15(buf, 0)

/**
 * Signal RdrObjAx_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjAx_FR_15(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjAx_FR_15            0

/**
 * Signal RdrObjAx_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjAx_FR_15              0

/**
 * Signal RdrObjAx_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjAx_FR_15              512

/**
 * Signal RdrObjAx_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjAx_FR_15              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjCoast_FR_15 Signal RdrObjCoast_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjCoast_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjCoast_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjCoast_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjCoast_FR_15           1, 0, 39, 1

/**
 * Signal RdrObjCoast_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjCoast_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjCoast_FR_15         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjCoast_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjCoast_FR_15(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjCoast_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjCoast_FR_15(buf, 0)

/**
 * Signal RdrObjCoast_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjCoast_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjCoast_FR_15         0

/**
 * Signal RdrObjCoast_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjCoast_FR_15           0

/**
 * Signal RdrObjCoast_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjCoast_FR_15           1

/**
 * Signal RdrObjCoast_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjCoast_FR_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjConf_FR_15 Signal RdrObjConf_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjConf_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjConf_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjConf_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjConf_FR_15            1, 0, 38, 4

/**
 * Signal RdrObjConf_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjConf_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjConf_FR_15          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjConf_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjConf_FR_15(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjConf_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjConf_FR_15(buf, 0)

/**
 * Signal RdrObjConf_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjConf_FR_15(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjConf_FR_15          0

/**
 * Signal RdrObjConf_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjConf_FR_15            0

/**
 * Signal RdrObjConf_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjConf_FR_15            14

/**
 * Signal RdrObjConf_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjConf_FR_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjMtnPat_FR_15 Signal RdrObjMtnPat_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjMtnPat_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjMtnPat_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjMtnPat_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjMtnPat_FR_15          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjMtnPat_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjMtnPat_FR_15        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjMtnPat_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjMtnPat_FR_15(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjMtnPat_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjMtnPat_FR_15(buf, 0)

/**
 * Signal RdrObjMtnPat_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjMtnPat_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjMtnPat_FR_15        0

/**
 * Signal RdrObjMtnPat_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjMtnPat_FR_15          0

/**
 * Signal RdrObjMtnPat_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjMtnPat_FR_15          3

/**
 * Signal RdrObjMtnPat_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjMtnPat_FR_15          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjID_FR_15 Signal RdrObjID_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjID_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjID_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjID_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjID_FR_15              1, 0, 47, 7

/**
 * Signal RdrObjID_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjID_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjID_FR_15            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjID_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjID_FR_15(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjID_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjID_FR_15(buf, 0)

/**
 * Signal RdrObjID_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjID_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjID_FR_15            0

/**
 * Signal RdrObjID_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjID_FR_15              0

/**
 * Signal RdrObjID_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjID_FR_15              255

/**
 * Signal RdrObjID_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjID_FR_15              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjTyp_FR_15 Signal RdrObjTyp_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjTyp_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjTyp_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjTyp_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjTyp_FR_15             1, 0, 55, 2

/**
 * Signal RdrObjTyp_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjTyp_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjTyp_FR_15           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjTyp_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjTyp_FR_15(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjTyp_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjTyp_FR_15(buf, 0)

/**
 * Signal RdrObjTyp_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjTyp_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjTyp_FR_15           0

/**
 * Signal RdrObjTyp_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjTyp_FR_15             0

/**
 * Signal RdrObjTyp_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjTyp_FR_15             3

/**
 * Signal RdrObjTyp_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjTyp_FR_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CEh_RdrObjDy_FR_15 Signal RdrObjDy_FR_15 of Message SRR_FR_3CEh (0x3ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CEh
 * @{
 */

/**
 * Signal RdrObjDy_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CEh_RdrObjDy_FR_15 and \ref GET_SRR_FR_3CEh_RdrObjDy_FR_15 instead.
 */
#define SIG_SRR_FR_3CEh_RdrObjDy_FR_15              1, 0, 53, 11

/**
 * Signal RdrObjDy_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CEh_RdrObjDy_FR_15 or \ref INIT_SRR_FR_3CEh instead.
 */
#define SETUP_SRR_FR_3CEh_RdrObjDy_FR_15            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CEh_RdrObjDy_FR_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CEh_RdrObjDy_FR_15(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CEh_RdrObjDy_FR_15(buf) \
	SET_SRR_FR_3CEh_RdrObjDy_FR_15(buf, 0)

/**
 * Signal RdrObjDy_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CEh_RdrObjDy_FR_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_FR_15 raw initial value.
 */
#define START_SRR_FR_3CEh_RdrObjDy_FR_15            0

/**
 * Signal RdrObjDy_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CEh_RdrObjDy_FR_15              0

/**
 * Signal RdrObjDy_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CEh_RdrObjDy_FR_15              2046

/**
 * Signal RdrObjDy_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CEh_RdrObjDy_FR_15              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjChks2_FR_15 Signal RdrObjChks2_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjChks2_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjChks2_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjChks2_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjChks2_FR_15           1, 0, 7, 8

/**
 * Signal RdrObjChks2_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjChks2_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjChks2_FR_15         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjChks2_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjChks2_FR_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjChks2_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjChks2_FR_15(buf, 0)

/**
 * Signal RdrObjChks2_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjChks2_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjChks2_FR_15         0

/**
 * Signal RdrObjChks2_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjChks2_FR_15           0

/**
 * Signal RdrObjChks2_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjChks2_FR_15           255

/**
 * Signal RdrObjChks2_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjChks2_FR_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjDx_FR_15 Signal RdrObjDx_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjDx_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjDx_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjDx_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjDx_FR_15              1, 0, 14, 12

/**
 * Signal RdrObjDx_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjDx_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjDx_FR_15            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjDx_FR_15(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjDx_FR_15(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjDx_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjDx_FR_15(buf, 0)

/**
 * Signal RdrObjDx_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjDx_FR_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjDx_FR_15            0

/**
 * Signal RdrObjDx_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjDx_FR_15              0

/**
 * Signal RdrObjDx_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjDx_FR_15              2540

/**
 * Signal RdrObjDx_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjDx_FR_15              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjTiAlv_FR_15 Signal RdrObjTiAlv_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjTiAlv_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjTiAlv_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjTiAlv_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjTiAlv_FR_15           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjTiAlv_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjTiAlv_FR_15         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjTiAlv_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjTiAlv_FR_15(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjTiAlv_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjTiAlv_FR_15(buf, 0)

/**
 * Signal RdrObjTiAlv_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjTiAlv_FR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjTiAlv_FR_15         0

/**
 * Signal RdrObjTiAlv_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjTiAlv_FR_15           0

/**
 * Signal RdrObjTiAlv_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjTiAlv_FR_15           127

/**
 * Signal RdrObjTiAlv_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjTiAlv_FR_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjVy_FR_15 Signal RdrObjVy_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjVy_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjVy_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjVy_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjVy_FR_15              1, 0, 27, 10

/**
 * Signal RdrObjVy_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjVy_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjVy_FR_15            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjVy_FR_15(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjVy_FR_15(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjVy_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjVy_FR_15(buf, 0)

/**
 * Signal RdrObjVy_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjVy_FR_15(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjVy_FR_15            0

/**
 * Signal RdrObjVy_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjVy_FR_15              0

/**
 * Signal RdrObjVy_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjVy_FR_15              1023

/**
 * Signal RdrObjVy_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjVy_FR_15              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjVx_FR_15 Signal RdrObjVx_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjVx_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjVx_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjVx_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjVx_FR_15              1, 0, 33, 10

/**
 * Signal RdrObjVx_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjVx_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjVx_FR_15            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjVx_FR_15(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjVx_FR_15(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjVx_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjVx_FR_15(buf, 0)

/**
 * Signal RdrObjVx_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjVx_FR_15(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjVx_FR_15            0

/**
 * Signal RdrObjVx_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjVx_FR_15              0

/**
 * Signal RdrObjVx_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjVx_FR_15              1023

/**
 * Signal RdrObjVx_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjVx_FR_15              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjWth_FR_15 Signal RdrObjWth_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjWth_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjWth_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjWth_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjWth_FR_15             1, 0, 55, 6

/**
 * Signal RdrObjWth_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjWth_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjWth_FR_15           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjWth_FR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjWth_FR_15(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjWth_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjWth_FR_15(buf, 0)

/**
 * Signal RdrObjWth_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjWth_FR_15(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjWth_FR_15           0

/**
 * Signal RdrObjWth_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjWth_FR_15             0

/**
 * Signal RdrObjWth_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjWth_FR_15             50

/**
 * Signal RdrObjWth_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjWth_FR_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_FR_3CFh_RdrObjHeading_FR_15 Signal RdrObjHeading_FR_15 of Message SRR_FR_3CFh (0x3cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_FR_3CFh
 * @{
 */

/**
 * Signal RdrObjHeading_FR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_FR_3CFh_RdrObjHeading_FR_15 and \ref GET_SRR_FR_3CFh_RdrObjHeading_FR_15 instead.
 */
#define SIG_SRR_FR_3CFh_RdrObjHeading_FR_15         1, 0, 49, 9

/**
 * Signal RdrObjHeading_FR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_FR_3CFh_RdrObjHeading_FR_15 or \ref INIT_SRR_FR_3CFh instead.
 */
#define SETUP_SRR_FR_3CFh_RdrObjHeading_FR_15       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_FR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_FR_3CFh_RdrObjHeading_FR_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_FR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_FR_3CFh_RdrObjHeading_FR_15(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_FR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_FR_3CFh_RdrObjHeading_FR_15(buf) \
	SET_SRR_FR_3CFh_RdrObjHeading_FR_15(buf, 0)

/**
 * Signal RdrObjHeading_FR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_FR_3CFh_RdrObjHeading_FR_15(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_FR_15 raw initial value.
 */
#define START_SRR_FR_3CFh_RdrObjHeading_FR_15       0

/**
 * Signal RdrObjHeading_FR_15 raw minimum value.
 */
#define MIN_SRR_FR_3CFh_RdrObjHeading_FR_15         0

/**
 * Signal RdrObjHeading_FR_15 raw maximum value.
 */
#define MAX_SRR_FR_3CFh_RdrObjHeading_FR_15         360

/**
 * Signal RdrObjHeading_FR_15 raw offset value.
 */
#define OFF_SRR_FR_3CFh_RdrObjHeading_FR_15         -180

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Tester_708h_TesterDiagRequestData_SRR_RL Signal TesterDiagRequestData_SRR_RL of Message IECU_Tester_708h (0x708)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Tester_708h
 * @{
 */

/**
 * Signal TesterDiagRequestData_SRR_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Tester_708h_TesterDiagRequestData_SRR_RL and \ref GET_IECU_Tester_708h_TesterDiagRequestData_SRR_RL instead.
 */
#define SIG_IECU_Tester_708h_TesterDiagRequestData_SRR_RL        1, 0, 7, 64

/**
 * Signal TesterDiagRequestData_SRR_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Tester_708h_TesterDiagRequestData_SRR_RL or \ref INIT_IECU_Tester_708h instead.
 */
#define SETUP_IECU_Tester_708h_TesterDiagRequestData_SRR_RL      1, 0, 7, 64, 0

/**
 * Get signal TesterDiagRequestData_SRR_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Tester_708h_TesterDiagRequestData_SRR_RL(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TesterDiagRequestData_SRR_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Tester_708h_TesterDiagRequestData_SRR_RL(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TesterDiagRequestData_SRR_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Tester_708h_TesterDiagRequestData_SRR_RL(buf) \
	SET_IECU_Tester_708h_TesterDiagRequestData_SRR_RL(buf, 0)

/**
 * Signal TesterDiagRequestData_SRR_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Tester_708h_TesterDiagRequestData_SRR_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal TesterDiagRequestData_SRR_RL raw initial value.
 */
#define START_IECU_Tester_708h_TesterDiagRequestData_SRR_RL      0

/**
 * Signal TesterDiagRequestData_SRR_RL raw minimum value.
 */
#define MIN_IECU_Tester_708h_TesterDiagRequestData_SRR_RL        0

/**
 * Signal TesterDiagRequestData_SRR_RL raw maximum value.
 */
#define MAX_IECU_Tester_708h_TesterDiagRequestData_SRR_RL        255

/**
 * Signal TesterDiagRequestData_SRR_RL raw offset value.
 */
#define OFF_IECU_Tester_708h_TesterDiagRequestData_SRR_RL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_788h_SRR_RLDiagResponseData Signal SRR_RLDiagResponseData of Message SRR_RL_788h (0x788)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_788h
 * @{
 */

/**
 * Signal SRR_RLDiagResponseData configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_788h_SRR_RLDiagResponseData and \ref GET_SRR_RL_788h_SRR_RLDiagResponseData instead.
 */
#define SIG_SRR_RL_788h_SRR_RLDiagResponseData        1, 0, 7, 64

/**
 * Signal SRR_RLDiagResponseData setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_788h_SRR_RLDiagResponseData or \ref INIT_SRR_RL_788h instead.
 */
#define SETUP_SRR_RL_788h_SRR_RLDiagResponseData      1, 0, 7, 64, 0

/**
 * Get signal SRR_RLDiagResponseData from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_788h_SRR_RLDiagResponseData(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SRR_RLDiagResponseData in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_788h_SRR_RLDiagResponseData(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SRR_RLDiagResponseData in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_788h_SRR_RLDiagResponseData(buf) \
	SET_SRR_RL_788h_SRR_RLDiagResponseData(buf, 0)

/**
 * Signal SRR_RLDiagResponseData value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_788h_SRR_RLDiagResponseData(x, fmt) \
	((x) * fmt)

/**
 * Signal SRR_RLDiagResponseData raw initial value.
 */
#define START_SRR_RL_788h_SRR_RLDiagResponseData      0

/**
 * Signal SRR_RLDiagResponseData raw minimum value.
 */
#define MIN_SRR_RL_788h_SRR_RLDiagResponseData        0

/**
 * Signal SRR_RLDiagResponseData raw maximum value.
 */
#define MAX_SRR_RL_788h_SRR_RLDiagResponseData        255

/**
 * Signal SRR_RLDiagResponseData raw offset value.
 */
#define OFF_SRR_RL_788h_SRR_RLDiagResponseData        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_590h_RdrStsChks_RL Signal RdrStsChks_RL of Message SRR_RL_590h (0x590)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_590h
 * @{
 */

/**
 * Signal RdrStsChks_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_590h_RdrStsChks_RL and \ref GET_SRR_RL_590h_RdrStsChks_RL instead.
 */
#define SIG_SRR_RL_590h_RdrStsChks_RL               1, 0, 7, 8

/**
 * Signal RdrStsChks_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_590h_RdrStsChks_RL or \ref INIT_SRR_RL_590h instead.
 */
#define SETUP_SRR_RL_590h_RdrStsChks_RL             1, 0, 7, 8, 0

/**
 * Get signal RdrStsChks_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_590h_RdrStsChks_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsChks_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_590h_RdrStsChks_RL(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsChks_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_590h_RdrStsChks_RL(buf) \
	SET_SRR_RL_590h_RdrStsChks_RL(buf, 0)

/**
 * Signal RdrStsChks_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_590h_RdrStsChks_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsChks_RL raw initial value.
 */
#define START_SRR_RL_590h_RdrStsChks_RL             0

/**
 * Signal RdrStsChks_RL raw minimum value.
 */
#define MIN_SRR_RL_590h_RdrStsChks_RL               0

/**
 * Signal RdrStsChks_RL raw maximum value.
 */
#define MAX_SRR_RL_590h_RdrStsChks_RL               255

/**
 * Signal RdrStsChks_RL raw offset value.
 */
#define OFF_SRR_RL_590h_RdrStsChks_RL               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_590h_RdrStsCntr_RL Signal RdrStsCntr_RL of Message SRR_RL_590h (0x590)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_590h
 * @{
 */

/**
 * Signal RdrStsCntr_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_590h_RdrStsCntr_RL and \ref GET_SRR_RL_590h_RdrStsCntr_RL instead.
 */
#define SIG_SRR_RL_590h_RdrStsCntr_RL               1, 0, 15, 4

/**
 * Signal RdrStsCntr_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_590h_RdrStsCntr_RL or \ref INIT_SRR_RL_590h instead.
 */
#define SETUP_SRR_RL_590h_RdrStsCntr_RL             1, 0, 15, 4, 0

/**
 * Get signal RdrStsCntr_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_590h_RdrStsCntr_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsCntr_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_590h_RdrStsCntr_RL(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsCntr_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_590h_RdrStsCntr_RL(buf) \
	SET_SRR_RL_590h_RdrStsCntr_RL(buf, 0)

/**
 * Signal RdrStsCntr_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_590h_RdrStsCntr_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsCntr_RL raw initial value.
 */
#define START_SRR_RL_590h_RdrStsCntr_RL             0

/**
 * Signal RdrStsCntr_RL raw minimum value.
 */
#define MIN_SRR_RL_590h_RdrStsCntr_RL               0

/**
 * Signal RdrStsCntr_RL raw maximum value.
 */
#define MAX_SRR_RL_590h_RdrStsCntr_RL               15

/**
 * Signal RdrStsCntr_RL raw offset value.
 */
#define OFF_SRR_RL_590h_RdrStsCntr_RL               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_590h_RdrStsIfVersMajor_RL Signal RdrStsIfVersMajor_RL of Message SRR_RL_590h (0x590)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_590h
 * @{
 */

/**
 * Signal RdrStsIfVersMajor_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_590h_RdrStsIfVersMajor_RL and \ref GET_SRR_RL_590h_RdrStsIfVersMajor_RL instead.
 */
#define SIG_SRR_RL_590h_RdrStsIfVersMajor_RL        1, 0, 11, 4

/**
 * Signal RdrStsIfVersMajor_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_590h_RdrStsIfVersMajor_RL or \ref INIT_SRR_RL_590h instead.
 */
#define SETUP_SRR_RL_590h_RdrStsIfVersMajor_RL      1, 0, 11, 4, 0

/**
 * Get signal RdrStsIfVersMajor_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_590h_RdrStsIfVersMajor_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMajor_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_590h_RdrStsIfVersMajor_RL(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMajor_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_590h_RdrStsIfVersMajor_RL(buf) \
	SET_SRR_RL_590h_RdrStsIfVersMajor_RL(buf, 0)

/**
 * Signal RdrStsIfVersMajor_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_590h_RdrStsIfVersMajor_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMajor_RL raw initial value.
 */
#define START_SRR_RL_590h_RdrStsIfVersMajor_RL      0

/**
 * Signal RdrStsIfVersMajor_RL raw minimum value.
 */
#define MIN_SRR_RL_590h_RdrStsIfVersMajor_RL        0

/**
 * Signal RdrStsIfVersMajor_RL raw maximum value.
 */
#define MAX_SRR_RL_590h_RdrStsIfVersMajor_RL        15

/**
 * Signal RdrStsIfVersMajor_RL raw offset value.
 */
#define OFF_SRR_RL_590h_RdrStsIfVersMajor_RL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_590h_RdrStsIfVersMiddle_RL Signal RdrStsIfVersMiddle_RL of Message SRR_RL_590h (0x590)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_590h
 * @{
 */

/**
 * Signal RdrStsIfVersMiddle_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_590h_RdrStsIfVersMiddle_RL and \ref GET_SRR_RL_590h_RdrStsIfVersMiddle_RL instead.
 */
#define SIG_SRR_RL_590h_RdrStsIfVersMiddle_RL        1, 0, 23, 4

/**
 * Signal RdrStsIfVersMiddle_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_590h_RdrStsIfVersMiddle_RL or \ref INIT_SRR_RL_590h instead.
 */
#define SETUP_SRR_RL_590h_RdrStsIfVersMiddle_RL      1, 0, 23, 4, 0

/**
 * Get signal RdrStsIfVersMiddle_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_590h_RdrStsIfVersMiddle_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMiddle_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_590h_RdrStsIfVersMiddle_RL(buf, val) { \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsIfVersMiddle_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_590h_RdrStsIfVersMiddle_RL(buf) \
	SET_SRR_RL_590h_RdrStsIfVersMiddle_RL(buf, 0)

/**
 * Signal RdrStsIfVersMiddle_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_590h_RdrStsIfVersMiddle_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMiddle_RL raw initial value.
 */
#define START_SRR_RL_590h_RdrStsIfVersMiddle_RL      0

/**
 * Signal RdrStsIfVersMiddle_RL raw minimum value.
 */
#define MIN_SRR_RL_590h_RdrStsIfVersMiddle_RL        0

/**
 * Signal RdrStsIfVersMiddle_RL raw maximum value.
 */
#define MAX_SRR_RL_590h_RdrStsIfVersMiddle_RL        15

/**
 * Signal RdrStsIfVersMiddle_RL raw offset value.
 */
#define OFF_SRR_RL_590h_RdrStsIfVersMiddle_RL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_590h_RdrStsIfVersMinor_RL Signal RdrStsIfVersMinor_RL of Message SRR_RL_590h (0x590)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_590h
 * @{
 */

/**
 * Signal RdrStsIfVersMinor_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_590h_RdrStsIfVersMinor_RL and \ref GET_SRR_RL_590h_RdrStsIfVersMinor_RL instead.
 */
#define SIG_SRR_RL_590h_RdrStsIfVersMinor_RL        1, 0, 19, 4

/**
 * Signal RdrStsIfVersMinor_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_590h_RdrStsIfVersMinor_RL or \ref INIT_SRR_RL_590h instead.
 */
#define SETUP_SRR_RL_590h_RdrStsIfVersMinor_RL      1, 0, 19, 4, 0

/**
 * Get signal RdrStsIfVersMinor_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_590h_RdrStsIfVersMinor_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMinor_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_590h_RdrStsIfVersMinor_RL(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMinor_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_590h_RdrStsIfVersMinor_RL(buf) \
	SET_SRR_RL_590h_RdrStsIfVersMinor_RL(buf, 0)

/**
 * Signal RdrStsIfVersMinor_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_590h_RdrStsIfVersMinor_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMinor_RL raw initial value.
 */
#define START_SRR_RL_590h_RdrStsIfVersMinor_RL      0

/**
 * Signal RdrStsIfVersMinor_RL raw minimum value.
 */
#define MIN_SRR_RL_590h_RdrStsIfVersMinor_RL        0

/**
 * Signal RdrStsIfVersMinor_RL raw maximum value.
 */
#define MAX_SRR_RL_590h_RdrStsIfVersMinor_RL        15

/**
 * Signal RdrStsIfVersMinor_RL raw offset value.
 */
#define OFF_SRR_RL_590h_RdrStsIfVersMinor_RL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_590h_RdrStsTiStamp_RL Signal RdrStsTiStamp_RL of Message SRR_RL_590h (0x590)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_590h
 * @{
 */

/**
 * Signal RdrStsTiStamp_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_590h_RdrStsTiStamp_RL and \ref GET_SRR_RL_590h_RdrStsTiStamp_RL instead.
 */
#define SIG_SRR_RL_590h_RdrStsTiStamp_RL            1, 0, 31, 32

/**
 * Signal RdrStsTiStamp_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_590h_RdrStsTiStamp_RL or \ref INIT_SRR_RL_590h instead.
 */
#define SETUP_SRR_RL_590h_RdrStsTiStamp_RL          1, 0, 31, 32, 0

/**
 * Get signal RdrStsTiStamp_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_590h_RdrStsTiStamp_RL(buf) (0 \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsTiStamp_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_590h_RdrStsTiStamp_RL(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsTiStamp_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_590h_RdrStsTiStamp_RL(buf) \
	SET_SRR_RL_590h_RdrStsTiStamp_RL(buf, 0)

/**
 * Signal RdrStsTiStamp_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_590h_RdrStsTiStamp_RL(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal RdrStsTiStamp_RL raw initial value.
 */
#define START_SRR_RL_590h_RdrStsTiStamp_RL          0

/**
 * Signal RdrStsTiStamp_RL raw minimum value.
 */
#define MIN_SRR_RL_590h_RdrStsTiStamp_RL            0

/**
 * Signal RdrStsTiStamp_RL raw maximum value.
 */
#define MAX_SRR_RL_590h_RdrStsTiStamp_RL            4294967295

/**
 * Signal RdrStsTiStamp_RL raw offset value.
 */
#define OFF_SRR_RL_590h_RdrStsTiStamp_RL            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_591h_Genrl_SnsrLatency_RL Signal Genrl_SnsrLatency_RL of Message SRR_RL_591h (0x591)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_591h
 * @{
 */

/**
 * Signal Genrl_SnsrLatency_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_591h_Genrl_SnsrLatency_RL and \ref GET_SRR_RL_591h_Genrl_SnsrLatency_RL instead.
 */
#define SIG_SRR_RL_591h_Genrl_SnsrLatency_RL        1, 0, 7, 7

/**
 * Signal Genrl_SnsrLatency_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_591h_Genrl_SnsrLatency_RL or \ref INIT_SRR_RL_591h instead.
 */
#define SETUP_SRR_RL_591h_Genrl_SnsrLatency_RL      1, 0, 7, 7, 0

/**
 * Get signal Genrl_SnsrLatency_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_591h_Genrl_SnsrLatency_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Genrl_SnsrLatency_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_591h_Genrl_SnsrLatency_RL(buf, val) { \
	buf[0] &= ~(0x7f << 1); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Genrl_SnsrLatency_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_591h_Genrl_SnsrLatency_RL(buf) \
	SET_SRR_RL_591h_Genrl_SnsrLatency_RL(buf, 0)

/**
 * Signal Genrl_SnsrLatency_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_591h_Genrl_SnsrLatency_RL(x, fmt) \
	((x) * fmt * 10)

/**
 * Signal Genrl_SnsrLatency_RL raw initial value.
 */
#define START_SRR_RL_591h_Genrl_SnsrLatency_RL      0

/**
 * Signal Genrl_SnsrLatency_RL raw minimum value.
 */
#define MIN_SRR_RL_591h_Genrl_SnsrLatency_RL        0

/**
 * Signal Genrl_SnsrLatency_RL raw maximum value.
 */
#define MAX_SRR_RL_591h_Genrl_SnsrLatency_RL        127

/**
 * Signal Genrl_SnsrLatency_RL raw offset value.
 */
#define OFF_SRR_RL_591h_Genrl_SnsrLatency_RL        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_591h_RdrSysSts_RL Signal RdrSysSts_RL of Message SRR_RL_591h (0x591)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_591h
 * @{
 */

/**
 * Signal RdrSysSts_RL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_591h_RdrSysSts_RL and \ref GET_SRR_RL_591h_RdrSysSts_RL instead.
 */
#define SIG_SRR_RL_591h_RdrSysSts_RL                1, 0, 15, 3

/**
 * Signal RdrSysSts_RL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_591h_RdrSysSts_RL or \ref INIT_SRR_RL_591h instead.
 */
#define SETUP_SRR_RL_591h_RdrSysSts_RL              1, 0, 15, 3, 0

/**
 * Get signal RdrSysSts_RL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_591h_RdrSysSts_RL(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 5) & 0x07) << 0) \
)

/**
 * Set signal RdrSysSts_RL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_591h_RdrSysSts_RL(buf, val) { \
	buf[1] &= ~(0x07 << 5); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal RdrSysSts_RL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_591h_RdrSysSts_RL(buf) \
	SET_SRR_RL_591h_RdrSysSts_RL(buf, 0)

/**
 * Signal RdrSysSts_RL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_591h_RdrSysSts_RL(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrSysSts_RL raw initial value.
 */
#define START_SRR_RL_591h_RdrSysSts_RL              0

/**
 * Signal RdrSysSts_RL raw minimum value.
 */
#define MIN_SRR_RL_591h_RdrSysSts_RL                0

/**
 * Signal RdrSysSts_RL raw maximum value.
 */
#define MAX_SRR_RL_591h_RdrSysSts_RL                7

/**
 * Signal RdrSysSts_RL raw offset value.
 */
#define OFF_SRR_RL_591h_RdrSysSts_RL                0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjChks_RL_1 Signal RdrObjChks_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjChks_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjChks_RL_1 and \ref GET_SRR_RL_592h_RdrObjChks_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjChks_RL_1             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjChks_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjChks_RL_1           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjChks_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjChks_RL_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjChks_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjChks_RL_1(buf, 0)

/**
 * Signal RdrObjChks_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjChks_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjChks_RL_1           0

/**
 * Signal RdrObjChks_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjChks_RL_1             0

/**
 * Signal RdrObjChks_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjChks_RL_1             255

/**
 * Signal RdrObjChks_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjChks_RL_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjCntr_RL_1 Signal RdrObjCntr_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjCntr_RL_1 and \ref GET_SRR_RL_592h_RdrObjCntr_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjCntr_RL_1             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjCntr_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjCntr_RL_1           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjCntr_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjCntr_RL_1(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjCntr_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjCntr_RL_1(buf, 0)

/**
 * Signal RdrObjCntr_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjCntr_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjCntr_RL_1           0

/**
 * Signal RdrObjCntr_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjCntr_RL_1             0

/**
 * Signal RdrObjCntr_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjCntr_RL_1             15

/**
 * Signal RdrObjCntr_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjCntr_RL_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjAy_RL_1 Signal RdrObjAy_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjAy_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjAy_RL_1 and \ref GET_SRR_RL_592h_RdrObjAy_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjAy_RL_1               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjAy_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjAy_RL_1             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjAy_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjAy_RL_1(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjAy_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjAy_RL_1(buf, 0)

/**
 * Signal RdrObjAy_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjAy_RL_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjAy_RL_1             0

/**
 * Signal RdrObjAy_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjAy_RL_1               0

/**
 * Signal RdrObjAy_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjAy_RL_1               128

/**
 * Signal RdrObjAy_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjAy_RL_1               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjAx_RL_1 Signal RdrObjAx_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjAx_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjAx_RL_1 and \ref GET_SRR_RL_592h_RdrObjAx_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjAx_RL_1               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjAx_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjAx_RL_1             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjAx_RL_1(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjAx_RL_1(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjAx_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjAx_RL_1(buf, 0)

/**
 * Signal RdrObjAx_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjAx_RL_1(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjAx_RL_1             0

/**
 * Signal RdrObjAx_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjAx_RL_1               0

/**
 * Signal RdrObjAx_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjAx_RL_1               512

/**
 * Signal RdrObjAx_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjAx_RL_1               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjCoast_RL_1 Signal RdrObjCoast_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjCoast_RL_1 and \ref GET_SRR_RL_592h_RdrObjCoast_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjCoast_RL_1            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjCoast_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjCoast_RL_1          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjCoast_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjCoast_RL_1(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjCoast_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjCoast_RL_1(buf, 0)

/**
 * Signal RdrObjCoast_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjCoast_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjCoast_RL_1          0

/**
 * Signal RdrObjCoast_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjCoast_RL_1            0

/**
 * Signal RdrObjCoast_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjCoast_RL_1            1

/**
 * Signal RdrObjCoast_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjCoast_RL_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjConf_RL_1 Signal RdrObjConf_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjConf_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjConf_RL_1 and \ref GET_SRR_RL_592h_RdrObjConf_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjConf_RL_1             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjConf_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjConf_RL_1           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjConf_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjConf_RL_1(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjConf_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjConf_RL_1(buf, 0)

/**
 * Signal RdrObjConf_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjConf_RL_1(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjConf_RL_1           0

/**
 * Signal RdrObjConf_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjConf_RL_1             0

/**
 * Signal RdrObjConf_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjConf_RL_1             14

/**
 * Signal RdrObjConf_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjConf_RL_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjMtnPat_RL_1 Signal RdrObjMtnPat_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjMtnPat_RL_1 and \ref GET_SRR_RL_592h_RdrObjMtnPat_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjMtnPat_RL_1           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjMtnPat_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjMtnPat_RL_1         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjMtnPat_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjMtnPat_RL_1(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjMtnPat_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjMtnPat_RL_1(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjMtnPat_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjMtnPat_RL_1         0

/**
 * Signal RdrObjMtnPat_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjMtnPat_RL_1           0

/**
 * Signal RdrObjMtnPat_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjMtnPat_RL_1           3

/**
 * Signal RdrObjMtnPat_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjMtnPat_RL_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjID_RL_1 Signal RdrObjID_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjID_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjID_RL_1 and \ref GET_SRR_RL_592h_RdrObjID_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjID_RL_1               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjID_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjID_RL_1             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjID_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjID_RL_1(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjID_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjID_RL_1(buf, 0)

/**
 * Signal RdrObjID_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjID_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjID_RL_1             0

/**
 * Signal RdrObjID_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjID_RL_1               0

/**
 * Signal RdrObjID_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjID_RL_1               255

/**
 * Signal RdrObjID_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjID_RL_1               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjTyp_RL_1 Signal RdrObjTyp_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjTyp_RL_1 and \ref GET_SRR_RL_592h_RdrObjTyp_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjTyp_RL_1              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjTyp_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjTyp_RL_1            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjTyp_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjTyp_RL_1(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjTyp_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjTyp_RL_1(buf, 0)

/**
 * Signal RdrObjTyp_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjTyp_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjTyp_RL_1            0

/**
 * Signal RdrObjTyp_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjTyp_RL_1              0

/**
 * Signal RdrObjTyp_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjTyp_RL_1              3

/**
 * Signal RdrObjTyp_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjTyp_RL_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_592h_RdrObjDy_RL_1 Signal RdrObjDy_RL_1 of Message SRR_RL_592h (0x592)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_592h
 * @{
 */

/**
 * Signal RdrObjDy_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_592h_RdrObjDy_RL_1 and \ref GET_SRR_RL_592h_RdrObjDy_RL_1 instead.
 */
#define SIG_SRR_RL_592h_RdrObjDy_RL_1               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_592h_RdrObjDy_RL_1 or \ref INIT_SRR_RL_592h instead.
 */
#define SETUP_SRR_RL_592h_RdrObjDy_RL_1             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_592h_RdrObjDy_RL_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_592h_RdrObjDy_RL_1(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_592h_RdrObjDy_RL_1(buf) \
	SET_SRR_RL_592h_RdrObjDy_RL_1(buf, 0)

/**
 * Signal RdrObjDy_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_592h_RdrObjDy_RL_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_1 raw initial value.
 */
#define START_SRR_RL_592h_RdrObjDy_RL_1             0

/**
 * Signal RdrObjDy_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_592h_RdrObjDy_RL_1               0

/**
 * Signal RdrObjDy_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_592h_RdrObjDy_RL_1               2046

/**
 * Signal RdrObjDy_RL_1 raw offset value.
 */
#define OFF_SRR_RL_592h_RdrObjDy_RL_1               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjChks2_RL_1 Signal RdrObjChks2_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjChks2_RL_1 and \ref GET_SRR_RL_593h_RdrObjChks2_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjChks2_RL_1            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjChks2_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjChks2_RL_1          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjChks2_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjChks2_RL_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjChks2_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjChks2_RL_1(buf, 0)

/**
 * Signal RdrObjChks2_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjChks2_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjChks2_RL_1          0

/**
 * Signal RdrObjChks2_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjChks2_RL_1            0

/**
 * Signal RdrObjChks2_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjChks2_RL_1            255

/**
 * Signal RdrObjChks2_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjChks2_RL_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjDx_RL_1 Signal RdrObjDx_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjDx_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjDx_RL_1 and \ref GET_SRR_RL_593h_RdrObjDx_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjDx_RL_1               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjDx_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjDx_RL_1             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjDx_RL_1(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjDx_RL_1(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjDx_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjDx_RL_1(buf, 0)

/**
 * Signal RdrObjDx_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjDx_RL_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjDx_RL_1             0

/**
 * Signal RdrObjDx_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjDx_RL_1               0

/**
 * Signal RdrObjDx_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjDx_RL_1               2540

/**
 * Signal RdrObjDx_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjDx_RL_1               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjTiAlv_RL_1 Signal RdrObjTiAlv_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjTiAlv_RL_1 and \ref GET_SRR_RL_593h_RdrObjTiAlv_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjTiAlv_RL_1            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjTiAlv_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjTiAlv_RL_1          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjTiAlv_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjTiAlv_RL_1(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjTiAlv_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjTiAlv_RL_1(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjTiAlv_RL_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjTiAlv_RL_1          0

/**
 * Signal RdrObjTiAlv_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjTiAlv_RL_1            0

/**
 * Signal RdrObjTiAlv_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjTiAlv_RL_1            127

/**
 * Signal RdrObjTiAlv_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjTiAlv_RL_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjVy_RL_1 Signal RdrObjVy_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjVy_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjVy_RL_1 and \ref GET_SRR_RL_593h_RdrObjVy_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjVy_RL_1               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjVy_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjVy_RL_1             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjVy_RL_1(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjVy_RL_1(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjVy_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjVy_RL_1(buf, 0)

/**
 * Signal RdrObjVy_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjVy_RL_1(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjVy_RL_1             0

/**
 * Signal RdrObjVy_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjVy_RL_1               0

/**
 * Signal RdrObjVy_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjVy_RL_1               1023

/**
 * Signal RdrObjVy_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjVy_RL_1               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjVx_RL_1 Signal RdrObjVx_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjVx_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjVx_RL_1 and \ref GET_SRR_RL_593h_RdrObjVx_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjVx_RL_1               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjVx_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjVx_RL_1             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjVx_RL_1(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjVx_RL_1(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjVx_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjVx_RL_1(buf, 0)

/**
 * Signal RdrObjVx_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjVx_RL_1(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjVx_RL_1             0

/**
 * Signal RdrObjVx_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjVx_RL_1               0

/**
 * Signal RdrObjVx_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjVx_RL_1               1023

/**
 * Signal RdrObjVx_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjVx_RL_1               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjWth_RL_1 Signal RdrObjWth_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjWth_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjWth_RL_1 and \ref GET_SRR_RL_593h_RdrObjWth_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjWth_RL_1              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjWth_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjWth_RL_1            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjWth_RL_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjWth_RL_1(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjWth_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjWth_RL_1(buf, 0)

/**
 * Signal RdrObjWth_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjWth_RL_1(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjWth_RL_1            0

/**
 * Signal RdrObjWth_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjWth_RL_1              0

/**
 * Signal RdrObjWth_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjWth_RL_1              50

/**
 * Signal RdrObjWth_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjWth_RL_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_593h_RdrObjHeading_RL_1 Signal RdrObjHeading_RL_1 of Message SRR_RL_593h (0x593)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_593h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_593h_RdrObjHeading_RL_1 and \ref GET_SRR_RL_593h_RdrObjHeading_RL_1 instead.
 */
#define SIG_SRR_RL_593h_RdrObjHeading_RL_1          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_593h_RdrObjHeading_RL_1 or \ref INIT_SRR_RL_593h instead.
 */
#define SETUP_SRR_RL_593h_RdrObjHeading_RL_1        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_593h_RdrObjHeading_RL_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_593h_RdrObjHeading_RL_1(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_593h_RdrObjHeading_RL_1(buf) \
	SET_SRR_RL_593h_RdrObjHeading_RL_1(buf, 0)

/**
 * Signal RdrObjHeading_RL_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_593h_RdrObjHeading_RL_1(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_1 raw initial value.
 */
#define START_SRR_RL_593h_RdrObjHeading_RL_1        0

/**
 * Signal RdrObjHeading_RL_1 raw minimum value.
 */
#define MIN_SRR_RL_593h_RdrObjHeading_RL_1          0

/**
 * Signal RdrObjHeading_RL_1 raw maximum value.
 */
#define MAX_SRR_RL_593h_RdrObjHeading_RL_1          360

/**
 * Signal RdrObjHeading_RL_1 raw offset value.
 */
#define OFF_SRR_RL_593h_RdrObjHeading_RL_1          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjChks_RL_2 Signal RdrObjChks_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjChks_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjChks_RL_2 and \ref GET_SRR_RL_594h_RdrObjChks_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjChks_RL_2             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjChks_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjChks_RL_2           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjChks_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjChks_RL_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjChks_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjChks_RL_2(buf, 0)

/**
 * Signal RdrObjChks_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjChks_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjChks_RL_2           0

/**
 * Signal RdrObjChks_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjChks_RL_2             0

/**
 * Signal RdrObjChks_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjChks_RL_2             255

/**
 * Signal RdrObjChks_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjChks_RL_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjCntr_RL_2 Signal RdrObjCntr_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjCntr_RL_2 and \ref GET_SRR_RL_594h_RdrObjCntr_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjCntr_RL_2             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjCntr_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjCntr_RL_2           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjCntr_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjCntr_RL_2(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjCntr_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjCntr_RL_2(buf, 0)

/**
 * Signal RdrObjCntr_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjCntr_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjCntr_RL_2           0

/**
 * Signal RdrObjCntr_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjCntr_RL_2             0

/**
 * Signal RdrObjCntr_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjCntr_RL_2             15

/**
 * Signal RdrObjCntr_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjCntr_RL_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjAy_RL_2 Signal RdrObjAy_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjAy_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjAy_RL_2 and \ref GET_SRR_RL_594h_RdrObjAy_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjAy_RL_2               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjAy_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjAy_RL_2             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjAy_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjAy_RL_2(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjAy_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjAy_RL_2(buf, 0)

/**
 * Signal RdrObjAy_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjAy_RL_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjAy_RL_2             0

/**
 * Signal RdrObjAy_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjAy_RL_2               0

/**
 * Signal RdrObjAy_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjAy_RL_2               128

/**
 * Signal RdrObjAy_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjAy_RL_2               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjAx_RL_2 Signal RdrObjAx_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjAx_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjAx_RL_2 and \ref GET_SRR_RL_594h_RdrObjAx_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjAx_RL_2               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjAx_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjAx_RL_2             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjAx_RL_2(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjAx_RL_2(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjAx_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjAx_RL_2(buf, 0)

/**
 * Signal RdrObjAx_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjAx_RL_2(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjAx_RL_2             0

/**
 * Signal RdrObjAx_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjAx_RL_2               0

/**
 * Signal RdrObjAx_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjAx_RL_2               512

/**
 * Signal RdrObjAx_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjAx_RL_2               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjCoast_RL_2 Signal RdrObjCoast_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjCoast_RL_2 and \ref GET_SRR_RL_594h_RdrObjCoast_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjCoast_RL_2            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjCoast_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjCoast_RL_2          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjCoast_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjCoast_RL_2(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjCoast_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjCoast_RL_2(buf, 0)

/**
 * Signal RdrObjCoast_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjCoast_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjCoast_RL_2          0

/**
 * Signal RdrObjCoast_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjCoast_RL_2            0

/**
 * Signal RdrObjCoast_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjCoast_RL_2            1

/**
 * Signal RdrObjCoast_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjCoast_RL_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjConf_RL_2 Signal RdrObjConf_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjConf_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjConf_RL_2 and \ref GET_SRR_RL_594h_RdrObjConf_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjConf_RL_2             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjConf_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjConf_RL_2           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjConf_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjConf_RL_2(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjConf_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjConf_RL_2(buf, 0)

/**
 * Signal RdrObjConf_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjConf_RL_2(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjConf_RL_2           0

/**
 * Signal RdrObjConf_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjConf_RL_2             0

/**
 * Signal RdrObjConf_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjConf_RL_2             14

/**
 * Signal RdrObjConf_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjConf_RL_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjMtnPat_RL_2 Signal RdrObjMtnPat_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjMtnPat_RL_2 and \ref GET_SRR_RL_594h_RdrObjMtnPat_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjMtnPat_RL_2           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjMtnPat_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjMtnPat_RL_2         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjMtnPat_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjMtnPat_RL_2(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjMtnPat_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjMtnPat_RL_2(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjMtnPat_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjMtnPat_RL_2         0

/**
 * Signal RdrObjMtnPat_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjMtnPat_RL_2           0

/**
 * Signal RdrObjMtnPat_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjMtnPat_RL_2           3

/**
 * Signal RdrObjMtnPat_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjMtnPat_RL_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjID_RL_2 Signal RdrObjID_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjID_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjID_RL_2 and \ref GET_SRR_RL_594h_RdrObjID_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjID_RL_2               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjID_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjID_RL_2             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjID_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjID_RL_2(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjID_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjID_RL_2(buf, 0)

/**
 * Signal RdrObjID_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjID_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjID_RL_2             0

/**
 * Signal RdrObjID_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjID_RL_2               0

/**
 * Signal RdrObjID_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjID_RL_2               255

/**
 * Signal RdrObjID_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjID_RL_2               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjTyp_RL_2 Signal RdrObjTyp_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjTyp_RL_2 and \ref GET_SRR_RL_594h_RdrObjTyp_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjTyp_RL_2              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjTyp_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjTyp_RL_2            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjTyp_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjTyp_RL_2(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjTyp_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjTyp_RL_2(buf, 0)

/**
 * Signal RdrObjTyp_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjTyp_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjTyp_RL_2            0

/**
 * Signal RdrObjTyp_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjTyp_RL_2              0

/**
 * Signal RdrObjTyp_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjTyp_RL_2              3

/**
 * Signal RdrObjTyp_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjTyp_RL_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_594h_RdrObjDy_RL_2 Signal RdrObjDy_RL_2 of Message SRR_RL_594h (0x594)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_594h
 * @{
 */

/**
 * Signal RdrObjDy_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_594h_RdrObjDy_RL_2 and \ref GET_SRR_RL_594h_RdrObjDy_RL_2 instead.
 */
#define SIG_SRR_RL_594h_RdrObjDy_RL_2               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_594h_RdrObjDy_RL_2 or \ref INIT_SRR_RL_594h instead.
 */
#define SETUP_SRR_RL_594h_RdrObjDy_RL_2             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_594h_RdrObjDy_RL_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_594h_RdrObjDy_RL_2(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_594h_RdrObjDy_RL_2(buf) \
	SET_SRR_RL_594h_RdrObjDy_RL_2(buf, 0)

/**
 * Signal RdrObjDy_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_594h_RdrObjDy_RL_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_2 raw initial value.
 */
#define START_SRR_RL_594h_RdrObjDy_RL_2             0

/**
 * Signal RdrObjDy_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_594h_RdrObjDy_RL_2               0

/**
 * Signal RdrObjDy_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_594h_RdrObjDy_RL_2               2046

/**
 * Signal RdrObjDy_RL_2 raw offset value.
 */
#define OFF_SRR_RL_594h_RdrObjDy_RL_2               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjChks2_RL_2 Signal RdrObjChks2_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjChks2_RL_2 and \ref GET_SRR_RL_595h_RdrObjChks2_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjChks2_RL_2            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjChks2_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjChks2_RL_2          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjChks2_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjChks2_RL_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjChks2_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjChks2_RL_2(buf, 0)

/**
 * Signal RdrObjChks2_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjChks2_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjChks2_RL_2          0

/**
 * Signal RdrObjChks2_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjChks2_RL_2            0

/**
 * Signal RdrObjChks2_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjChks2_RL_2            255

/**
 * Signal RdrObjChks2_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjChks2_RL_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjDx_RL_2 Signal RdrObjDx_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjDx_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjDx_RL_2 and \ref GET_SRR_RL_595h_RdrObjDx_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjDx_RL_2               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjDx_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjDx_RL_2             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjDx_RL_2(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjDx_RL_2(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjDx_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjDx_RL_2(buf, 0)

/**
 * Signal RdrObjDx_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjDx_RL_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjDx_RL_2             0

/**
 * Signal RdrObjDx_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjDx_RL_2               0

/**
 * Signal RdrObjDx_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjDx_RL_2               2540

/**
 * Signal RdrObjDx_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjDx_RL_2               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjTiAlv_RL_2 Signal RdrObjTiAlv_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjTiAlv_RL_2 and \ref GET_SRR_RL_595h_RdrObjTiAlv_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjTiAlv_RL_2            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjTiAlv_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjTiAlv_RL_2          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjTiAlv_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjTiAlv_RL_2(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjTiAlv_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjTiAlv_RL_2(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjTiAlv_RL_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjTiAlv_RL_2          0

/**
 * Signal RdrObjTiAlv_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjTiAlv_RL_2            0

/**
 * Signal RdrObjTiAlv_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjTiAlv_RL_2            127

/**
 * Signal RdrObjTiAlv_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjTiAlv_RL_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjVy_RL_2 Signal RdrObjVy_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjVy_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjVy_RL_2 and \ref GET_SRR_RL_595h_RdrObjVy_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjVy_RL_2               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjVy_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjVy_RL_2             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjVy_RL_2(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjVy_RL_2(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjVy_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjVy_RL_2(buf, 0)

/**
 * Signal RdrObjVy_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjVy_RL_2(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjVy_RL_2             0

/**
 * Signal RdrObjVy_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjVy_RL_2               0

/**
 * Signal RdrObjVy_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjVy_RL_2               1023

/**
 * Signal RdrObjVy_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjVy_RL_2               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjVx_RL_2 Signal RdrObjVx_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjVx_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjVx_RL_2 and \ref GET_SRR_RL_595h_RdrObjVx_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjVx_RL_2               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjVx_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjVx_RL_2             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjVx_RL_2(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjVx_RL_2(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjVx_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjVx_RL_2(buf, 0)

/**
 * Signal RdrObjVx_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjVx_RL_2(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjVx_RL_2             0

/**
 * Signal RdrObjVx_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjVx_RL_2               0

/**
 * Signal RdrObjVx_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjVx_RL_2               1023

/**
 * Signal RdrObjVx_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjVx_RL_2               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjWth_RL_2 Signal RdrObjWth_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjWth_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjWth_RL_2 and \ref GET_SRR_RL_595h_RdrObjWth_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjWth_RL_2              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjWth_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjWth_RL_2            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjWth_RL_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjWth_RL_2(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjWth_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjWth_RL_2(buf, 0)

/**
 * Signal RdrObjWth_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjWth_RL_2(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjWth_RL_2            0

/**
 * Signal RdrObjWth_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjWth_RL_2              0

/**
 * Signal RdrObjWth_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjWth_RL_2              50

/**
 * Signal RdrObjWth_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjWth_RL_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_595h_RdrObjHeading_RL_2 Signal RdrObjHeading_RL_2 of Message SRR_RL_595h (0x595)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_595h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_595h_RdrObjHeading_RL_2 and \ref GET_SRR_RL_595h_RdrObjHeading_RL_2 instead.
 */
#define SIG_SRR_RL_595h_RdrObjHeading_RL_2          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_595h_RdrObjHeading_RL_2 or \ref INIT_SRR_RL_595h instead.
 */
#define SETUP_SRR_RL_595h_RdrObjHeading_RL_2        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_595h_RdrObjHeading_RL_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_595h_RdrObjHeading_RL_2(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_595h_RdrObjHeading_RL_2(buf) \
	SET_SRR_RL_595h_RdrObjHeading_RL_2(buf, 0)

/**
 * Signal RdrObjHeading_RL_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_595h_RdrObjHeading_RL_2(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_2 raw initial value.
 */
#define START_SRR_RL_595h_RdrObjHeading_RL_2        0

/**
 * Signal RdrObjHeading_RL_2 raw minimum value.
 */
#define MIN_SRR_RL_595h_RdrObjHeading_RL_2          0

/**
 * Signal RdrObjHeading_RL_2 raw maximum value.
 */
#define MAX_SRR_RL_595h_RdrObjHeading_RL_2          360

/**
 * Signal RdrObjHeading_RL_2 raw offset value.
 */
#define OFF_SRR_RL_595h_RdrObjHeading_RL_2          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjChks_RL_3 Signal RdrObjChks_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjChks_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjChks_RL_3 and \ref GET_SRR_RL_596h_RdrObjChks_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjChks_RL_3             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjChks_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjChks_RL_3           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjChks_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjChks_RL_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjChks_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjChks_RL_3(buf, 0)

/**
 * Signal RdrObjChks_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjChks_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjChks_RL_3           0

/**
 * Signal RdrObjChks_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjChks_RL_3             0

/**
 * Signal RdrObjChks_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjChks_RL_3             255

/**
 * Signal RdrObjChks_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjChks_RL_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjCntr_RL_3 Signal RdrObjCntr_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjCntr_RL_3 and \ref GET_SRR_RL_596h_RdrObjCntr_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjCntr_RL_3             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjCntr_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjCntr_RL_3           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjCntr_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjCntr_RL_3(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjCntr_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjCntr_RL_3(buf, 0)

/**
 * Signal RdrObjCntr_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjCntr_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjCntr_RL_3           0

/**
 * Signal RdrObjCntr_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjCntr_RL_3             0

/**
 * Signal RdrObjCntr_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjCntr_RL_3             15

/**
 * Signal RdrObjCntr_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjCntr_RL_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjAy_RL_3 Signal RdrObjAy_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjAy_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjAy_RL_3 and \ref GET_SRR_RL_596h_RdrObjAy_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjAy_RL_3               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjAy_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjAy_RL_3             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjAy_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjAy_RL_3(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjAy_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjAy_RL_3(buf, 0)

/**
 * Signal RdrObjAy_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjAy_RL_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjAy_RL_3             0

/**
 * Signal RdrObjAy_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjAy_RL_3               0

/**
 * Signal RdrObjAy_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjAy_RL_3               128

/**
 * Signal RdrObjAy_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjAy_RL_3               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjAx_RL_3 Signal RdrObjAx_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjAx_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjAx_RL_3 and \ref GET_SRR_RL_596h_RdrObjAx_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjAx_RL_3               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjAx_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjAx_RL_3             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjAx_RL_3(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjAx_RL_3(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjAx_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjAx_RL_3(buf, 0)

/**
 * Signal RdrObjAx_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjAx_RL_3(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjAx_RL_3             0

/**
 * Signal RdrObjAx_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjAx_RL_3               0

/**
 * Signal RdrObjAx_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjAx_RL_3               512

/**
 * Signal RdrObjAx_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjAx_RL_3               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjCoast_RL_3 Signal RdrObjCoast_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjCoast_RL_3 and \ref GET_SRR_RL_596h_RdrObjCoast_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjCoast_RL_3            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjCoast_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjCoast_RL_3          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjCoast_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjCoast_RL_3(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjCoast_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjCoast_RL_3(buf, 0)

/**
 * Signal RdrObjCoast_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjCoast_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjCoast_RL_3          0

/**
 * Signal RdrObjCoast_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjCoast_RL_3            0

/**
 * Signal RdrObjCoast_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjCoast_RL_3            1

/**
 * Signal RdrObjCoast_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjCoast_RL_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjConf_RL_3 Signal RdrObjConf_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjConf_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjConf_RL_3 and \ref GET_SRR_RL_596h_RdrObjConf_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjConf_RL_3             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjConf_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjConf_RL_3           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjConf_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjConf_RL_3(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjConf_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjConf_RL_3(buf, 0)

/**
 * Signal RdrObjConf_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjConf_RL_3(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjConf_RL_3           0

/**
 * Signal RdrObjConf_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjConf_RL_3             0

/**
 * Signal RdrObjConf_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjConf_RL_3             14

/**
 * Signal RdrObjConf_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjConf_RL_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjMtnPat_RL_3 Signal RdrObjMtnPat_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjMtnPat_RL_3 and \ref GET_SRR_RL_596h_RdrObjMtnPat_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjMtnPat_RL_3           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjMtnPat_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjMtnPat_RL_3         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjMtnPat_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjMtnPat_RL_3(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjMtnPat_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjMtnPat_RL_3(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjMtnPat_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjMtnPat_RL_3         0

/**
 * Signal RdrObjMtnPat_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjMtnPat_RL_3           0

/**
 * Signal RdrObjMtnPat_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjMtnPat_RL_3           3

/**
 * Signal RdrObjMtnPat_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjMtnPat_RL_3           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjID_RL_3 Signal RdrObjID_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjID_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjID_RL_3 and \ref GET_SRR_RL_596h_RdrObjID_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjID_RL_3               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjID_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjID_RL_3             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjID_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjID_RL_3(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjID_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjID_RL_3(buf, 0)

/**
 * Signal RdrObjID_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjID_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjID_RL_3             0

/**
 * Signal RdrObjID_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjID_RL_3               0

/**
 * Signal RdrObjID_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjID_RL_3               255

/**
 * Signal RdrObjID_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjID_RL_3               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjTyp_RL_3 Signal RdrObjTyp_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjTyp_RL_3 and \ref GET_SRR_RL_596h_RdrObjTyp_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjTyp_RL_3              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjTyp_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjTyp_RL_3            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjTyp_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjTyp_RL_3(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjTyp_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjTyp_RL_3(buf, 0)

/**
 * Signal RdrObjTyp_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjTyp_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjTyp_RL_3            0

/**
 * Signal RdrObjTyp_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjTyp_RL_3              0

/**
 * Signal RdrObjTyp_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjTyp_RL_3              3

/**
 * Signal RdrObjTyp_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjTyp_RL_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_596h_RdrObjDy_RL_3 Signal RdrObjDy_RL_3 of Message SRR_RL_596h (0x596)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_596h
 * @{
 */

/**
 * Signal RdrObjDy_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_596h_RdrObjDy_RL_3 and \ref GET_SRR_RL_596h_RdrObjDy_RL_3 instead.
 */
#define SIG_SRR_RL_596h_RdrObjDy_RL_3               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_596h_RdrObjDy_RL_3 or \ref INIT_SRR_RL_596h instead.
 */
#define SETUP_SRR_RL_596h_RdrObjDy_RL_3             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_596h_RdrObjDy_RL_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_596h_RdrObjDy_RL_3(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_596h_RdrObjDy_RL_3(buf) \
	SET_SRR_RL_596h_RdrObjDy_RL_3(buf, 0)

/**
 * Signal RdrObjDy_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_596h_RdrObjDy_RL_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_3 raw initial value.
 */
#define START_SRR_RL_596h_RdrObjDy_RL_3             0

/**
 * Signal RdrObjDy_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_596h_RdrObjDy_RL_3               0

/**
 * Signal RdrObjDy_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_596h_RdrObjDy_RL_3               2046

/**
 * Signal RdrObjDy_RL_3 raw offset value.
 */
#define OFF_SRR_RL_596h_RdrObjDy_RL_3               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjChks2_RL_3 Signal RdrObjChks2_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjChks2_RL_3 and \ref GET_SRR_RL_597h_RdrObjChks2_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjChks2_RL_3            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjChks2_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjChks2_RL_3          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjChks2_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjChks2_RL_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjChks2_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjChks2_RL_3(buf, 0)

/**
 * Signal RdrObjChks2_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjChks2_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjChks2_RL_3          0

/**
 * Signal RdrObjChks2_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjChks2_RL_3            0

/**
 * Signal RdrObjChks2_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjChks2_RL_3            255

/**
 * Signal RdrObjChks2_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjChks2_RL_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjDx_RL_3 Signal RdrObjDx_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjDx_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjDx_RL_3 and \ref GET_SRR_RL_597h_RdrObjDx_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjDx_RL_3               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjDx_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjDx_RL_3             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjDx_RL_3(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjDx_RL_3(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjDx_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjDx_RL_3(buf, 0)

/**
 * Signal RdrObjDx_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjDx_RL_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjDx_RL_3             0

/**
 * Signal RdrObjDx_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjDx_RL_3               0

/**
 * Signal RdrObjDx_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjDx_RL_3               2540

/**
 * Signal RdrObjDx_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjDx_RL_3               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjTiAlv_RL_3 Signal RdrObjTiAlv_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjTiAlv_RL_3 and \ref GET_SRR_RL_597h_RdrObjTiAlv_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjTiAlv_RL_3            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjTiAlv_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjTiAlv_RL_3          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjTiAlv_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjTiAlv_RL_3(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjTiAlv_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjTiAlv_RL_3(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjTiAlv_RL_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjTiAlv_RL_3          0

/**
 * Signal RdrObjTiAlv_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjTiAlv_RL_3            0

/**
 * Signal RdrObjTiAlv_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjTiAlv_RL_3            127

/**
 * Signal RdrObjTiAlv_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjTiAlv_RL_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjVy_RL_3 Signal RdrObjVy_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjVy_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjVy_RL_3 and \ref GET_SRR_RL_597h_RdrObjVy_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjVy_RL_3               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjVy_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjVy_RL_3             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjVy_RL_3(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjVy_RL_3(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjVy_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjVy_RL_3(buf, 0)

/**
 * Signal RdrObjVy_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjVy_RL_3(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjVy_RL_3             0

/**
 * Signal RdrObjVy_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjVy_RL_3               0

/**
 * Signal RdrObjVy_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjVy_RL_3               1023

/**
 * Signal RdrObjVy_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjVy_RL_3               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjVx_RL_3 Signal RdrObjVx_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjVx_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjVx_RL_3 and \ref GET_SRR_RL_597h_RdrObjVx_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjVx_RL_3               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjVx_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjVx_RL_3             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjVx_RL_3(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjVx_RL_3(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjVx_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjVx_RL_3(buf, 0)

/**
 * Signal RdrObjVx_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjVx_RL_3(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjVx_RL_3             0

/**
 * Signal RdrObjVx_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjVx_RL_3               0

/**
 * Signal RdrObjVx_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjVx_RL_3               1023

/**
 * Signal RdrObjVx_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjVx_RL_3               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjWth_RL_3 Signal RdrObjWth_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjWth_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjWth_RL_3 and \ref GET_SRR_RL_597h_RdrObjWth_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjWth_RL_3              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjWth_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjWth_RL_3            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjWth_RL_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjWth_RL_3(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjWth_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjWth_RL_3(buf, 0)

/**
 * Signal RdrObjWth_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjWth_RL_3(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjWth_RL_3            0

/**
 * Signal RdrObjWth_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjWth_RL_3              0

/**
 * Signal RdrObjWth_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjWth_RL_3              50

/**
 * Signal RdrObjWth_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjWth_RL_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_597h_RdrObjHeading_RL_3 Signal RdrObjHeading_RL_3 of Message SRR_RL_597h (0x597)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_597h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_597h_RdrObjHeading_RL_3 and \ref GET_SRR_RL_597h_RdrObjHeading_RL_3 instead.
 */
#define SIG_SRR_RL_597h_RdrObjHeading_RL_3          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_597h_RdrObjHeading_RL_3 or \ref INIT_SRR_RL_597h instead.
 */
#define SETUP_SRR_RL_597h_RdrObjHeading_RL_3        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_597h_RdrObjHeading_RL_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_597h_RdrObjHeading_RL_3(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_597h_RdrObjHeading_RL_3(buf) \
	SET_SRR_RL_597h_RdrObjHeading_RL_3(buf, 0)

/**
 * Signal RdrObjHeading_RL_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_597h_RdrObjHeading_RL_3(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_3 raw initial value.
 */
#define START_SRR_RL_597h_RdrObjHeading_RL_3        0

/**
 * Signal RdrObjHeading_RL_3 raw minimum value.
 */
#define MIN_SRR_RL_597h_RdrObjHeading_RL_3          0

/**
 * Signal RdrObjHeading_RL_3 raw maximum value.
 */
#define MAX_SRR_RL_597h_RdrObjHeading_RL_3          360

/**
 * Signal RdrObjHeading_RL_3 raw offset value.
 */
#define OFF_SRR_RL_597h_RdrObjHeading_RL_3          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjChks_RL_4 Signal RdrObjChks_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjChks_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjChks_RL_4 and \ref GET_SRR_RL_598h_RdrObjChks_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjChks_RL_4             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjChks_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjChks_RL_4           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjChks_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjChks_RL_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjChks_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjChks_RL_4(buf, 0)

/**
 * Signal RdrObjChks_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjChks_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjChks_RL_4           0

/**
 * Signal RdrObjChks_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjChks_RL_4             0

/**
 * Signal RdrObjChks_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjChks_RL_4             255

/**
 * Signal RdrObjChks_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjChks_RL_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjCntr_RL_4 Signal RdrObjCntr_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjCntr_RL_4 and \ref GET_SRR_RL_598h_RdrObjCntr_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjCntr_RL_4             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjCntr_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjCntr_RL_4           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjCntr_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjCntr_RL_4(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjCntr_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjCntr_RL_4(buf, 0)

/**
 * Signal RdrObjCntr_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjCntr_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjCntr_RL_4           0

/**
 * Signal RdrObjCntr_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjCntr_RL_4             0

/**
 * Signal RdrObjCntr_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjCntr_RL_4             15

/**
 * Signal RdrObjCntr_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjCntr_RL_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjAy_RL_4 Signal RdrObjAy_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjAy_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjAy_RL_4 and \ref GET_SRR_RL_598h_RdrObjAy_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjAy_RL_4               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjAy_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjAy_RL_4             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjAy_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjAy_RL_4(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjAy_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjAy_RL_4(buf, 0)

/**
 * Signal RdrObjAy_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjAy_RL_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjAy_RL_4             0

/**
 * Signal RdrObjAy_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjAy_RL_4               0

/**
 * Signal RdrObjAy_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjAy_RL_4               128

/**
 * Signal RdrObjAy_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjAy_RL_4               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjAx_RL_4 Signal RdrObjAx_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjAx_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjAx_RL_4 and \ref GET_SRR_RL_598h_RdrObjAx_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjAx_RL_4               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjAx_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjAx_RL_4             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjAx_RL_4(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjAx_RL_4(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjAx_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjAx_RL_4(buf, 0)

/**
 * Signal RdrObjAx_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjAx_RL_4(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjAx_RL_4             0

/**
 * Signal RdrObjAx_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjAx_RL_4               0

/**
 * Signal RdrObjAx_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjAx_RL_4               512

/**
 * Signal RdrObjAx_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjAx_RL_4               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjCoast_RL_4 Signal RdrObjCoast_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjCoast_RL_4 and \ref GET_SRR_RL_598h_RdrObjCoast_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjCoast_RL_4            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjCoast_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjCoast_RL_4          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjCoast_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjCoast_RL_4(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjCoast_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjCoast_RL_4(buf, 0)

/**
 * Signal RdrObjCoast_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjCoast_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjCoast_RL_4          0

/**
 * Signal RdrObjCoast_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjCoast_RL_4            0

/**
 * Signal RdrObjCoast_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjCoast_RL_4            1

/**
 * Signal RdrObjCoast_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjCoast_RL_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjConf_RL_4 Signal RdrObjConf_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjConf_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjConf_RL_4 and \ref GET_SRR_RL_598h_RdrObjConf_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjConf_RL_4             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjConf_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjConf_RL_4           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjConf_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjConf_RL_4(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjConf_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjConf_RL_4(buf, 0)

/**
 * Signal RdrObjConf_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjConf_RL_4(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjConf_RL_4           0

/**
 * Signal RdrObjConf_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjConf_RL_4             0

/**
 * Signal RdrObjConf_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjConf_RL_4             14

/**
 * Signal RdrObjConf_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjConf_RL_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjMtnPat_RL_4 Signal RdrObjMtnPat_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjMtnPat_RL_4 and \ref GET_SRR_RL_598h_RdrObjMtnPat_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjMtnPat_RL_4           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjMtnPat_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjMtnPat_RL_4         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjMtnPat_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjMtnPat_RL_4(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjMtnPat_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjMtnPat_RL_4(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjMtnPat_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjMtnPat_RL_4         0

/**
 * Signal RdrObjMtnPat_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjMtnPat_RL_4           0

/**
 * Signal RdrObjMtnPat_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjMtnPat_RL_4           3

/**
 * Signal RdrObjMtnPat_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjMtnPat_RL_4           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjID_RL_4 Signal RdrObjID_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjID_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjID_RL_4 and \ref GET_SRR_RL_598h_RdrObjID_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjID_RL_4               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjID_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjID_RL_4             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjID_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjID_RL_4(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjID_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjID_RL_4(buf, 0)

/**
 * Signal RdrObjID_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjID_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjID_RL_4             0

/**
 * Signal RdrObjID_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjID_RL_4               0

/**
 * Signal RdrObjID_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjID_RL_4               255

/**
 * Signal RdrObjID_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjID_RL_4               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjTyp_RL_4 Signal RdrObjTyp_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjTyp_RL_4 and \ref GET_SRR_RL_598h_RdrObjTyp_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjTyp_RL_4              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjTyp_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjTyp_RL_4            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjTyp_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjTyp_RL_4(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjTyp_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjTyp_RL_4(buf, 0)

/**
 * Signal RdrObjTyp_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjTyp_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjTyp_RL_4            0

/**
 * Signal RdrObjTyp_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjTyp_RL_4              0

/**
 * Signal RdrObjTyp_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjTyp_RL_4              3

/**
 * Signal RdrObjTyp_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjTyp_RL_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_598h_RdrObjDy_RL_4 Signal RdrObjDy_RL_4 of Message SRR_RL_598h (0x598)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_598h
 * @{
 */

/**
 * Signal RdrObjDy_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_598h_RdrObjDy_RL_4 and \ref GET_SRR_RL_598h_RdrObjDy_RL_4 instead.
 */
#define SIG_SRR_RL_598h_RdrObjDy_RL_4               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_598h_RdrObjDy_RL_4 or \ref INIT_SRR_RL_598h instead.
 */
#define SETUP_SRR_RL_598h_RdrObjDy_RL_4             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_598h_RdrObjDy_RL_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_598h_RdrObjDy_RL_4(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_598h_RdrObjDy_RL_4(buf) \
	SET_SRR_RL_598h_RdrObjDy_RL_4(buf, 0)

/**
 * Signal RdrObjDy_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_598h_RdrObjDy_RL_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_4 raw initial value.
 */
#define START_SRR_RL_598h_RdrObjDy_RL_4             0

/**
 * Signal RdrObjDy_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_598h_RdrObjDy_RL_4               0

/**
 * Signal RdrObjDy_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_598h_RdrObjDy_RL_4               2046

/**
 * Signal RdrObjDy_RL_4 raw offset value.
 */
#define OFF_SRR_RL_598h_RdrObjDy_RL_4               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjChks2_RL_4 Signal RdrObjChks2_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjChks2_RL_4 and \ref GET_SRR_RL_599h_RdrObjChks2_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjChks2_RL_4            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjChks2_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjChks2_RL_4          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjChks2_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjChks2_RL_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjChks2_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjChks2_RL_4(buf, 0)

/**
 * Signal RdrObjChks2_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjChks2_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjChks2_RL_4          0

/**
 * Signal RdrObjChks2_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjChks2_RL_4            0

/**
 * Signal RdrObjChks2_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjChks2_RL_4            255

/**
 * Signal RdrObjChks2_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjChks2_RL_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjDx_RL_4 Signal RdrObjDx_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjDx_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjDx_RL_4 and \ref GET_SRR_RL_599h_RdrObjDx_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjDx_RL_4               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjDx_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjDx_RL_4             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjDx_RL_4(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjDx_RL_4(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjDx_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjDx_RL_4(buf, 0)

/**
 * Signal RdrObjDx_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjDx_RL_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjDx_RL_4             0

/**
 * Signal RdrObjDx_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjDx_RL_4               0

/**
 * Signal RdrObjDx_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjDx_RL_4               2540

/**
 * Signal RdrObjDx_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjDx_RL_4               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjTiAlv_RL_4 Signal RdrObjTiAlv_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjTiAlv_RL_4 and \ref GET_SRR_RL_599h_RdrObjTiAlv_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjTiAlv_RL_4            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjTiAlv_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjTiAlv_RL_4          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjTiAlv_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjTiAlv_RL_4(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjTiAlv_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjTiAlv_RL_4(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjTiAlv_RL_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjTiAlv_RL_4          0

/**
 * Signal RdrObjTiAlv_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjTiAlv_RL_4            0

/**
 * Signal RdrObjTiAlv_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjTiAlv_RL_4            127

/**
 * Signal RdrObjTiAlv_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjTiAlv_RL_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjVy_RL_4 Signal RdrObjVy_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjVy_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjVy_RL_4 and \ref GET_SRR_RL_599h_RdrObjVy_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjVy_RL_4               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjVy_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjVy_RL_4             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjVy_RL_4(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjVy_RL_4(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjVy_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjVy_RL_4(buf, 0)

/**
 * Signal RdrObjVy_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjVy_RL_4(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjVy_RL_4             0

/**
 * Signal RdrObjVy_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjVy_RL_4               0

/**
 * Signal RdrObjVy_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjVy_RL_4               1023

/**
 * Signal RdrObjVy_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjVy_RL_4               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjVx_RL_4 Signal RdrObjVx_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjVx_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjVx_RL_4 and \ref GET_SRR_RL_599h_RdrObjVx_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjVx_RL_4               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjVx_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjVx_RL_4             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjVx_RL_4(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjVx_RL_4(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjVx_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjVx_RL_4(buf, 0)

/**
 * Signal RdrObjVx_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjVx_RL_4(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjVx_RL_4             0

/**
 * Signal RdrObjVx_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjVx_RL_4               0

/**
 * Signal RdrObjVx_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjVx_RL_4               1023

/**
 * Signal RdrObjVx_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjVx_RL_4               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjWth_RL_4 Signal RdrObjWth_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjWth_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjWth_RL_4 and \ref GET_SRR_RL_599h_RdrObjWth_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjWth_RL_4              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjWth_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjWth_RL_4            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjWth_RL_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjWth_RL_4(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjWth_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjWth_RL_4(buf, 0)

/**
 * Signal RdrObjWth_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjWth_RL_4(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjWth_RL_4            0

/**
 * Signal RdrObjWth_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjWth_RL_4              0

/**
 * Signal RdrObjWth_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjWth_RL_4              50

/**
 * Signal RdrObjWth_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjWth_RL_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_599h_RdrObjHeading_RL_4 Signal RdrObjHeading_RL_4 of Message SRR_RL_599h (0x599)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_599h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_599h_RdrObjHeading_RL_4 and \ref GET_SRR_RL_599h_RdrObjHeading_RL_4 instead.
 */
#define SIG_SRR_RL_599h_RdrObjHeading_RL_4          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_599h_RdrObjHeading_RL_4 or \ref INIT_SRR_RL_599h instead.
 */
#define SETUP_SRR_RL_599h_RdrObjHeading_RL_4        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_599h_RdrObjHeading_RL_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_599h_RdrObjHeading_RL_4(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_599h_RdrObjHeading_RL_4(buf) \
	SET_SRR_RL_599h_RdrObjHeading_RL_4(buf, 0)

/**
 * Signal RdrObjHeading_RL_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_599h_RdrObjHeading_RL_4(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_4 raw initial value.
 */
#define START_SRR_RL_599h_RdrObjHeading_RL_4        0

/**
 * Signal RdrObjHeading_RL_4 raw minimum value.
 */
#define MIN_SRR_RL_599h_RdrObjHeading_RL_4          0

/**
 * Signal RdrObjHeading_RL_4 raw maximum value.
 */
#define MAX_SRR_RL_599h_RdrObjHeading_RL_4          360

/**
 * Signal RdrObjHeading_RL_4 raw offset value.
 */
#define OFF_SRR_RL_599h_RdrObjHeading_RL_4          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjChks_RL_5 Signal RdrObjChks_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjChks_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjChks_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjChks_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjChks_RL_5             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjChks_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjChks_RL_5           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjChks_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjChks_RL_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjChks_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjChks_RL_5(buf, 0)

/**
 * Signal RdrObjChks_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjChks_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjChks_RL_5           0

/**
 * Signal RdrObjChks_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjChks_RL_5             0

/**
 * Signal RdrObjChks_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjChks_RL_5             255

/**
 * Signal RdrObjChks_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjChks_RL_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjCntr_RL_5 Signal RdrObjCntr_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjCntr_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjCntr_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjCntr_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjCntr_RL_5             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjCntr_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjCntr_RL_5           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjCntr_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjCntr_RL_5(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjCntr_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjCntr_RL_5(buf, 0)

/**
 * Signal RdrObjCntr_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjCntr_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjCntr_RL_5           0

/**
 * Signal RdrObjCntr_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjCntr_RL_5             0

/**
 * Signal RdrObjCntr_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjCntr_RL_5             15

/**
 * Signal RdrObjCntr_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjCntr_RL_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjAy_RL_5 Signal RdrObjAy_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjAy_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjAy_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjAy_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjAy_RL_5               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjAy_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjAy_RL_5             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjAy_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjAy_RL_5(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjAy_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjAy_RL_5(buf, 0)

/**
 * Signal RdrObjAy_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjAy_RL_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjAy_RL_5             0

/**
 * Signal RdrObjAy_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjAy_RL_5               0

/**
 * Signal RdrObjAy_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjAy_RL_5               128

/**
 * Signal RdrObjAy_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjAy_RL_5               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjAx_RL_5 Signal RdrObjAx_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjAx_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjAx_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjAx_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjAx_RL_5               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjAx_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjAx_RL_5             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjAx_RL_5(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjAx_RL_5(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjAx_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjAx_RL_5(buf, 0)

/**
 * Signal RdrObjAx_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjAx_RL_5(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjAx_RL_5             0

/**
 * Signal RdrObjAx_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjAx_RL_5               0

/**
 * Signal RdrObjAx_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjAx_RL_5               512

/**
 * Signal RdrObjAx_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjAx_RL_5               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjCoast_RL_5 Signal RdrObjCoast_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjCoast_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjCoast_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjCoast_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjCoast_RL_5            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjCoast_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjCoast_RL_5          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjCoast_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjCoast_RL_5(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjCoast_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjCoast_RL_5(buf, 0)

/**
 * Signal RdrObjCoast_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjCoast_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjCoast_RL_5          0

/**
 * Signal RdrObjCoast_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjCoast_RL_5            0

/**
 * Signal RdrObjCoast_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjCoast_RL_5            1

/**
 * Signal RdrObjCoast_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjCoast_RL_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjConf_RL_5 Signal RdrObjConf_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjConf_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjConf_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjConf_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjConf_RL_5             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjConf_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjConf_RL_5           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjConf_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjConf_RL_5(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjConf_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjConf_RL_5(buf, 0)

/**
 * Signal RdrObjConf_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjConf_RL_5(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjConf_RL_5           0

/**
 * Signal RdrObjConf_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjConf_RL_5             0

/**
 * Signal RdrObjConf_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjConf_RL_5             14

/**
 * Signal RdrObjConf_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjConf_RL_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjMtnPat_RL_5 Signal RdrObjMtnPat_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjMtnPat_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjMtnPat_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjMtnPat_RL_5           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjMtnPat_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjMtnPat_RL_5         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjMtnPat_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjMtnPat_RL_5(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjMtnPat_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjMtnPat_RL_5(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjMtnPat_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjMtnPat_RL_5         0

/**
 * Signal RdrObjMtnPat_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjMtnPat_RL_5           0

/**
 * Signal RdrObjMtnPat_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjMtnPat_RL_5           3

/**
 * Signal RdrObjMtnPat_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjMtnPat_RL_5           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjID_RL_5 Signal RdrObjID_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjID_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjID_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjID_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjID_RL_5               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjID_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjID_RL_5             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjID_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjID_RL_5(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjID_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjID_RL_5(buf, 0)

/**
 * Signal RdrObjID_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjID_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjID_RL_5             0

/**
 * Signal RdrObjID_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjID_RL_5               0

/**
 * Signal RdrObjID_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjID_RL_5               255

/**
 * Signal RdrObjID_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjID_RL_5               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjTyp_RL_5 Signal RdrObjTyp_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjTyp_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjTyp_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjTyp_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjTyp_RL_5              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjTyp_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjTyp_RL_5            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjTyp_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjTyp_RL_5(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjTyp_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjTyp_RL_5(buf, 0)

/**
 * Signal RdrObjTyp_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjTyp_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjTyp_RL_5            0

/**
 * Signal RdrObjTyp_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjTyp_RL_5              0

/**
 * Signal RdrObjTyp_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjTyp_RL_5              3

/**
 * Signal RdrObjTyp_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjTyp_RL_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ah_RdrObjDy_RL_5 Signal RdrObjDy_RL_5 of Message SRR_RL_59Ah (0x59a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ah
 * @{
 */

/**
 * Signal RdrObjDy_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ah_RdrObjDy_RL_5 and \ref GET_SRR_RL_59Ah_RdrObjDy_RL_5 instead.
 */
#define SIG_SRR_RL_59Ah_RdrObjDy_RL_5               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ah_RdrObjDy_RL_5 or \ref INIT_SRR_RL_59Ah instead.
 */
#define SETUP_SRR_RL_59Ah_RdrObjDy_RL_5             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ah_RdrObjDy_RL_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ah_RdrObjDy_RL_5(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ah_RdrObjDy_RL_5(buf) \
	SET_SRR_RL_59Ah_RdrObjDy_RL_5(buf, 0)

/**
 * Signal RdrObjDy_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ah_RdrObjDy_RL_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_5 raw initial value.
 */
#define START_SRR_RL_59Ah_RdrObjDy_RL_5             0

/**
 * Signal RdrObjDy_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Ah_RdrObjDy_RL_5               0

/**
 * Signal RdrObjDy_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Ah_RdrObjDy_RL_5               2046

/**
 * Signal RdrObjDy_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Ah_RdrObjDy_RL_5               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjChks2_RL_5 Signal RdrObjChks2_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjChks2_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjChks2_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjChks2_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjChks2_RL_5            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjChks2_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjChks2_RL_5          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjChks2_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjChks2_RL_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjChks2_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjChks2_RL_5(buf, 0)

/**
 * Signal RdrObjChks2_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjChks2_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjChks2_RL_5          0

/**
 * Signal RdrObjChks2_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjChks2_RL_5            0

/**
 * Signal RdrObjChks2_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjChks2_RL_5            255

/**
 * Signal RdrObjChks2_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjChks2_RL_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjDx_RL_5 Signal RdrObjDx_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjDx_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjDx_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjDx_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjDx_RL_5               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjDx_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjDx_RL_5             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjDx_RL_5(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjDx_RL_5(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjDx_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjDx_RL_5(buf, 0)

/**
 * Signal RdrObjDx_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjDx_RL_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjDx_RL_5             0

/**
 * Signal RdrObjDx_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjDx_RL_5               0

/**
 * Signal RdrObjDx_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjDx_RL_5               2540

/**
 * Signal RdrObjDx_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjDx_RL_5               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjTiAlv_RL_5 Signal RdrObjTiAlv_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjTiAlv_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjTiAlv_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjTiAlv_RL_5            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjTiAlv_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjTiAlv_RL_5          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjTiAlv_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjTiAlv_RL_5(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjTiAlv_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjTiAlv_RL_5(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjTiAlv_RL_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjTiAlv_RL_5          0

/**
 * Signal RdrObjTiAlv_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjTiAlv_RL_5            0

/**
 * Signal RdrObjTiAlv_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjTiAlv_RL_5            127

/**
 * Signal RdrObjTiAlv_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjTiAlv_RL_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjVy_RL_5 Signal RdrObjVy_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjVy_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjVy_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjVy_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjVy_RL_5               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjVy_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjVy_RL_5             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjVy_RL_5(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjVy_RL_5(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjVy_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjVy_RL_5(buf, 0)

/**
 * Signal RdrObjVy_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjVy_RL_5(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjVy_RL_5             0

/**
 * Signal RdrObjVy_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjVy_RL_5               0

/**
 * Signal RdrObjVy_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjVy_RL_5               1023

/**
 * Signal RdrObjVy_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjVy_RL_5               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjVx_RL_5 Signal RdrObjVx_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjVx_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjVx_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjVx_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjVx_RL_5               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjVx_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjVx_RL_5             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjVx_RL_5(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjVx_RL_5(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjVx_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjVx_RL_5(buf, 0)

/**
 * Signal RdrObjVx_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjVx_RL_5(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjVx_RL_5             0

/**
 * Signal RdrObjVx_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjVx_RL_5               0

/**
 * Signal RdrObjVx_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjVx_RL_5               1023

/**
 * Signal RdrObjVx_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjVx_RL_5               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjWth_RL_5 Signal RdrObjWth_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjWth_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjWth_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjWth_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjWth_RL_5              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjWth_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjWth_RL_5            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjWth_RL_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjWth_RL_5(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjWth_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjWth_RL_5(buf, 0)

/**
 * Signal RdrObjWth_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjWth_RL_5(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjWth_RL_5            0

/**
 * Signal RdrObjWth_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjWth_RL_5              0

/**
 * Signal RdrObjWth_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjWth_RL_5              50

/**
 * Signal RdrObjWth_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjWth_RL_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Bh_RdrObjHeading_RL_5 Signal RdrObjHeading_RL_5 of Message SRR_RL_59Bh (0x59b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Bh
 * @{
 */

/**
 * Signal RdrObjHeading_RL_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Bh_RdrObjHeading_RL_5 and \ref GET_SRR_RL_59Bh_RdrObjHeading_RL_5 instead.
 */
#define SIG_SRR_RL_59Bh_RdrObjHeading_RL_5          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Bh_RdrObjHeading_RL_5 or \ref INIT_SRR_RL_59Bh instead.
 */
#define SETUP_SRR_RL_59Bh_RdrObjHeading_RL_5        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Bh_RdrObjHeading_RL_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Bh_RdrObjHeading_RL_5(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Bh_RdrObjHeading_RL_5(buf) \
	SET_SRR_RL_59Bh_RdrObjHeading_RL_5(buf, 0)

/**
 * Signal RdrObjHeading_RL_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Bh_RdrObjHeading_RL_5(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_5 raw initial value.
 */
#define START_SRR_RL_59Bh_RdrObjHeading_RL_5        0

/**
 * Signal RdrObjHeading_RL_5 raw minimum value.
 */
#define MIN_SRR_RL_59Bh_RdrObjHeading_RL_5          0

/**
 * Signal RdrObjHeading_RL_5 raw maximum value.
 */
#define MAX_SRR_RL_59Bh_RdrObjHeading_RL_5          360

/**
 * Signal RdrObjHeading_RL_5 raw offset value.
 */
#define OFF_SRR_RL_59Bh_RdrObjHeading_RL_5          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjChks_RL_6 Signal RdrObjChks_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjChks_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjChks_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjChks_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjChks_RL_6             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjChks_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjChks_RL_6           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjChks_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjChks_RL_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjChks_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjChks_RL_6(buf, 0)

/**
 * Signal RdrObjChks_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjChks_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjChks_RL_6           0

/**
 * Signal RdrObjChks_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjChks_RL_6             0

/**
 * Signal RdrObjChks_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjChks_RL_6             255

/**
 * Signal RdrObjChks_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjChks_RL_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjCntr_RL_6 Signal RdrObjCntr_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjCntr_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjCntr_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjCntr_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjCntr_RL_6             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjCntr_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjCntr_RL_6           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjCntr_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjCntr_RL_6(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjCntr_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjCntr_RL_6(buf, 0)

/**
 * Signal RdrObjCntr_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjCntr_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjCntr_RL_6           0

/**
 * Signal RdrObjCntr_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjCntr_RL_6             0

/**
 * Signal RdrObjCntr_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjCntr_RL_6             15

/**
 * Signal RdrObjCntr_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjCntr_RL_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjAy_RL_6 Signal RdrObjAy_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjAy_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjAy_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjAy_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjAy_RL_6               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjAy_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjAy_RL_6             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjAy_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjAy_RL_6(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjAy_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjAy_RL_6(buf, 0)

/**
 * Signal RdrObjAy_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjAy_RL_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjAy_RL_6             0

/**
 * Signal RdrObjAy_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjAy_RL_6               0

/**
 * Signal RdrObjAy_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjAy_RL_6               128

/**
 * Signal RdrObjAy_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjAy_RL_6               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjAx_RL_6 Signal RdrObjAx_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjAx_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjAx_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjAx_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjAx_RL_6               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjAx_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjAx_RL_6             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjAx_RL_6(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjAx_RL_6(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjAx_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjAx_RL_6(buf, 0)

/**
 * Signal RdrObjAx_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjAx_RL_6(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjAx_RL_6             0

/**
 * Signal RdrObjAx_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjAx_RL_6               0

/**
 * Signal RdrObjAx_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjAx_RL_6               512

/**
 * Signal RdrObjAx_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjAx_RL_6               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjCoast_RL_6 Signal RdrObjCoast_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjCoast_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjCoast_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjCoast_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjCoast_RL_6            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjCoast_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjCoast_RL_6          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjCoast_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjCoast_RL_6(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjCoast_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjCoast_RL_6(buf, 0)

/**
 * Signal RdrObjCoast_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjCoast_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjCoast_RL_6          0

/**
 * Signal RdrObjCoast_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjCoast_RL_6            0

/**
 * Signal RdrObjCoast_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjCoast_RL_6            1

/**
 * Signal RdrObjCoast_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjCoast_RL_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjConf_RL_6 Signal RdrObjConf_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjConf_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjConf_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjConf_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjConf_RL_6             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjConf_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjConf_RL_6           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjConf_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjConf_RL_6(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjConf_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjConf_RL_6(buf, 0)

/**
 * Signal RdrObjConf_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjConf_RL_6(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjConf_RL_6           0

/**
 * Signal RdrObjConf_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjConf_RL_6             0

/**
 * Signal RdrObjConf_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjConf_RL_6             14

/**
 * Signal RdrObjConf_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjConf_RL_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjMtnPat_RL_6 Signal RdrObjMtnPat_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjMtnPat_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjMtnPat_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjMtnPat_RL_6           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjMtnPat_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjMtnPat_RL_6         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjMtnPat_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjMtnPat_RL_6(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjMtnPat_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjMtnPat_RL_6(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjMtnPat_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjMtnPat_RL_6         0

/**
 * Signal RdrObjMtnPat_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjMtnPat_RL_6           0

/**
 * Signal RdrObjMtnPat_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjMtnPat_RL_6           3

/**
 * Signal RdrObjMtnPat_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjMtnPat_RL_6           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjID_RL_6 Signal RdrObjID_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjID_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjID_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjID_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjID_RL_6               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjID_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjID_RL_6             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjID_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjID_RL_6(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjID_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjID_RL_6(buf, 0)

/**
 * Signal RdrObjID_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjID_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjID_RL_6             0

/**
 * Signal RdrObjID_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjID_RL_6               0

/**
 * Signal RdrObjID_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjID_RL_6               255

/**
 * Signal RdrObjID_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjID_RL_6               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjTyp_RL_6 Signal RdrObjTyp_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjTyp_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjTyp_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjTyp_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjTyp_RL_6              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjTyp_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjTyp_RL_6            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjTyp_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjTyp_RL_6(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjTyp_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjTyp_RL_6(buf, 0)

/**
 * Signal RdrObjTyp_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjTyp_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjTyp_RL_6            0

/**
 * Signal RdrObjTyp_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjTyp_RL_6              0

/**
 * Signal RdrObjTyp_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjTyp_RL_6              3

/**
 * Signal RdrObjTyp_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjTyp_RL_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Ch_RdrObjDy_RL_6 Signal RdrObjDy_RL_6 of Message SRR_RL_59Ch (0x59c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Ch
 * @{
 */

/**
 * Signal RdrObjDy_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Ch_RdrObjDy_RL_6 and \ref GET_SRR_RL_59Ch_RdrObjDy_RL_6 instead.
 */
#define SIG_SRR_RL_59Ch_RdrObjDy_RL_6               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Ch_RdrObjDy_RL_6 or \ref INIT_SRR_RL_59Ch instead.
 */
#define SETUP_SRR_RL_59Ch_RdrObjDy_RL_6             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Ch_RdrObjDy_RL_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Ch_RdrObjDy_RL_6(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Ch_RdrObjDy_RL_6(buf) \
	SET_SRR_RL_59Ch_RdrObjDy_RL_6(buf, 0)

/**
 * Signal RdrObjDy_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Ch_RdrObjDy_RL_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_6 raw initial value.
 */
#define START_SRR_RL_59Ch_RdrObjDy_RL_6             0

/**
 * Signal RdrObjDy_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Ch_RdrObjDy_RL_6               0

/**
 * Signal RdrObjDy_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Ch_RdrObjDy_RL_6               2046

/**
 * Signal RdrObjDy_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Ch_RdrObjDy_RL_6               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjChks2_RL_6 Signal RdrObjChks2_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjChks2_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjChks2_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjChks2_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjChks2_RL_6            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjChks2_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjChks2_RL_6          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjChks2_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjChks2_RL_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjChks2_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjChks2_RL_6(buf, 0)

/**
 * Signal RdrObjChks2_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjChks2_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjChks2_RL_6          0

/**
 * Signal RdrObjChks2_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjChks2_RL_6            0

/**
 * Signal RdrObjChks2_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjChks2_RL_6            255

/**
 * Signal RdrObjChks2_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjChks2_RL_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjDx_RL_6 Signal RdrObjDx_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjDx_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjDx_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjDx_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjDx_RL_6               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjDx_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjDx_RL_6             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjDx_RL_6(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjDx_RL_6(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjDx_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjDx_RL_6(buf, 0)

/**
 * Signal RdrObjDx_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjDx_RL_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjDx_RL_6             0

/**
 * Signal RdrObjDx_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjDx_RL_6               0

/**
 * Signal RdrObjDx_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjDx_RL_6               2540

/**
 * Signal RdrObjDx_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjDx_RL_6               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjTiAlv_RL_6 Signal RdrObjTiAlv_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjTiAlv_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjTiAlv_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjTiAlv_RL_6            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjTiAlv_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjTiAlv_RL_6          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjTiAlv_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjTiAlv_RL_6(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjTiAlv_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjTiAlv_RL_6(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjTiAlv_RL_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjTiAlv_RL_6          0

/**
 * Signal RdrObjTiAlv_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjTiAlv_RL_6            0

/**
 * Signal RdrObjTiAlv_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjTiAlv_RL_6            127

/**
 * Signal RdrObjTiAlv_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjTiAlv_RL_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjVy_RL_6 Signal RdrObjVy_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjVy_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjVy_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjVy_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjVy_RL_6               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjVy_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjVy_RL_6             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjVy_RL_6(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjVy_RL_6(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjVy_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjVy_RL_6(buf, 0)

/**
 * Signal RdrObjVy_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjVy_RL_6(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjVy_RL_6             0

/**
 * Signal RdrObjVy_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjVy_RL_6               0

/**
 * Signal RdrObjVy_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjVy_RL_6               1023

/**
 * Signal RdrObjVy_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjVy_RL_6               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjVx_RL_6 Signal RdrObjVx_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjVx_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjVx_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjVx_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjVx_RL_6               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjVx_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjVx_RL_6             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjVx_RL_6(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjVx_RL_6(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjVx_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjVx_RL_6(buf, 0)

/**
 * Signal RdrObjVx_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjVx_RL_6(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjVx_RL_6             0

/**
 * Signal RdrObjVx_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjVx_RL_6               0

/**
 * Signal RdrObjVx_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjVx_RL_6               1023

/**
 * Signal RdrObjVx_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjVx_RL_6               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjWth_RL_6 Signal RdrObjWth_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjWth_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjWth_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjWth_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjWth_RL_6              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjWth_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjWth_RL_6            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjWth_RL_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjWth_RL_6(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjWth_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjWth_RL_6(buf, 0)

/**
 * Signal RdrObjWth_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjWth_RL_6(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjWth_RL_6            0

/**
 * Signal RdrObjWth_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjWth_RL_6              0

/**
 * Signal RdrObjWth_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjWth_RL_6              50

/**
 * Signal RdrObjWth_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjWth_RL_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Dh_RdrObjHeading_RL_6 Signal RdrObjHeading_RL_6 of Message SRR_RL_59Dh (0x59d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Dh
 * @{
 */

/**
 * Signal RdrObjHeading_RL_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Dh_RdrObjHeading_RL_6 and \ref GET_SRR_RL_59Dh_RdrObjHeading_RL_6 instead.
 */
#define SIG_SRR_RL_59Dh_RdrObjHeading_RL_6          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Dh_RdrObjHeading_RL_6 or \ref INIT_SRR_RL_59Dh instead.
 */
#define SETUP_SRR_RL_59Dh_RdrObjHeading_RL_6        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Dh_RdrObjHeading_RL_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Dh_RdrObjHeading_RL_6(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Dh_RdrObjHeading_RL_6(buf) \
	SET_SRR_RL_59Dh_RdrObjHeading_RL_6(buf, 0)

/**
 * Signal RdrObjHeading_RL_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Dh_RdrObjHeading_RL_6(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_6 raw initial value.
 */
#define START_SRR_RL_59Dh_RdrObjHeading_RL_6        0

/**
 * Signal RdrObjHeading_RL_6 raw minimum value.
 */
#define MIN_SRR_RL_59Dh_RdrObjHeading_RL_6          0

/**
 * Signal RdrObjHeading_RL_6 raw maximum value.
 */
#define MAX_SRR_RL_59Dh_RdrObjHeading_RL_6          360

/**
 * Signal RdrObjHeading_RL_6 raw offset value.
 */
#define OFF_SRR_RL_59Dh_RdrObjHeading_RL_6          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjChks_RL_7 Signal RdrObjChks_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjChks_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjChks_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjChks_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjChks_RL_7             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjChks_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjChks_RL_7           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjChks_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjChks_RL_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjChks_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjChks_RL_7(buf, 0)

/**
 * Signal RdrObjChks_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjChks_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjChks_RL_7           0

/**
 * Signal RdrObjChks_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjChks_RL_7             0

/**
 * Signal RdrObjChks_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjChks_RL_7             255

/**
 * Signal RdrObjChks_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjChks_RL_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjCntr_RL_7 Signal RdrObjCntr_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjCntr_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjCntr_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjCntr_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjCntr_RL_7             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjCntr_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjCntr_RL_7           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjCntr_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjCntr_RL_7(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjCntr_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjCntr_RL_7(buf, 0)

/**
 * Signal RdrObjCntr_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjCntr_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjCntr_RL_7           0

/**
 * Signal RdrObjCntr_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjCntr_RL_7             0

/**
 * Signal RdrObjCntr_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjCntr_RL_7             15

/**
 * Signal RdrObjCntr_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjCntr_RL_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjAy_RL_7 Signal RdrObjAy_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjAy_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjAy_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjAy_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjAy_RL_7               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjAy_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjAy_RL_7             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjAy_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjAy_RL_7(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjAy_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjAy_RL_7(buf, 0)

/**
 * Signal RdrObjAy_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjAy_RL_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjAy_RL_7             0

/**
 * Signal RdrObjAy_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjAy_RL_7               0

/**
 * Signal RdrObjAy_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjAy_RL_7               128

/**
 * Signal RdrObjAy_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjAy_RL_7               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjAx_RL_7 Signal RdrObjAx_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjAx_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjAx_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjAx_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjAx_RL_7               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjAx_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjAx_RL_7             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjAx_RL_7(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjAx_RL_7(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjAx_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjAx_RL_7(buf, 0)

/**
 * Signal RdrObjAx_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjAx_RL_7(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjAx_RL_7             0

/**
 * Signal RdrObjAx_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjAx_RL_7               0

/**
 * Signal RdrObjAx_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjAx_RL_7               512

/**
 * Signal RdrObjAx_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjAx_RL_7               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjCoast_RL_7 Signal RdrObjCoast_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjCoast_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjCoast_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjCoast_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjCoast_RL_7            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjCoast_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjCoast_RL_7          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjCoast_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjCoast_RL_7(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjCoast_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjCoast_RL_7(buf, 0)

/**
 * Signal RdrObjCoast_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjCoast_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjCoast_RL_7          0

/**
 * Signal RdrObjCoast_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjCoast_RL_7            0

/**
 * Signal RdrObjCoast_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjCoast_RL_7            1

/**
 * Signal RdrObjCoast_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjCoast_RL_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjConf_RL_7 Signal RdrObjConf_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjConf_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjConf_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjConf_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjConf_RL_7             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjConf_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjConf_RL_7           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjConf_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjConf_RL_7(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjConf_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjConf_RL_7(buf, 0)

/**
 * Signal RdrObjConf_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjConf_RL_7(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjConf_RL_7           0

/**
 * Signal RdrObjConf_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjConf_RL_7             0

/**
 * Signal RdrObjConf_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjConf_RL_7             14

/**
 * Signal RdrObjConf_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjConf_RL_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjMtnPat_RL_7 Signal RdrObjMtnPat_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjMtnPat_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjMtnPat_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjMtnPat_RL_7           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjMtnPat_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjMtnPat_RL_7         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjMtnPat_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjMtnPat_RL_7(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjMtnPat_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjMtnPat_RL_7(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjMtnPat_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjMtnPat_RL_7         0

/**
 * Signal RdrObjMtnPat_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjMtnPat_RL_7           0

/**
 * Signal RdrObjMtnPat_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjMtnPat_RL_7           3

/**
 * Signal RdrObjMtnPat_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjMtnPat_RL_7           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjID_RL_7 Signal RdrObjID_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjID_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjID_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjID_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjID_RL_7               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjID_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjID_RL_7             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjID_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjID_RL_7(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjID_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjID_RL_7(buf, 0)

/**
 * Signal RdrObjID_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjID_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjID_RL_7             0

/**
 * Signal RdrObjID_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjID_RL_7               0

/**
 * Signal RdrObjID_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjID_RL_7               255

/**
 * Signal RdrObjID_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjID_RL_7               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjTyp_RL_7 Signal RdrObjTyp_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjTyp_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjTyp_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjTyp_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjTyp_RL_7              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjTyp_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjTyp_RL_7            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjTyp_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjTyp_RL_7(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjTyp_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjTyp_RL_7(buf, 0)

/**
 * Signal RdrObjTyp_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjTyp_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjTyp_RL_7            0

/**
 * Signal RdrObjTyp_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjTyp_RL_7              0

/**
 * Signal RdrObjTyp_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjTyp_RL_7              3

/**
 * Signal RdrObjTyp_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjTyp_RL_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Eh_RdrObjDy_RL_7 Signal RdrObjDy_RL_7 of Message SRR_RL_59Eh (0x59e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Eh
 * @{
 */

/**
 * Signal RdrObjDy_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Eh_RdrObjDy_RL_7 and \ref GET_SRR_RL_59Eh_RdrObjDy_RL_7 instead.
 */
#define SIG_SRR_RL_59Eh_RdrObjDy_RL_7               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Eh_RdrObjDy_RL_7 or \ref INIT_SRR_RL_59Eh instead.
 */
#define SETUP_SRR_RL_59Eh_RdrObjDy_RL_7             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Eh_RdrObjDy_RL_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Eh_RdrObjDy_RL_7(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Eh_RdrObjDy_RL_7(buf) \
	SET_SRR_RL_59Eh_RdrObjDy_RL_7(buf, 0)

/**
 * Signal RdrObjDy_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Eh_RdrObjDy_RL_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_7 raw initial value.
 */
#define START_SRR_RL_59Eh_RdrObjDy_RL_7             0

/**
 * Signal RdrObjDy_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Eh_RdrObjDy_RL_7               0

/**
 * Signal RdrObjDy_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Eh_RdrObjDy_RL_7               2046

/**
 * Signal RdrObjDy_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Eh_RdrObjDy_RL_7               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjChks2_RL_7 Signal RdrObjChks2_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjChks2_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjChks2_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjChks2_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjChks2_RL_7            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjChks2_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjChks2_RL_7          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjChks2_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjChks2_RL_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjChks2_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjChks2_RL_7(buf, 0)

/**
 * Signal RdrObjChks2_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjChks2_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjChks2_RL_7          0

/**
 * Signal RdrObjChks2_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjChks2_RL_7            0

/**
 * Signal RdrObjChks2_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjChks2_RL_7            255

/**
 * Signal RdrObjChks2_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjChks2_RL_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjDx_RL_7 Signal RdrObjDx_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjDx_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjDx_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjDx_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjDx_RL_7               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjDx_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjDx_RL_7             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjDx_RL_7(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjDx_RL_7(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjDx_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjDx_RL_7(buf, 0)

/**
 * Signal RdrObjDx_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjDx_RL_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjDx_RL_7             0

/**
 * Signal RdrObjDx_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjDx_RL_7               0

/**
 * Signal RdrObjDx_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjDx_RL_7               2540

/**
 * Signal RdrObjDx_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjDx_RL_7               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjTiAlv_RL_7 Signal RdrObjTiAlv_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjTiAlv_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjTiAlv_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjTiAlv_RL_7            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjTiAlv_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjTiAlv_RL_7          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjTiAlv_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjTiAlv_RL_7(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjTiAlv_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjTiAlv_RL_7(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjTiAlv_RL_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjTiAlv_RL_7          0

/**
 * Signal RdrObjTiAlv_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjTiAlv_RL_7            0

/**
 * Signal RdrObjTiAlv_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjTiAlv_RL_7            127

/**
 * Signal RdrObjTiAlv_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjTiAlv_RL_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjVy_RL_7 Signal RdrObjVy_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjVy_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjVy_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjVy_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjVy_RL_7               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjVy_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjVy_RL_7             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjVy_RL_7(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjVy_RL_7(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjVy_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjVy_RL_7(buf, 0)

/**
 * Signal RdrObjVy_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjVy_RL_7(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjVy_RL_7             0

/**
 * Signal RdrObjVy_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjVy_RL_7               0

/**
 * Signal RdrObjVy_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjVy_RL_7               1023

/**
 * Signal RdrObjVy_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjVy_RL_7               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjVx_RL_7 Signal RdrObjVx_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjVx_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjVx_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjVx_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjVx_RL_7               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjVx_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjVx_RL_7             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjVx_RL_7(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjVx_RL_7(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjVx_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjVx_RL_7(buf, 0)

/**
 * Signal RdrObjVx_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjVx_RL_7(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjVx_RL_7             0

/**
 * Signal RdrObjVx_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjVx_RL_7               0

/**
 * Signal RdrObjVx_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjVx_RL_7               1023

/**
 * Signal RdrObjVx_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjVx_RL_7               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjWth_RL_7 Signal RdrObjWth_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjWth_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjWth_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjWth_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjWth_RL_7              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjWth_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjWth_RL_7            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjWth_RL_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjWth_RL_7(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjWth_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjWth_RL_7(buf, 0)

/**
 * Signal RdrObjWth_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjWth_RL_7(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjWth_RL_7            0

/**
 * Signal RdrObjWth_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjWth_RL_7              0

/**
 * Signal RdrObjWth_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjWth_RL_7              50

/**
 * Signal RdrObjWth_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjWth_RL_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_59Fh_RdrObjHeading_RL_7 Signal RdrObjHeading_RL_7 of Message SRR_RL_59Fh (0x59f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_59Fh
 * @{
 */

/**
 * Signal RdrObjHeading_RL_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_59Fh_RdrObjHeading_RL_7 and \ref GET_SRR_RL_59Fh_RdrObjHeading_RL_7 instead.
 */
#define SIG_SRR_RL_59Fh_RdrObjHeading_RL_7          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_59Fh_RdrObjHeading_RL_7 or \ref INIT_SRR_RL_59Fh instead.
 */
#define SETUP_SRR_RL_59Fh_RdrObjHeading_RL_7        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_59Fh_RdrObjHeading_RL_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_59Fh_RdrObjHeading_RL_7(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_59Fh_RdrObjHeading_RL_7(buf) \
	SET_SRR_RL_59Fh_RdrObjHeading_RL_7(buf, 0)

/**
 * Signal RdrObjHeading_RL_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_59Fh_RdrObjHeading_RL_7(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_7 raw initial value.
 */
#define START_SRR_RL_59Fh_RdrObjHeading_RL_7        0

/**
 * Signal RdrObjHeading_RL_7 raw minimum value.
 */
#define MIN_SRR_RL_59Fh_RdrObjHeading_RL_7          0

/**
 * Signal RdrObjHeading_RL_7 raw maximum value.
 */
#define MAX_SRR_RL_59Fh_RdrObjHeading_RL_7          360

/**
 * Signal RdrObjHeading_RL_7 raw offset value.
 */
#define OFF_SRR_RL_59Fh_RdrObjHeading_RL_7          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjChks_RL_8 Signal RdrObjChks_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjChks_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjChks_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjChks_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjChks_RL_8             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjChks_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjChks_RL_8           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjChks_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjChks_RL_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjChks_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjChks_RL_8(buf, 0)

/**
 * Signal RdrObjChks_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjChks_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjChks_RL_8           0

/**
 * Signal RdrObjChks_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjChks_RL_8             0

/**
 * Signal RdrObjChks_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjChks_RL_8             255

/**
 * Signal RdrObjChks_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjChks_RL_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjCntr_RL_8 Signal RdrObjCntr_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjCntr_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjCntr_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjCntr_RL_8             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjCntr_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjCntr_RL_8           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjCntr_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjCntr_RL_8(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjCntr_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjCntr_RL_8(buf, 0)

/**
 * Signal RdrObjCntr_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjCntr_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjCntr_RL_8           0

/**
 * Signal RdrObjCntr_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjCntr_RL_8             0

/**
 * Signal RdrObjCntr_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjCntr_RL_8             15

/**
 * Signal RdrObjCntr_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjCntr_RL_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjAy_RL_8 Signal RdrObjAy_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjAy_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjAy_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjAy_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjAy_RL_8               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjAy_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjAy_RL_8             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjAy_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjAy_RL_8(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjAy_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjAy_RL_8(buf, 0)

/**
 * Signal RdrObjAy_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjAy_RL_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjAy_RL_8             0

/**
 * Signal RdrObjAy_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjAy_RL_8               0

/**
 * Signal RdrObjAy_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjAy_RL_8               128

/**
 * Signal RdrObjAy_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjAy_RL_8               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjAx_RL_8 Signal RdrObjAx_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjAx_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjAx_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjAx_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjAx_RL_8               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjAx_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjAx_RL_8             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjAx_RL_8(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjAx_RL_8(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjAx_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjAx_RL_8(buf, 0)

/**
 * Signal RdrObjAx_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjAx_RL_8(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjAx_RL_8             0

/**
 * Signal RdrObjAx_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjAx_RL_8               0

/**
 * Signal RdrObjAx_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjAx_RL_8               512

/**
 * Signal RdrObjAx_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjAx_RL_8               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjCoast_RL_8 Signal RdrObjCoast_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjCoast_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjCoast_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjCoast_RL_8            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjCoast_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjCoast_RL_8          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjCoast_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjCoast_RL_8(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjCoast_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjCoast_RL_8(buf, 0)

/**
 * Signal RdrObjCoast_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjCoast_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjCoast_RL_8          0

/**
 * Signal RdrObjCoast_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjCoast_RL_8            0

/**
 * Signal RdrObjCoast_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjCoast_RL_8            1

/**
 * Signal RdrObjCoast_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjCoast_RL_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjConf_RL_8 Signal RdrObjConf_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjConf_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjConf_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjConf_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjConf_RL_8             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjConf_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjConf_RL_8           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjConf_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjConf_RL_8(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjConf_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjConf_RL_8(buf, 0)

/**
 * Signal RdrObjConf_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjConf_RL_8(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjConf_RL_8           0

/**
 * Signal RdrObjConf_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjConf_RL_8             0

/**
 * Signal RdrObjConf_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjConf_RL_8             14

/**
 * Signal RdrObjConf_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjConf_RL_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjMtnPat_RL_8 Signal RdrObjMtnPat_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjMtnPat_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjMtnPat_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjMtnPat_RL_8           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjMtnPat_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjMtnPat_RL_8         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjMtnPat_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjMtnPat_RL_8(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjMtnPat_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjMtnPat_RL_8(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjMtnPat_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjMtnPat_RL_8         0

/**
 * Signal RdrObjMtnPat_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjMtnPat_RL_8           0

/**
 * Signal RdrObjMtnPat_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjMtnPat_RL_8           3

/**
 * Signal RdrObjMtnPat_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjMtnPat_RL_8           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjID_RL_8 Signal RdrObjID_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjID_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjID_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjID_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjID_RL_8               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjID_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjID_RL_8             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjID_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjID_RL_8(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjID_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjID_RL_8(buf, 0)

/**
 * Signal RdrObjID_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjID_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjID_RL_8             0

/**
 * Signal RdrObjID_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjID_RL_8               0

/**
 * Signal RdrObjID_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjID_RL_8               255

/**
 * Signal RdrObjID_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjID_RL_8               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjTyp_RL_8 Signal RdrObjTyp_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjTyp_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjTyp_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjTyp_RL_8              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjTyp_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjTyp_RL_8            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjTyp_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjTyp_RL_8(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjTyp_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjTyp_RL_8(buf, 0)

/**
 * Signal RdrObjTyp_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjTyp_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjTyp_RL_8            0

/**
 * Signal RdrObjTyp_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjTyp_RL_8              0

/**
 * Signal RdrObjTyp_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjTyp_RL_8              3

/**
 * Signal RdrObjTyp_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjTyp_RL_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A0h_RdrObjDy_RL_8 Signal RdrObjDy_RL_8 of Message SRR_RL_5A0h (0x5a0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A0h
 * @{
 */

/**
 * Signal RdrObjDy_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A0h_RdrObjDy_RL_8 and \ref GET_SRR_RL_5A0h_RdrObjDy_RL_8 instead.
 */
#define SIG_SRR_RL_5A0h_RdrObjDy_RL_8               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A0h_RdrObjDy_RL_8 or \ref INIT_SRR_RL_5A0h instead.
 */
#define SETUP_SRR_RL_5A0h_RdrObjDy_RL_8             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A0h_RdrObjDy_RL_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A0h_RdrObjDy_RL_8(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A0h_RdrObjDy_RL_8(buf) \
	SET_SRR_RL_5A0h_RdrObjDy_RL_8(buf, 0)

/**
 * Signal RdrObjDy_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A0h_RdrObjDy_RL_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_8 raw initial value.
 */
#define START_SRR_RL_5A0h_RdrObjDy_RL_8             0

/**
 * Signal RdrObjDy_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A0h_RdrObjDy_RL_8               0

/**
 * Signal RdrObjDy_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A0h_RdrObjDy_RL_8               2046

/**
 * Signal RdrObjDy_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A0h_RdrObjDy_RL_8               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjChks2_RL_8 Signal RdrObjChks2_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjChks2_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjChks2_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjChks2_RL_8            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjChks2_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjChks2_RL_8          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjChks2_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjChks2_RL_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjChks2_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjChks2_RL_8(buf, 0)

/**
 * Signal RdrObjChks2_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjChks2_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjChks2_RL_8          0

/**
 * Signal RdrObjChks2_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjChks2_RL_8            0

/**
 * Signal RdrObjChks2_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjChks2_RL_8            255

/**
 * Signal RdrObjChks2_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjChks2_RL_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjDx_RL_8 Signal RdrObjDx_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjDx_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjDx_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjDx_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjDx_RL_8               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjDx_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjDx_RL_8             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjDx_RL_8(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjDx_RL_8(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjDx_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjDx_RL_8(buf, 0)

/**
 * Signal RdrObjDx_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjDx_RL_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjDx_RL_8             0

/**
 * Signal RdrObjDx_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjDx_RL_8               0

/**
 * Signal RdrObjDx_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjDx_RL_8               2540

/**
 * Signal RdrObjDx_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjDx_RL_8               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjTiAlv_RL_8 Signal RdrObjTiAlv_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjTiAlv_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjTiAlv_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjTiAlv_RL_8            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjTiAlv_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjTiAlv_RL_8          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjTiAlv_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjTiAlv_RL_8(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjTiAlv_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjTiAlv_RL_8(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjTiAlv_RL_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjTiAlv_RL_8          0

/**
 * Signal RdrObjTiAlv_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjTiAlv_RL_8            0

/**
 * Signal RdrObjTiAlv_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjTiAlv_RL_8            127

/**
 * Signal RdrObjTiAlv_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjTiAlv_RL_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjVy_RL_8 Signal RdrObjVy_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjVy_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjVy_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjVy_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjVy_RL_8               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjVy_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjVy_RL_8             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjVy_RL_8(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjVy_RL_8(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjVy_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjVy_RL_8(buf, 0)

/**
 * Signal RdrObjVy_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjVy_RL_8(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjVy_RL_8             0

/**
 * Signal RdrObjVy_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjVy_RL_8               0

/**
 * Signal RdrObjVy_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjVy_RL_8               1023

/**
 * Signal RdrObjVy_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjVy_RL_8               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjVx_RL_8 Signal RdrObjVx_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjVx_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjVx_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjVx_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjVx_RL_8               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjVx_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjVx_RL_8             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjVx_RL_8(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjVx_RL_8(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjVx_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjVx_RL_8(buf, 0)

/**
 * Signal RdrObjVx_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjVx_RL_8(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjVx_RL_8             0

/**
 * Signal RdrObjVx_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjVx_RL_8               0

/**
 * Signal RdrObjVx_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjVx_RL_8               1023

/**
 * Signal RdrObjVx_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjVx_RL_8               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjWth_RL_8 Signal RdrObjWth_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjWth_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjWth_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjWth_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjWth_RL_8              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjWth_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjWth_RL_8            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjWth_RL_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjWth_RL_8(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjWth_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjWth_RL_8(buf, 0)

/**
 * Signal RdrObjWth_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjWth_RL_8(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjWth_RL_8            0

/**
 * Signal RdrObjWth_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjWth_RL_8              0

/**
 * Signal RdrObjWth_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjWth_RL_8              50

/**
 * Signal RdrObjWth_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjWth_RL_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A1h_RdrObjHeading_RL_8 Signal RdrObjHeading_RL_8 of Message SRR_RL_5A1h (0x5a1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A1h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A1h_RdrObjHeading_RL_8 and \ref GET_SRR_RL_5A1h_RdrObjHeading_RL_8 instead.
 */
#define SIG_SRR_RL_5A1h_RdrObjHeading_RL_8          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A1h_RdrObjHeading_RL_8 or \ref INIT_SRR_RL_5A1h instead.
 */
#define SETUP_SRR_RL_5A1h_RdrObjHeading_RL_8        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A1h_RdrObjHeading_RL_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A1h_RdrObjHeading_RL_8(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A1h_RdrObjHeading_RL_8(buf) \
	SET_SRR_RL_5A1h_RdrObjHeading_RL_8(buf, 0)

/**
 * Signal RdrObjHeading_RL_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A1h_RdrObjHeading_RL_8(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_8 raw initial value.
 */
#define START_SRR_RL_5A1h_RdrObjHeading_RL_8        0

/**
 * Signal RdrObjHeading_RL_8 raw minimum value.
 */
#define MIN_SRR_RL_5A1h_RdrObjHeading_RL_8          0

/**
 * Signal RdrObjHeading_RL_8 raw maximum value.
 */
#define MAX_SRR_RL_5A1h_RdrObjHeading_RL_8          360

/**
 * Signal RdrObjHeading_RL_8 raw offset value.
 */
#define OFF_SRR_RL_5A1h_RdrObjHeading_RL_8          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjChks_RL_9 Signal RdrObjChks_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjChks_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjChks_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjChks_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjChks_RL_9             1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjChks_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjChks_RL_9           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjChks_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjChks_RL_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjChks_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjChks_RL_9(buf, 0)

/**
 * Signal RdrObjChks_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjChks_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjChks_RL_9           0

/**
 * Signal RdrObjChks_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjChks_RL_9             0

/**
 * Signal RdrObjChks_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjChks_RL_9             255

/**
 * Signal RdrObjChks_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjChks_RL_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjCntr_RL_9 Signal RdrObjCntr_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjCntr_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjCntr_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjCntr_RL_9             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjCntr_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjCntr_RL_9           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjCntr_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjCntr_RL_9(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjCntr_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjCntr_RL_9(buf, 0)

/**
 * Signal RdrObjCntr_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjCntr_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjCntr_RL_9           0

/**
 * Signal RdrObjCntr_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjCntr_RL_9             0

/**
 * Signal RdrObjCntr_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjCntr_RL_9             15

/**
 * Signal RdrObjCntr_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjCntr_RL_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjAy_RL_9 Signal RdrObjAy_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjAy_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjAy_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjAy_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjAy_RL_9               1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjAy_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjAy_RL_9             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjAy_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjAy_RL_9(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjAy_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjAy_RL_9(buf, 0)

/**
 * Signal RdrObjAy_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjAy_RL_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjAy_RL_9             0

/**
 * Signal RdrObjAy_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjAy_RL_9               0

/**
 * Signal RdrObjAy_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjAy_RL_9               128

/**
 * Signal RdrObjAy_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjAy_RL_9               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjAx_RL_9 Signal RdrObjAx_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjAx_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjAx_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjAx_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjAx_RL_9               1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjAx_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjAx_RL_9             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjAx_RL_9(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjAx_RL_9(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjAx_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjAx_RL_9(buf, 0)

/**
 * Signal RdrObjAx_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjAx_RL_9(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjAx_RL_9             0

/**
 * Signal RdrObjAx_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjAx_RL_9               0

/**
 * Signal RdrObjAx_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjAx_RL_9               512

/**
 * Signal RdrObjAx_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjAx_RL_9               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjCoast_RL_9 Signal RdrObjCoast_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjCoast_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjCoast_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjCoast_RL_9            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjCoast_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjCoast_RL_9          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjCoast_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjCoast_RL_9(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjCoast_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjCoast_RL_9(buf, 0)

/**
 * Signal RdrObjCoast_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjCoast_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjCoast_RL_9          0

/**
 * Signal RdrObjCoast_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjCoast_RL_9            0

/**
 * Signal RdrObjCoast_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjCoast_RL_9            1

/**
 * Signal RdrObjCoast_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjCoast_RL_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjConf_RL_9 Signal RdrObjConf_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjConf_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjConf_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjConf_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjConf_RL_9             1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjConf_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjConf_RL_9           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjConf_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjConf_RL_9(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjConf_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjConf_RL_9(buf, 0)

/**
 * Signal RdrObjConf_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjConf_RL_9(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjConf_RL_9           0

/**
 * Signal RdrObjConf_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjConf_RL_9             0

/**
 * Signal RdrObjConf_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjConf_RL_9             14

/**
 * Signal RdrObjConf_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjConf_RL_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjMtnPat_RL_9 Signal RdrObjMtnPat_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjMtnPat_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjMtnPat_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjMtnPat_RL_9           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjMtnPat_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjMtnPat_RL_9         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjMtnPat_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjMtnPat_RL_9(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjMtnPat_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjMtnPat_RL_9(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjMtnPat_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjMtnPat_RL_9         0

/**
 * Signal RdrObjMtnPat_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjMtnPat_RL_9           0

/**
 * Signal RdrObjMtnPat_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjMtnPat_RL_9           3

/**
 * Signal RdrObjMtnPat_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjMtnPat_RL_9           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjID_RL_9 Signal RdrObjID_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjID_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjID_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjID_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjID_RL_9               1, 0, 47, 7

/**
 * Signal RdrObjID_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjID_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjID_RL_9             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjID_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjID_RL_9(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjID_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjID_RL_9(buf, 0)

/**
 * Signal RdrObjID_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjID_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjID_RL_9             0

/**
 * Signal RdrObjID_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjID_RL_9               0

/**
 * Signal RdrObjID_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjID_RL_9               255

/**
 * Signal RdrObjID_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjID_RL_9               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjTyp_RL_9 Signal RdrObjTyp_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjTyp_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjTyp_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjTyp_RL_9              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjTyp_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjTyp_RL_9            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjTyp_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjTyp_RL_9(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjTyp_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjTyp_RL_9(buf, 0)

/**
 * Signal RdrObjTyp_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjTyp_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjTyp_RL_9            0

/**
 * Signal RdrObjTyp_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjTyp_RL_9              0

/**
 * Signal RdrObjTyp_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjTyp_RL_9              3

/**
 * Signal RdrObjTyp_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjTyp_RL_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A2h_RdrObjDy_RL_9 Signal RdrObjDy_RL_9 of Message SRR_RL_5A2h (0x5a2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A2h
 * @{
 */

/**
 * Signal RdrObjDy_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A2h_RdrObjDy_RL_9 and \ref GET_SRR_RL_5A2h_RdrObjDy_RL_9 instead.
 */
#define SIG_SRR_RL_5A2h_RdrObjDy_RL_9               1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A2h_RdrObjDy_RL_9 or \ref INIT_SRR_RL_5A2h instead.
 */
#define SETUP_SRR_RL_5A2h_RdrObjDy_RL_9             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A2h_RdrObjDy_RL_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A2h_RdrObjDy_RL_9(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A2h_RdrObjDy_RL_9(buf) \
	SET_SRR_RL_5A2h_RdrObjDy_RL_9(buf, 0)

/**
 * Signal RdrObjDy_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A2h_RdrObjDy_RL_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_9 raw initial value.
 */
#define START_SRR_RL_5A2h_RdrObjDy_RL_9             0

/**
 * Signal RdrObjDy_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A2h_RdrObjDy_RL_9               0

/**
 * Signal RdrObjDy_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A2h_RdrObjDy_RL_9               2046

/**
 * Signal RdrObjDy_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A2h_RdrObjDy_RL_9               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjChks2_RL_9 Signal RdrObjChks2_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjChks2_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjChks2_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjChks2_RL_9            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjChks2_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjChks2_RL_9          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjChks2_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjChks2_RL_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjChks2_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjChks2_RL_9(buf, 0)

/**
 * Signal RdrObjChks2_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjChks2_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjChks2_RL_9          0

/**
 * Signal RdrObjChks2_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjChks2_RL_9            0

/**
 * Signal RdrObjChks2_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjChks2_RL_9            255

/**
 * Signal RdrObjChks2_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjChks2_RL_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjDx_RL_9 Signal RdrObjDx_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjDx_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjDx_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjDx_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjDx_RL_9               1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjDx_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjDx_RL_9             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjDx_RL_9(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjDx_RL_9(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjDx_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjDx_RL_9(buf, 0)

/**
 * Signal RdrObjDx_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjDx_RL_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjDx_RL_9             0

/**
 * Signal RdrObjDx_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjDx_RL_9               0

/**
 * Signal RdrObjDx_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjDx_RL_9               2540

/**
 * Signal RdrObjDx_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjDx_RL_9               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjTiAlv_RL_9 Signal RdrObjTiAlv_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjTiAlv_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjTiAlv_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjTiAlv_RL_9            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjTiAlv_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjTiAlv_RL_9          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjTiAlv_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjTiAlv_RL_9(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjTiAlv_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjTiAlv_RL_9(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjTiAlv_RL_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjTiAlv_RL_9          0

/**
 * Signal RdrObjTiAlv_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjTiAlv_RL_9            0

/**
 * Signal RdrObjTiAlv_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjTiAlv_RL_9            127

/**
 * Signal RdrObjTiAlv_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjTiAlv_RL_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjVy_RL_9 Signal RdrObjVy_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjVy_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjVy_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjVy_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjVy_RL_9               1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjVy_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjVy_RL_9             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjVy_RL_9(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjVy_RL_9(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjVy_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjVy_RL_9(buf, 0)

/**
 * Signal RdrObjVy_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjVy_RL_9(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjVy_RL_9             0

/**
 * Signal RdrObjVy_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjVy_RL_9               0

/**
 * Signal RdrObjVy_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjVy_RL_9               1023

/**
 * Signal RdrObjVy_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjVy_RL_9               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjVx_RL_9 Signal RdrObjVx_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjVx_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjVx_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjVx_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjVx_RL_9               1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjVx_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjVx_RL_9             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjVx_RL_9(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjVx_RL_9(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjVx_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjVx_RL_9(buf, 0)

/**
 * Signal RdrObjVx_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjVx_RL_9(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjVx_RL_9             0

/**
 * Signal RdrObjVx_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjVx_RL_9               0

/**
 * Signal RdrObjVx_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjVx_RL_9               1023

/**
 * Signal RdrObjVx_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjVx_RL_9               -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjWth_RL_9 Signal RdrObjWth_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjWth_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjWth_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjWth_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjWth_RL_9              1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjWth_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjWth_RL_9            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjWth_RL_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjWth_RL_9(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjWth_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjWth_RL_9(buf, 0)

/**
 * Signal RdrObjWth_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjWth_RL_9(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjWth_RL_9            0

/**
 * Signal RdrObjWth_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjWth_RL_9              0

/**
 * Signal RdrObjWth_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjWth_RL_9              50

/**
 * Signal RdrObjWth_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjWth_RL_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A3h_RdrObjHeading_RL_9 Signal RdrObjHeading_RL_9 of Message SRR_RL_5A3h (0x5a3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A3h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A3h_RdrObjHeading_RL_9 and \ref GET_SRR_RL_5A3h_RdrObjHeading_RL_9 instead.
 */
#define SIG_SRR_RL_5A3h_RdrObjHeading_RL_9          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A3h_RdrObjHeading_RL_9 or \ref INIT_SRR_RL_5A3h instead.
 */
#define SETUP_SRR_RL_5A3h_RdrObjHeading_RL_9        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A3h_RdrObjHeading_RL_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A3h_RdrObjHeading_RL_9(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A3h_RdrObjHeading_RL_9(buf) \
	SET_SRR_RL_5A3h_RdrObjHeading_RL_9(buf, 0)

/**
 * Signal RdrObjHeading_RL_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A3h_RdrObjHeading_RL_9(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_9 raw initial value.
 */
#define START_SRR_RL_5A3h_RdrObjHeading_RL_9        0

/**
 * Signal RdrObjHeading_RL_9 raw minimum value.
 */
#define MIN_SRR_RL_5A3h_RdrObjHeading_RL_9          0

/**
 * Signal RdrObjHeading_RL_9 raw maximum value.
 */
#define MAX_SRR_RL_5A3h_RdrObjHeading_RL_9          360

/**
 * Signal RdrObjHeading_RL_9 raw offset value.
 */
#define OFF_SRR_RL_5A3h_RdrObjHeading_RL_9          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjChks_RL_10 Signal RdrObjChks_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjChks_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjChks_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjChks_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjChks_RL_10            1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjChks_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjChks_RL_10          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjChks_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjChks_RL_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjChks_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjChks_RL_10(buf, 0)

/**
 * Signal RdrObjChks_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjChks_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjChks_RL_10          0

/**
 * Signal RdrObjChks_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjChks_RL_10            0

/**
 * Signal RdrObjChks_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjChks_RL_10            255

/**
 * Signal RdrObjChks_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjChks_RL_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjCntr_RL_10 Signal RdrObjCntr_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjCntr_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjCntr_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjCntr_RL_10            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjCntr_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjCntr_RL_10          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjCntr_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjCntr_RL_10(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjCntr_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjCntr_RL_10(buf, 0)

/**
 * Signal RdrObjCntr_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjCntr_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjCntr_RL_10          0

/**
 * Signal RdrObjCntr_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjCntr_RL_10            0

/**
 * Signal RdrObjCntr_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjCntr_RL_10            15

/**
 * Signal RdrObjCntr_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjCntr_RL_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjAy_RL_10 Signal RdrObjAy_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjAy_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjAy_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjAy_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjAy_RL_10              1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjAy_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjAy_RL_10            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjAy_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjAy_RL_10(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjAy_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjAy_RL_10(buf, 0)

/**
 * Signal RdrObjAy_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjAy_RL_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjAy_RL_10            0

/**
 * Signal RdrObjAy_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjAy_RL_10              0

/**
 * Signal RdrObjAy_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjAy_RL_10              128

/**
 * Signal RdrObjAy_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjAy_RL_10              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjAx_RL_10 Signal RdrObjAx_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjAx_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjAx_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjAx_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjAx_RL_10              1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjAx_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjAx_RL_10            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjAx_RL_10(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjAx_RL_10(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjAx_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjAx_RL_10(buf, 0)

/**
 * Signal RdrObjAx_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjAx_RL_10(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjAx_RL_10            0

/**
 * Signal RdrObjAx_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjAx_RL_10              0

/**
 * Signal RdrObjAx_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjAx_RL_10              512

/**
 * Signal RdrObjAx_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjAx_RL_10              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjCoast_RL_10 Signal RdrObjCoast_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjCoast_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjCoast_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjCoast_RL_10           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjCoast_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjCoast_RL_10         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjCoast_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjCoast_RL_10(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjCoast_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjCoast_RL_10(buf, 0)

/**
 * Signal RdrObjCoast_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjCoast_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjCoast_RL_10         0

/**
 * Signal RdrObjCoast_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjCoast_RL_10           0

/**
 * Signal RdrObjCoast_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjCoast_RL_10           1

/**
 * Signal RdrObjCoast_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjCoast_RL_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjConf_RL_10 Signal RdrObjConf_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjConf_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjConf_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjConf_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjConf_RL_10            1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjConf_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjConf_RL_10          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjConf_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjConf_RL_10(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjConf_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjConf_RL_10(buf, 0)

/**
 * Signal RdrObjConf_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjConf_RL_10(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjConf_RL_10          0

/**
 * Signal RdrObjConf_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjConf_RL_10            0

/**
 * Signal RdrObjConf_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjConf_RL_10            14

/**
 * Signal RdrObjConf_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjConf_RL_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjMtnPat_RL_10 Signal RdrObjMtnPat_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjMtnPat_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjMtnPat_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjMtnPat_RL_10          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjMtnPat_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjMtnPat_RL_10        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjMtnPat_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjMtnPat_RL_10(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjMtnPat_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjMtnPat_RL_10(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjMtnPat_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjMtnPat_RL_10        0

/**
 * Signal RdrObjMtnPat_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjMtnPat_RL_10          0

/**
 * Signal RdrObjMtnPat_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjMtnPat_RL_10          3

/**
 * Signal RdrObjMtnPat_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjMtnPat_RL_10          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjID_RL_10 Signal RdrObjID_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjID_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjID_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjID_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjID_RL_10              1, 0, 47, 7

/**
 * Signal RdrObjID_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjID_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjID_RL_10            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjID_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjID_RL_10(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjID_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjID_RL_10(buf, 0)

/**
 * Signal RdrObjID_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjID_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjID_RL_10            0

/**
 * Signal RdrObjID_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjID_RL_10              0

/**
 * Signal RdrObjID_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjID_RL_10              255

/**
 * Signal RdrObjID_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjID_RL_10              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjTyp_RL_10 Signal RdrObjTyp_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjTyp_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjTyp_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjTyp_RL_10             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjTyp_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjTyp_RL_10           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjTyp_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjTyp_RL_10(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjTyp_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjTyp_RL_10(buf, 0)

/**
 * Signal RdrObjTyp_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjTyp_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjTyp_RL_10           0

/**
 * Signal RdrObjTyp_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjTyp_RL_10             0

/**
 * Signal RdrObjTyp_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjTyp_RL_10             3

/**
 * Signal RdrObjTyp_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjTyp_RL_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A4h_RdrObjDy_RL_10 Signal RdrObjDy_RL_10 of Message SRR_RL_5A4h (0x5a4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A4h
 * @{
 */

/**
 * Signal RdrObjDy_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A4h_RdrObjDy_RL_10 and \ref GET_SRR_RL_5A4h_RdrObjDy_RL_10 instead.
 */
#define SIG_SRR_RL_5A4h_RdrObjDy_RL_10              1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A4h_RdrObjDy_RL_10 or \ref INIT_SRR_RL_5A4h instead.
 */
#define SETUP_SRR_RL_5A4h_RdrObjDy_RL_10            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A4h_RdrObjDy_RL_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A4h_RdrObjDy_RL_10(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A4h_RdrObjDy_RL_10(buf) \
	SET_SRR_RL_5A4h_RdrObjDy_RL_10(buf, 0)

/**
 * Signal RdrObjDy_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A4h_RdrObjDy_RL_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_10 raw initial value.
 */
#define START_SRR_RL_5A4h_RdrObjDy_RL_10            0

/**
 * Signal RdrObjDy_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A4h_RdrObjDy_RL_10              0

/**
 * Signal RdrObjDy_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A4h_RdrObjDy_RL_10              2046

/**
 * Signal RdrObjDy_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A4h_RdrObjDy_RL_10              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjChks2_RL_10 Signal RdrObjChks2_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjChks2_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjChks2_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjChks2_RL_10           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjChks2_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjChks2_RL_10         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjChks2_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjChks2_RL_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjChks2_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjChks2_RL_10(buf, 0)

/**
 * Signal RdrObjChks2_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjChks2_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjChks2_RL_10         0

/**
 * Signal RdrObjChks2_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjChks2_RL_10           0

/**
 * Signal RdrObjChks2_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjChks2_RL_10           255

/**
 * Signal RdrObjChks2_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjChks2_RL_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjDx_RL_10 Signal RdrObjDx_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjDx_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjDx_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjDx_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjDx_RL_10              1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjDx_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjDx_RL_10            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjDx_RL_10(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjDx_RL_10(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjDx_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjDx_RL_10(buf, 0)

/**
 * Signal RdrObjDx_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjDx_RL_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjDx_RL_10            0

/**
 * Signal RdrObjDx_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjDx_RL_10              0

/**
 * Signal RdrObjDx_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjDx_RL_10              2540

/**
 * Signal RdrObjDx_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjDx_RL_10              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjTiAlv_RL_10 Signal RdrObjTiAlv_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjTiAlv_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjTiAlv_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjTiAlv_RL_10           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjTiAlv_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjTiAlv_RL_10         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjTiAlv_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjTiAlv_RL_10(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjTiAlv_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjTiAlv_RL_10(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjTiAlv_RL_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjTiAlv_RL_10         0

/**
 * Signal RdrObjTiAlv_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjTiAlv_RL_10           0

/**
 * Signal RdrObjTiAlv_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjTiAlv_RL_10           127

/**
 * Signal RdrObjTiAlv_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjTiAlv_RL_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjVy_RL_10 Signal RdrObjVy_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjVy_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjVy_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjVy_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjVy_RL_10              1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjVy_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjVy_RL_10            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjVy_RL_10(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjVy_RL_10(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjVy_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjVy_RL_10(buf, 0)

/**
 * Signal RdrObjVy_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjVy_RL_10(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjVy_RL_10            0

/**
 * Signal RdrObjVy_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjVy_RL_10              0

/**
 * Signal RdrObjVy_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjVy_RL_10              1023

/**
 * Signal RdrObjVy_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjVy_RL_10              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjVx_RL_10 Signal RdrObjVx_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjVx_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjVx_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjVx_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjVx_RL_10              1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjVx_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjVx_RL_10            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjVx_RL_10(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjVx_RL_10(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjVx_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjVx_RL_10(buf, 0)

/**
 * Signal RdrObjVx_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjVx_RL_10(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjVx_RL_10            0

/**
 * Signal RdrObjVx_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjVx_RL_10              0

/**
 * Signal RdrObjVx_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjVx_RL_10              1023

/**
 * Signal RdrObjVx_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjVx_RL_10              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjWth_RL_10 Signal RdrObjWth_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjWth_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjWth_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjWth_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjWth_RL_10             1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjWth_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjWth_RL_10           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjWth_RL_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjWth_RL_10(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjWth_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjWth_RL_10(buf, 0)

/**
 * Signal RdrObjWth_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjWth_RL_10(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjWth_RL_10           0

/**
 * Signal RdrObjWth_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjWth_RL_10             0

/**
 * Signal RdrObjWth_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjWth_RL_10             50

/**
 * Signal RdrObjWth_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjWth_RL_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A5h_RdrObjHeading_RL_10 Signal RdrObjHeading_RL_10 of Message SRR_RL_5A5h (0x5a5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A5h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A5h_RdrObjHeading_RL_10 and \ref GET_SRR_RL_5A5h_RdrObjHeading_RL_10 instead.
 */
#define SIG_SRR_RL_5A5h_RdrObjHeading_RL_10         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A5h_RdrObjHeading_RL_10 or \ref INIT_SRR_RL_5A5h instead.
 */
#define SETUP_SRR_RL_5A5h_RdrObjHeading_RL_10       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A5h_RdrObjHeading_RL_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A5h_RdrObjHeading_RL_10(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A5h_RdrObjHeading_RL_10(buf) \
	SET_SRR_RL_5A5h_RdrObjHeading_RL_10(buf, 0)

/**
 * Signal RdrObjHeading_RL_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A5h_RdrObjHeading_RL_10(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_10 raw initial value.
 */
#define START_SRR_RL_5A5h_RdrObjHeading_RL_10       0

/**
 * Signal RdrObjHeading_RL_10 raw minimum value.
 */
#define MIN_SRR_RL_5A5h_RdrObjHeading_RL_10         0

/**
 * Signal RdrObjHeading_RL_10 raw maximum value.
 */
#define MAX_SRR_RL_5A5h_RdrObjHeading_RL_10         360

/**
 * Signal RdrObjHeading_RL_10 raw offset value.
 */
#define OFF_SRR_RL_5A5h_RdrObjHeading_RL_10         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjChks_RL_11 Signal RdrObjChks_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjChks_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjChks_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjChks_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjChks_RL_11            1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjChks_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjChks_RL_11          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjChks_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjChks_RL_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjChks_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjChks_RL_11(buf, 0)

/**
 * Signal RdrObjChks_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjChks_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjChks_RL_11          0

/**
 * Signal RdrObjChks_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjChks_RL_11            0

/**
 * Signal RdrObjChks_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjChks_RL_11            255

/**
 * Signal RdrObjChks_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjChks_RL_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjCntr_RL_11 Signal RdrObjCntr_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjCntr_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjCntr_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjCntr_RL_11            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjCntr_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjCntr_RL_11          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjCntr_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjCntr_RL_11(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjCntr_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjCntr_RL_11(buf, 0)

/**
 * Signal RdrObjCntr_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjCntr_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjCntr_RL_11          0

/**
 * Signal RdrObjCntr_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjCntr_RL_11            0

/**
 * Signal RdrObjCntr_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjCntr_RL_11            15

/**
 * Signal RdrObjCntr_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjCntr_RL_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjAy_RL_11 Signal RdrObjAy_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjAy_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjAy_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjAy_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjAy_RL_11              1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjAy_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjAy_RL_11            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjAy_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjAy_RL_11(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjAy_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjAy_RL_11(buf, 0)

/**
 * Signal RdrObjAy_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjAy_RL_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjAy_RL_11            0

/**
 * Signal RdrObjAy_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjAy_RL_11              0

/**
 * Signal RdrObjAy_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjAy_RL_11              128

/**
 * Signal RdrObjAy_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjAy_RL_11              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjAx_RL_11 Signal RdrObjAx_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjAx_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjAx_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjAx_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjAx_RL_11              1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjAx_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjAx_RL_11            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjAx_RL_11(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjAx_RL_11(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjAx_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjAx_RL_11(buf, 0)

/**
 * Signal RdrObjAx_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjAx_RL_11(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjAx_RL_11            0

/**
 * Signal RdrObjAx_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjAx_RL_11              0

/**
 * Signal RdrObjAx_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjAx_RL_11              512

/**
 * Signal RdrObjAx_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjAx_RL_11              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjCoast_RL_11 Signal RdrObjCoast_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjCoast_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjCoast_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjCoast_RL_11           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjCoast_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjCoast_RL_11         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjCoast_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjCoast_RL_11(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjCoast_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjCoast_RL_11(buf, 0)

/**
 * Signal RdrObjCoast_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjCoast_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjCoast_RL_11         0

/**
 * Signal RdrObjCoast_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjCoast_RL_11           0

/**
 * Signal RdrObjCoast_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjCoast_RL_11           1

/**
 * Signal RdrObjCoast_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjCoast_RL_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjConf_RL_11 Signal RdrObjConf_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjConf_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjConf_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjConf_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjConf_RL_11            1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjConf_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjConf_RL_11          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjConf_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjConf_RL_11(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjConf_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjConf_RL_11(buf, 0)

/**
 * Signal RdrObjConf_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjConf_RL_11(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjConf_RL_11          0

/**
 * Signal RdrObjConf_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjConf_RL_11            0

/**
 * Signal RdrObjConf_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjConf_RL_11            14

/**
 * Signal RdrObjConf_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjConf_RL_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjMtnPat_RL_11 Signal RdrObjMtnPat_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjMtnPat_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjMtnPat_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjMtnPat_RL_11          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjMtnPat_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjMtnPat_RL_11        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjMtnPat_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjMtnPat_RL_11(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjMtnPat_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjMtnPat_RL_11(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjMtnPat_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjMtnPat_RL_11        0

/**
 * Signal RdrObjMtnPat_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjMtnPat_RL_11          0

/**
 * Signal RdrObjMtnPat_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjMtnPat_RL_11          3

/**
 * Signal RdrObjMtnPat_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjMtnPat_RL_11          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjID_RL_11 Signal RdrObjID_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjID_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjID_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjID_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjID_RL_11              1, 0, 47, 7

/**
 * Signal RdrObjID_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjID_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjID_RL_11            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjID_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjID_RL_11(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjID_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjID_RL_11(buf, 0)

/**
 * Signal RdrObjID_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjID_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjID_RL_11            0

/**
 * Signal RdrObjID_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjID_RL_11              0

/**
 * Signal RdrObjID_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjID_RL_11              255

/**
 * Signal RdrObjID_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjID_RL_11              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjTyp_RL_11 Signal RdrObjTyp_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjTyp_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjTyp_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjTyp_RL_11             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjTyp_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjTyp_RL_11           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjTyp_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjTyp_RL_11(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjTyp_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjTyp_RL_11(buf, 0)

/**
 * Signal RdrObjTyp_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjTyp_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjTyp_RL_11           0

/**
 * Signal RdrObjTyp_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjTyp_RL_11             0

/**
 * Signal RdrObjTyp_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjTyp_RL_11             3

/**
 * Signal RdrObjTyp_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjTyp_RL_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A6h_RdrObjDy_RL_11 Signal RdrObjDy_RL_11 of Message SRR_RL_5A6h (0x5a6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A6h
 * @{
 */

/**
 * Signal RdrObjDy_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A6h_RdrObjDy_RL_11 and \ref GET_SRR_RL_5A6h_RdrObjDy_RL_11 instead.
 */
#define SIG_SRR_RL_5A6h_RdrObjDy_RL_11              1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A6h_RdrObjDy_RL_11 or \ref INIT_SRR_RL_5A6h instead.
 */
#define SETUP_SRR_RL_5A6h_RdrObjDy_RL_11            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A6h_RdrObjDy_RL_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A6h_RdrObjDy_RL_11(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A6h_RdrObjDy_RL_11(buf) \
	SET_SRR_RL_5A6h_RdrObjDy_RL_11(buf, 0)

/**
 * Signal RdrObjDy_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A6h_RdrObjDy_RL_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_11 raw initial value.
 */
#define START_SRR_RL_5A6h_RdrObjDy_RL_11            0

/**
 * Signal RdrObjDy_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A6h_RdrObjDy_RL_11              0

/**
 * Signal RdrObjDy_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A6h_RdrObjDy_RL_11              2046

/**
 * Signal RdrObjDy_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A6h_RdrObjDy_RL_11              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjChks2_RL_11 Signal RdrObjChks2_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjChks2_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjChks2_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjChks2_RL_11           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjChks2_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjChks2_RL_11         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjChks2_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjChks2_RL_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjChks2_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjChks2_RL_11(buf, 0)

/**
 * Signal RdrObjChks2_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjChks2_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjChks2_RL_11         0

/**
 * Signal RdrObjChks2_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjChks2_RL_11           0

/**
 * Signal RdrObjChks2_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjChks2_RL_11           255

/**
 * Signal RdrObjChks2_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjChks2_RL_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjDx_RL_11 Signal RdrObjDx_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjDx_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjDx_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjDx_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjDx_RL_11              1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjDx_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjDx_RL_11            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjDx_RL_11(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjDx_RL_11(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjDx_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjDx_RL_11(buf, 0)

/**
 * Signal RdrObjDx_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjDx_RL_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjDx_RL_11            0

/**
 * Signal RdrObjDx_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjDx_RL_11              0

/**
 * Signal RdrObjDx_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjDx_RL_11              2540

/**
 * Signal RdrObjDx_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjDx_RL_11              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjTiAlv_RL_11 Signal RdrObjTiAlv_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjTiAlv_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjTiAlv_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjTiAlv_RL_11           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjTiAlv_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjTiAlv_RL_11         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjTiAlv_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjTiAlv_RL_11(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjTiAlv_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjTiAlv_RL_11(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjTiAlv_RL_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjTiAlv_RL_11         0

/**
 * Signal RdrObjTiAlv_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjTiAlv_RL_11           0

/**
 * Signal RdrObjTiAlv_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjTiAlv_RL_11           127

/**
 * Signal RdrObjTiAlv_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjTiAlv_RL_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjVy_RL_11 Signal RdrObjVy_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjVy_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjVy_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjVy_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjVy_RL_11              1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjVy_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjVy_RL_11            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjVy_RL_11(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjVy_RL_11(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjVy_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjVy_RL_11(buf, 0)

/**
 * Signal RdrObjVy_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjVy_RL_11(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjVy_RL_11            0

/**
 * Signal RdrObjVy_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjVy_RL_11              0

/**
 * Signal RdrObjVy_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjVy_RL_11              1023

/**
 * Signal RdrObjVy_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjVy_RL_11              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjVx_RL_11 Signal RdrObjVx_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjVx_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjVx_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjVx_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjVx_RL_11              1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjVx_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjVx_RL_11            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjVx_RL_11(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjVx_RL_11(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjVx_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjVx_RL_11(buf, 0)

/**
 * Signal RdrObjVx_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjVx_RL_11(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjVx_RL_11            0

/**
 * Signal RdrObjVx_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjVx_RL_11              0

/**
 * Signal RdrObjVx_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjVx_RL_11              1023

/**
 * Signal RdrObjVx_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjVx_RL_11              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjWth_RL_11 Signal RdrObjWth_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjWth_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjWth_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjWth_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjWth_RL_11             1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjWth_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjWth_RL_11           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjWth_RL_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjWth_RL_11(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjWth_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjWth_RL_11(buf, 0)

/**
 * Signal RdrObjWth_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjWth_RL_11(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjWth_RL_11           0

/**
 * Signal RdrObjWth_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjWth_RL_11             0

/**
 * Signal RdrObjWth_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjWth_RL_11             50

/**
 * Signal RdrObjWth_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjWth_RL_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A7h_RdrObjHeading_RL_11 Signal RdrObjHeading_RL_11 of Message SRR_RL_5A7h (0x5a7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A7h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A7h_RdrObjHeading_RL_11 and \ref GET_SRR_RL_5A7h_RdrObjHeading_RL_11 instead.
 */
#define SIG_SRR_RL_5A7h_RdrObjHeading_RL_11         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A7h_RdrObjHeading_RL_11 or \ref INIT_SRR_RL_5A7h instead.
 */
#define SETUP_SRR_RL_5A7h_RdrObjHeading_RL_11       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A7h_RdrObjHeading_RL_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A7h_RdrObjHeading_RL_11(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A7h_RdrObjHeading_RL_11(buf) \
	SET_SRR_RL_5A7h_RdrObjHeading_RL_11(buf, 0)

/**
 * Signal RdrObjHeading_RL_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A7h_RdrObjHeading_RL_11(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_11 raw initial value.
 */
#define START_SRR_RL_5A7h_RdrObjHeading_RL_11       0

/**
 * Signal RdrObjHeading_RL_11 raw minimum value.
 */
#define MIN_SRR_RL_5A7h_RdrObjHeading_RL_11         0

/**
 * Signal RdrObjHeading_RL_11 raw maximum value.
 */
#define MAX_SRR_RL_5A7h_RdrObjHeading_RL_11         360

/**
 * Signal RdrObjHeading_RL_11 raw offset value.
 */
#define OFF_SRR_RL_5A7h_RdrObjHeading_RL_11         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjChks_RL_12 Signal RdrObjChks_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjChks_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjChks_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjChks_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjChks_RL_12            1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjChks_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjChks_RL_12          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjChks_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjChks_RL_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjChks_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjChks_RL_12(buf, 0)

/**
 * Signal RdrObjChks_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjChks_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjChks_RL_12          0

/**
 * Signal RdrObjChks_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjChks_RL_12            0

/**
 * Signal RdrObjChks_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjChks_RL_12            255

/**
 * Signal RdrObjChks_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjChks_RL_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjCntr_RL_12 Signal RdrObjCntr_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjCntr_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjCntr_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjCntr_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjCntr_RL_12            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjCntr_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjCntr_RL_12          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjCntr_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjCntr_RL_12(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjCntr_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjCntr_RL_12(buf, 0)

/**
 * Signal RdrObjCntr_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjCntr_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjCntr_RL_12          0

/**
 * Signal RdrObjCntr_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjCntr_RL_12            0

/**
 * Signal RdrObjCntr_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjCntr_RL_12            15

/**
 * Signal RdrObjCntr_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjCntr_RL_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjAy_RL_12 Signal RdrObjAy_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjAy_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjAy_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjAy_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjAy_RL_12              1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjAy_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjAy_RL_12            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjAy_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjAy_RL_12(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjAy_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjAy_RL_12(buf, 0)

/**
 * Signal RdrObjAy_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjAy_RL_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjAy_RL_12            0

/**
 * Signal RdrObjAy_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjAy_RL_12              0

/**
 * Signal RdrObjAy_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjAy_RL_12              128

/**
 * Signal RdrObjAy_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjAy_RL_12              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjAx_RL_12 Signal RdrObjAx_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjAx_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjAx_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjAx_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjAx_RL_12              1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjAx_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjAx_RL_12            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjAx_RL_12(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjAx_RL_12(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjAx_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjAx_RL_12(buf, 0)

/**
 * Signal RdrObjAx_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjAx_RL_12(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjAx_RL_12            0

/**
 * Signal RdrObjAx_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjAx_RL_12              0

/**
 * Signal RdrObjAx_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjAx_RL_12              512

/**
 * Signal RdrObjAx_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjAx_RL_12              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjCoast_RL_12 Signal RdrObjCoast_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjCoast_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjCoast_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjCoast_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjCoast_RL_12           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjCoast_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjCoast_RL_12         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjCoast_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjCoast_RL_12(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjCoast_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjCoast_RL_12(buf, 0)

/**
 * Signal RdrObjCoast_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjCoast_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjCoast_RL_12         0

/**
 * Signal RdrObjCoast_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjCoast_RL_12           0

/**
 * Signal RdrObjCoast_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjCoast_RL_12           1

/**
 * Signal RdrObjCoast_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjCoast_RL_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjConf_RL_12 Signal RdrObjConf_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjConf_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjConf_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjConf_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjConf_RL_12            1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjConf_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjConf_RL_12          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjConf_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjConf_RL_12(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjConf_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjConf_RL_12(buf, 0)

/**
 * Signal RdrObjConf_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjConf_RL_12(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjConf_RL_12          0

/**
 * Signal RdrObjConf_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjConf_RL_12            0

/**
 * Signal RdrObjConf_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjConf_RL_12            14

/**
 * Signal RdrObjConf_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjConf_RL_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjMtnPat_RL_12 Signal RdrObjMtnPat_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjMtnPat_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjMtnPat_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjMtnPat_RL_12          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjMtnPat_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjMtnPat_RL_12        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjMtnPat_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjMtnPat_RL_12(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjMtnPat_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjMtnPat_RL_12(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjMtnPat_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjMtnPat_RL_12        0

/**
 * Signal RdrObjMtnPat_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjMtnPat_RL_12          0

/**
 * Signal RdrObjMtnPat_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjMtnPat_RL_12          3

/**
 * Signal RdrObjMtnPat_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjMtnPat_RL_12          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjID_RL_12 Signal RdrObjID_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjID_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjID_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjID_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjID_RL_12              1, 0, 47, 7

/**
 * Signal RdrObjID_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjID_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjID_RL_12            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjID_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjID_RL_12(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjID_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjID_RL_12(buf, 0)

/**
 * Signal RdrObjID_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjID_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjID_RL_12            0

/**
 * Signal RdrObjID_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjID_RL_12              0

/**
 * Signal RdrObjID_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjID_RL_12              255

/**
 * Signal RdrObjID_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjID_RL_12              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjTyp_RL_12 Signal RdrObjTyp_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjTyp_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjTyp_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjTyp_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjTyp_RL_12             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjTyp_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjTyp_RL_12           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjTyp_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjTyp_RL_12(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjTyp_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjTyp_RL_12(buf, 0)

/**
 * Signal RdrObjTyp_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjTyp_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjTyp_RL_12           0

/**
 * Signal RdrObjTyp_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjTyp_RL_12             0

/**
 * Signal RdrObjTyp_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjTyp_RL_12             3

/**
 * Signal RdrObjTyp_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjTyp_RL_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A8h_RdrObjDy_RL_12 Signal RdrObjDy_RL_12 of Message SRR_RL_5A8h (0x5a8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A8h
 * @{
 */

/**
 * Signal RdrObjDy_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A8h_RdrObjDy_RL_12 and \ref GET_SRR_RL_5A8h_RdrObjDy_RL_12 instead.
 */
#define SIG_SRR_RL_5A8h_RdrObjDy_RL_12              1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A8h_RdrObjDy_RL_12 or \ref INIT_SRR_RL_5A8h instead.
 */
#define SETUP_SRR_RL_5A8h_RdrObjDy_RL_12            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A8h_RdrObjDy_RL_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A8h_RdrObjDy_RL_12(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A8h_RdrObjDy_RL_12(buf) \
	SET_SRR_RL_5A8h_RdrObjDy_RL_12(buf, 0)

/**
 * Signal RdrObjDy_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A8h_RdrObjDy_RL_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_12 raw initial value.
 */
#define START_SRR_RL_5A8h_RdrObjDy_RL_12            0

/**
 * Signal RdrObjDy_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A8h_RdrObjDy_RL_12              0

/**
 * Signal RdrObjDy_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A8h_RdrObjDy_RL_12              2046

/**
 * Signal RdrObjDy_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A8h_RdrObjDy_RL_12              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjChks2_RL_12 Signal RdrObjChks2_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjChks2_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjChks2_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjChks2_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjChks2_RL_12           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjChks2_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjChks2_RL_12         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjChks2_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjChks2_RL_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjChks2_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjChks2_RL_12(buf, 0)

/**
 * Signal RdrObjChks2_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjChks2_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjChks2_RL_12         0

/**
 * Signal RdrObjChks2_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjChks2_RL_12           0

/**
 * Signal RdrObjChks2_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjChks2_RL_12           255

/**
 * Signal RdrObjChks2_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjChks2_RL_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjDx_RL_12 Signal RdrObjDx_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjDx_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjDx_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjDx_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjDx_RL_12              1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjDx_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjDx_RL_12            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjDx_RL_12(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjDx_RL_12(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjDx_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjDx_RL_12(buf, 0)

/**
 * Signal RdrObjDx_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjDx_RL_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjDx_RL_12            0

/**
 * Signal RdrObjDx_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjDx_RL_12              0

/**
 * Signal RdrObjDx_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjDx_RL_12              2540

/**
 * Signal RdrObjDx_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjDx_RL_12              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjTiAlv_RL_12 Signal RdrObjTiAlv_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjTiAlv_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjTiAlv_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjTiAlv_RL_12           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjTiAlv_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjTiAlv_RL_12         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjTiAlv_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjTiAlv_RL_12(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjTiAlv_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjTiAlv_RL_12(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjTiAlv_RL_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjTiAlv_RL_12         0

/**
 * Signal RdrObjTiAlv_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjTiAlv_RL_12           0

/**
 * Signal RdrObjTiAlv_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjTiAlv_RL_12           127

/**
 * Signal RdrObjTiAlv_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjTiAlv_RL_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjVy_RL_12 Signal RdrObjVy_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjVy_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjVy_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjVy_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjVy_RL_12              1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjVy_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjVy_RL_12            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjVy_RL_12(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjVy_RL_12(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjVy_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjVy_RL_12(buf, 0)

/**
 * Signal RdrObjVy_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjVy_RL_12(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjVy_RL_12            0

/**
 * Signal RdrObjVy_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjVy_RL_12              0

/**
 * Signal RdrObjVy_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjVy_RL_12              1023

/**
 * Signal RdrObjVy_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjVy_RL_12              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjVx_RL_12 Signal RdrObjVx_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjVx_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjVx_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjVx_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjVx_RL_12              1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjVx_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjVx_RL_12            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjVx_RL_12(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjVx_RL_12(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjVx_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjVx_RL_12(buf, 0)

/**
 * Signal RdrObjVx_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjVx_RL_12(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjVx_RL_12            0

/**
 * Signal RdrObjVx_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjVx_RL_12              0

/**
 * Signal RdrObjVx_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjVx_RL_12              1023

/**
 * Signal RdrObjVx_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjVx_RL_12              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjWth_RL_12 Signal RdrObjWth_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjWth_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjWth_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjWth_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjWth_RL_12             1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjWth_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjWth_RL_12           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjWth_RL_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjWth_RL_12(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjWth_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjWth_RL_12(buf, 0)

/**
 * Signal RdrObjWth_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjWth_RL_12(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjWth_RL_12           0

/**
 * Signal RdrObjWth_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjWth_RL_12             0

/**
 * Signal RdrObjWth_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjWth_RL_12             50

/**
 * Signal RdrObjWth_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjWth_RL_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5A9h_RdrObjHeading_RL_12 Signal RdrObjHeading_RL_12 of Message SRR_RL_5A9h (0x5a9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5A9h
 * @{
 */

/**
 * Signal RdrObjHeading_RL_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5A9h_RdrObjHeading_RL_12 and \ref GET_SRR_RL_5A9h_RdrObjHeading_RL_12 instead.
 */
#define SIG_SRR_RL_5A9h_RdrObjHeading_RL_12         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5A9h_RdrObjHeading_RL_12 or \ref INIT_SRR_RL_5A9h instead.
 */
#define SETUP_SRR_RL_5A9h_RdrObjHeading_RL_12       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5A9h_RdrObjHeading_RL_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5A9h_RdrObjHeading_RL_12(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5A9h_RdrObjHeading_RL_12(buf) \
	SET_SRR_RL_5A9h_RdrObjHeading_RL_12(buf, 0)

/**
 * Signal RdrObjHeading_RL_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5A9h_RdrObjHeading_RL_12(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_12 raw initial value.
 */
#define START_SRR_RL_5A9h_RdrObjHeading_RL_12       0

/**
 * Signal RdrObjHeading_RL_12 raw minimum value.
 */
#define MIN_SRR_RL_5A9h_RdrObjHeading_RL_12         0

/**
 * Signal RdrObjHeading_RL_12 raw maximum value.
 */
#define MAX_SRR_RL_5A9h_RdrObjHeading_RL_12         360

/**
 * Signal RdrObjHeading_RL_12 raw offset value.
 */
#define OFF_SRR_RL_5A9h_RdrObjHeading_RL_12         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjChks_RL_13 Signal RdrObjChks_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjChks_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjChks_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjChks_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjChks_RL_13            1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjChks_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjChks_RL_13          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjChks_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjChks_RL_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjChks_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjChks_RL_13(buf, 0)

/**
 * Signal RdrObjChks_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjChks_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjChks_RL_13          0

/**
 * Signal RdrObjChks_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjChks_RL_13            0

/**
 * Signal RdrObjChks_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjChks_RL_13            255

/**
 * Signal RdrObjChks_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjChks_RL_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjCntr_RL_13 Signal RdrObjCntr_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjCntr_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjCntr_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjCntr_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjCntr_RL_13            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjCntr_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjCntr_RL_13          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjCntr_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjCntr_RL_13(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjCntr_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjCntr_RL_13(buf, 0)

/**
 * Signal RdrObjCntr_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjCntr_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjCntr_RL_13          0

/**
 * Signal RdrObjCntr_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjCntr_RL_13            0

/**
 * Signal RdrObjCntr_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjCntr_RL_13            15

/**
 * Signal RdrObjCntr_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjCntr_RL_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjAy_RL_13 Signal RdrObjAy_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjAy_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjAy_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjAy_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjAy_RL_13              1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjAy_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjAy_RL_13            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjAy_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjAy_RL_13(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjAy_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjAy_RL_13(buf, 0)

/**
 * Signal RdrObjAy_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjAy_RL_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjAy_RL_13            0

/**
 * Signal RdrObjAy_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjAy_RL_13              0

/**
 * Signal RdrObjAy_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjAy_RL_13              128

/**
 * Signal RdrObjAy_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjAy_RL_13              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjAx_RL_13 Signal RdrObjAx_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjAx_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjAx_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjAx_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjAx_RL_13              1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjAx_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjAx_RL_13            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjAx_RL_13(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjAx_RL_13(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjAx_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjAx_RL_13(buf, 0)

/**
 * Signal RdrObjAx_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjAx_RL_13(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjAx_RL_13            0

/**
 * Signal RdrObjAx_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjAx_RL_13              0

/**
 * Signal RdrObjAx_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjAx_RL_13              512

/**
 * Signal RdrObjAx_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjAx_RL_13              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjCoast_RL_13 Signal RdrObjCoast_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjCoast_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjCoast_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjCoast_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjCoast_RL_13           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjCoast_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjCoast_RL_13         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjCoast_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjCoast_RL_13(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjCoast_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjCoast_RL_13(buf, 0)

/**
 * Signal RdrObjCoast_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjCoast_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjCoast_RL_13         0

/**
 * Signal RdrObjCoast_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjCoast_RL_13           0

/**
 * Signal RdrObjCoast_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjCoast_RL_13           1

/**
 * Signal RdrObjCoast_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjCoast_RL_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjConf_RL_13 Signal RdrObjConf_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjConf_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjConf_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjConf_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjConf_RL_13            1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjConf_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjConf_RL_13          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjConf_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjConf_RL_13(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjConf_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjConf_RL_13(buf, 0)

/**
 * Signal RdrObjConf_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjConf_RL_13(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjConf_RL_13          0

/**
 * Signal RdrObjConf_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjConf_RL_13            0

/**
 * Signal RdrObjConf_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjConf_RL_13            14

/**
 * Signal RdrObjConf_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjConf_RL_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjMtnPat_RL_13 Signal RdrObjMtnPat_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjMtnPat_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjMtnPat_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjMtnPat_RL_13          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjMtnPat_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjMtnPat_RL_13        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjMtnPat_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjMtnPat_RL_13(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjMtnPat_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjMtnPat_RL_13(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjMtnPat_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjMtnPat_RL_13        0

/**
 * Signal RdrObjMtnPat_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjMtnPat_RL_13          0

/**
 * Signal RdrObjMtnPat_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjMtnPat_RL_13          3

/**
 * Signal RdrObjMtnPat_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjMtnPat_RL_13          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjID_RL_13 Signal RdrObjID_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjID_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjID_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjID_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjID_RL_13              1, 0, 47, 7

/**
 * Signal RdrObjID_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjID_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjID_RL_13            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjID_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjID_RL_13(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjID_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjID_RL_13(buf, 0)

/**
 * Signal RdrObjID_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjID_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjID_RL_13            0

/**
 * Signal RdrObjID_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjID_RL_13              0

/**
 * Signal RdrObjID_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjID_RL_13              255

/**
 * Signal RdrObjID_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjID_RL_13              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjTyp_RL_13 Signal RdrObjTyp_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjTyp_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjTyp_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjTyp_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjTyp_RL_13             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjTyp_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjTyp_RL_13           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjTyp_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjTyp_RL_13(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjTyp_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjTyp_RL_13(buf, 0)

/**
 * Signal RdrObjTyp_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjTyp_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjTyp_RL_13           0

/**
 * Signal RdrObjTyp_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjTyp_RL_13             0

/**
 * Signal RdrObjTyp_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjTyp_RL_13             3

/**
 * Signal RdrObjTyp_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjTyp_RL_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AAh_RdrObjDy_RL_13 Signal RdrObjDy_RL_13 of Message SRR_RL_5AAh (0x5aa)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AAh
 * @{
 */

/**
 * Signal RdrObjDy_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AAh_RdrObjDy_RL_13 and \ref GET_SRR_RL_5AAh_RdrObjDy_RL_13 instead.
 */
#define SIG_SRR_RL_5AAh_RdrObjDy_RL_13              1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AAh_RdrObjDy_RL_13 or \ref INIT_SRR_RL_5AAh instead.
 */
#define SETUP_SRR_RL_5AAh_RdrObjDy_RL_13            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AAh_RdrObjDy_RL_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AAh_RdrObjDy_RL_13(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AAh_RdrObjDy_RL_13(buf) \
	SET_SRR_RL_5AAh_RdrObjDy_RL_13(buf, 0)

/**
 * Signal RdrObjDy_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AAh_RdrObjDy_RL_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_13 raw initial value.
 */
#define START_SRR_RL_5AAh_RdrObjDy_RL_13            0

/**
 * Signal RdrObjDy_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5AAh_RdrObjDy_RL_13              0

/**
 * Signal RdrObjDy_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5AAh_RdrObjDy_RL_13              2046

/**
 * Signal RdrObjDy_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5AAh_RdrObjDy_RL_13              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjChks2_RL_13 Signal RdrObjChks2_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjChks2_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjChks2_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjChks2_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjChks2_RL_13           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjChks2_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjChks2_RL_13         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjChks2_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjChks2_RL_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjChks2_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjChks2_RL_13(buf, 0)

/**
 * Signal RdrObjChks2_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjChks2_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjChks2_RL_13         0

/**
 * Signal RdrObjChks2_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjChks2_RL_13           0

/**
 * Signal RdrObjChks2_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjChks2_RL_13           255

/**
 * Signal RdrObjChks2_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjChks2_RL_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjDx_RL_13 Signal RdrObjDx_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjDx_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjDx_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjDx_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjDx_RL_13              1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjDx_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjDx_RL_13            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjDx_RL_13(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjDx_RL_13(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjDx_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjDx_RL_13(buf, 0)

/**
 * Signal RdrObjDx_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjDx_RL_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjDx_RL_13            0

/**
 * Signal RdrObjDx_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjDx_RL_13              0

/**
 * Signal RdrObjDx_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjDx_RL_13              2540

/**
 * Signal RdrObjDx_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjDx_RL_13              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjTiAlv_RL_13 Signal RdrObjTiAlv_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjTiAlv_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjTiAlv_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjTiAlv_RL_13           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjTiAlv_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjTiAlv_RL_13         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjTiAlv_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjTiAlv_RL_13(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjTiAlv_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjTiAlv_RL_13(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjTiAlv_RL_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjTiAlv_RL_13         0

/**
 * Signal RdrObjTiAlv_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjTiAlv_RL_13           0

/**
 * Signal RdrObjTiAlv_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjTiAlv_RL_13           127

/**
 * Signal RdrObjTiAlv_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjTiAlv_RL_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjVy_RL_13 Signal RdrObjVy_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjVy_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjVy_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjVy_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjVy_RL_13              1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjVy_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjVy_RL_13            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjVy_RL_13(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjVy_RL_13(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjVy_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjVy_RL_13(buf, 0)

/**
 * Signal RdrObjVy_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjVy_RL_13(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjVy_RL_13            0

/**
 * Signal RdrObjVy_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjVy_RL_13              0

/**
 * Signal RdrObjVy_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjVy_RL_13              1023

/**
 * Signal RdrObjVy_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjVy_RL_13              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjVx_RL_13 Signal RdrObjVx_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjVx_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjVx_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjVx_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjVx_RL_13              1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjVx_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjVx_RL_13            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjVx_RL_13(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjVx_RL_13(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjVx_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjVx_RL_13(buf, 0)

/**
 * Signal RdrObjVx_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjVx_RL_13(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjVx_RL_13            0

/**
 * Signal RdrObjVx_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjVx_RL_13              0

/**
 * Signal RdrObjVx_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjVx_RL_13              1023

/**
 * Signal RdrObjVx_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjVx_RL_13              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjWth_RL_13 Signal RdrObjWth_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjWth_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjWth_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjWth_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjWth_RL_13             1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjWth_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjWth_RL_13           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjWth_RL_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjWth_RL_13(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjWth_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjWth_RL_13(buf, 0)

/**
 * Signal RdrObjWth_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjWth_RL_13(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjWth_RL_13           0

/**
 * Signal RdrObjWth_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjWth_RL_13             0

/**
 * Signal RdrObjWth_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjWth_RL_13             50

/**
 * Signal RdrObjWth_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjWth_RL_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ABh_RdrObjHeading_RL_13 Signal RdrObjHeading_RL_13 of Message SRR_RL_5ABh (0x5ab)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ABh
 * @{
 */

/**
 * Signal RdrObjHeading_RL_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ABh_RdrObjHeading_RL_13 and \ref GET_SRR_RL_5ABh_RdrObjHeading_RL_13 instead.
 */
#define SIG_SRR_RL_5ABh_RdrObjHeading_RL_13         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ABh_RdrObjHeading_RL_13 or \ref INIT_SRR_RL_5ABh instead.
 */
#define SETUP_SRR_RL_5ABh_RdrObjHeading_RL_13       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ABh_RdrObjHeading_RL_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ABh_RdrObjHeading_RL_13(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ABh_RdrObjHeading_RL_13(buf) \
	SET_SRR_RL_5ABh_RdrObjHeading_RL_13(buf, 0)

/**
 * Signal RdrObjHeading_RL_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ABh_RdrObjHeading_RL_13(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_13 raw initial value.
 */
#define START_SRR_RL_5ABh_RdrObjHeading_RL_13       0

/**
 * Signal RdrObjHeading_RL_13 raw minimum value.
 */
#define MIN_SRR_RL_5ABh_RdrObjHeading_RL_13         0

/**
 * Signal RdrObjHeading_RL_13 raw maximum value.
 */
#define MAX_SRR_RL_5ABh_RdrObjHeading_RL_13         360

/**
 * Signal RdrObjHeading_RL_13 raw offset value.
 */
#define OFF_SRR_RL_5ABh_RdrObjHeading_RL_13         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjChks_RL_14 Signal RdrObjChks_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjChks_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjChks_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjChks_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjChks_RL_14            1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjChks_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjChks_RL_14          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjChks_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjChks_RL_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjChks_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjChks_RL_14(buf, 0)

/**
 * Signal RdrObjChks_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjChks_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjChks_RL_14          0

/**
 * Signal RdrObjChks_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjChks_RL_14            0

/**
 * Signal RdrObjChks_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjChks_RL_14            255

/**
 * Signal RdrObjChks_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjChks_RL_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjCntr_RL_14 Signal RdrObjCntr_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjCntr_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjCntr_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjCntr_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjCntr_RL_14            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjCntr_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjCntr_RL_14          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjCntr_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjCntr_RL_14(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjCntr_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjCntr_RL_14(buf, 0)

/**
 * Signal RdrObjCntr_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjCntr_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjCntr_RL_14          0

/**
 * Signal RdrObjCntr_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjCntr_RL_14            0

/**
 * Signal RdrObjCntr_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjCntr_RL_14            15

/**
 * Signal RdrObjCntr_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjCntr_RL_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjAy_RL_14 Signal RdrObjAy_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjAy_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjAy_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjAy_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjAy_RL_14              1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjAy_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjAy_RL_14            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjAy_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjAy_RL_14(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjAy_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjAy_RL_14(buf, 0)

/**
 * Signal RdrObjAy_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjAy_RL_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjAy_RL_14            0

/**
 * Signal RdrObjAy_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjAy_RL_14              0

/**
 * Signal RdrObjAy_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjAy_RL_14              128

/**
 * Signal RdrObjAy_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjAy_RL_14              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjAx_RL_14 Signal RdrObjAx_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjAx_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjAx_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjAx_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjAx_RL_14              1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjAx_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjAx_RL_14            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjAx_RL_14(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjAx_RL_14(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjAx_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjAx_RL_14(buf, 0)

/**
 * Signal RdrObjAx_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjAx_RL_14(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjAx_RL_14            0

/**
 * Signal RdrObjAx_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjAx_RL_14              0

/**
 * Signal RdrObjAx_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjAx_RL_14              512

/**
 * Signal RdrObjAx_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjAx_RL_14              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjCoast_RL_14 Signal RdrObjCoast_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjCoast_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjCoast_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjCoast_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjCoast_RL_14           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjCoast_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjCoast_RL_14         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjCoast_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjCoast_RL_14(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjCoast_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjCoast_RL_14(buf, 0)

/**
 * Signal RdrObjCoast_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjCoast_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjCoast_RL_14         0

/**
 * Signal RdrObjCoast_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjCoast_RL_14           0

/**
 * Signal RdrObjCoast_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjCoast_RL_14           1

/**
 * Signal RdrObjCoast_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjCoast_RL_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjConf_RL_14 Signal RdrObjConf_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjConf_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjConf_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjConf_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjConf_RL_14            1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjConf_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjConf_RL_14          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjConf_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjConf_RL_14(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjConf_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjConf_RL_14(buf, 0)

/**
 * Signal RdrObjConf_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjConf_RL_14(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjConf_RL_14          0

/**
 * Signal RdrObjConf_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjConf_RL_14            0

/**
 * Signal RdrObjConf_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjConf_RL_14            14

/**
 * Signal RdrObjConf_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjConf_RL_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjMtnPat_RL_14 Signal RdrObjMtnPat_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjMtnPat_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjMtnPat_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjMtnPat_RL_14          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjMtnPat_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjMtnPat_RL_14        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjMtnPat_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjMtnPat_RL_14(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjMtnPat_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjMtnPat_RL_14(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjMtnPat_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjMtnPat_RL_14        0

/**
 * Signal RdrObjMtnPat_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjMtnPat_RL_14          0

/**
 * Signal RdrObjMtnPat_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjMtnPat_RL_14          3

/**
 * Signal RdrObjMtnPat_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjMtnPat_RL_14          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjID_RL_14 Signal RdrObjID_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjID_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjID_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjID_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjID_RL_14              1, 0, 47, 7

/**
 * Signal RdrObjID_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjID_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjID_RL_14            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjID_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjID_RL_14(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjID_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjID_RL_14(buf, 0)

/**
 * Signal RdrObjID_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjID_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjID_RL_14            0

/**
 * Signal RdrObjID_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjID_RL_14              0

/**
 * Signal RdrObjID_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjID_RL_14              255

/**
 * Signal RdrObjID_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjID_RL_14              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjTyp_RL_14 Signal RdrObjTyp_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjTyp_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjTyp_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjTyp_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjTyp_RL_14             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjTyp_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjTyp_RL_14           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjTyp_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjTyp_RL_14(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjTyp_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjTyp_RL_14(buf, 0)

/**
 * Signal RdrObjTyp_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjTyp_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjTyp_RL_14           0

/**
 * Signal RdrObjTyp_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjTyp_RL_14             0

/**
 * Signal RdrObjTyp_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjTyp_RL_14             3

/**
 * Signal RdrObjTyp_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjTyp_RL_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ACh_RdrObjDy_RL_14 Signal RdrObjDy_RL_14 of Message SRR_RL_5ACh (0x5ac)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ACh
 * @{
 */

/**
 * Signal RdrObjDy_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ACh_RdrObjDy_RL_14 and \ref GET_SRR_RL_5ACh_RdrObjDy_RL_14 instead.
 */
#define SIG_SRR_RL_5ACh_RdrObjDy_RL_14              1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ACh_RdrObjDy_RL_14 or \ref INIT_SRR_RL_5ACh instead.
 */
#define SETUP_SRR_RL_5ACh_RdrObjDy_RL_14            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ACh_RdrObjDy_RL_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ACh_RdrObjDy_RL_14(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ACh_RdrObjDy_RL_14(buf) \
	SET_SRR_RL_5ACh_RdrObjDy_RL_14(buf, 0)

/**
 * Signal RdrObjDy_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ACh_RdrObjDy_RL_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_14 raw initial value.
 */
#define START_SRR_RL_5ACh_RdrObjDy_RL_14            0

/**
 * Signal RdrObjDy_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ACh_RdrObjDy_RL_14              0

/**
 * Signal RdrObjDy_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ACh_RdrObjDy_RL_14              2046

/**
 * Signal RdrObjDy_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ACh_RdrObjDy_RL_14              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjChks2_RL_14 Signal RdrObjChks2_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjChks2_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjChks2_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjChks2_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjChks2_RL_14           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjChks2_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjChks2_RL_14         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjChks2_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjChks2_RL_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjChks2_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjChks2_RL_14(buf, 0)

/**
 * Signal RdrObjChks2_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjChks2_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjChks2_RL_14         0

/**
 * Signal RdrObjChks2_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjChks2_RL_14           0

/**
 * Signal RdrObjChks2_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjChks2_RL_14           255

/**
 * Signal RdrObjChks2_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjChks2_RL_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjDx_RL_14 Signal RdrObjDx_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjDx_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjDx_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjDx_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjDx_RL_14              1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjDx_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjDx_RL_14            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjDx_RL_14(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjDx_RL_14(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjDx_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjDx_RL_14(buf, 0)

/**
 * Signal RdrObjDx_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjDx_RL_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjDx_RL_14            0

/**
 * Signal RdrObjDx_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjDx_RL_14              0

/**
 * Signal RdrObjDx_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjDx_RL_14              2540

/**
 * Signal RdrObjDx_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjDx_RL_14              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjTiAlv_RL_14 Signal RdrObjTiAlv_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjTiAlv_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjTiAlv_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjTiAlv_RL_14           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjTiAlv_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjTiAlv_RL_14         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjTiAlv_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjTiAlv_RL_14(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjTiAlv_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjTiAlv_RL_14(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjTiAlv_RL_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjTiAlv_RL_14         0

/**
 * Signal RdrObjTiAlv_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjTiAlv_RL_14           0

/**
 * Signal RdrObjTiAlv_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjTiAlv_RL_14           127

/**
 * Signal RdrObjTiAlv_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjTiAlv_RL_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjVy_RL_14 Signal RdrObjVy_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjVy_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjVy_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjVy_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjVy_RL_14              1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjVy_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjVy_RL_14            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjVy_RL_14(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjVy_RL_14(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjVy_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjVy_RL_14(buf, 0)

/**
 * Signal RdrObjVy_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjVy_RL_14(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjVy_RL_14            0

/**
 * Signal RdrObjVy_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjVy_RL_14              0

/**
 * Signal RdrObjVy_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjVy_RL_14              1023

/**
 * Signal RdrObjVy_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjVy_RL_14              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjVx_RL_14 Signal RdrObjVx_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjVx_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjVx_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjVx_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjVx_RL_14              1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjVx_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjVx_RL_14            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjVx_RL_14(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjVx_RL_14(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjVx_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjVx_RL_14(buf, 0)

/**
 * Signal RdrObjVx_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjVx_RL_14(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjVx_RL_14            0

/**
 * Signal RdrObjVx_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjVx_RL_14              0

/**
 * Signal RdrObjVx_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjVx_RL_14              1023

/**
 * Signal RdrObjVx_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjVx_RL_14              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjWth_RL_14 Signal RdrObjWth_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjWth_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjWth_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjWth_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjWth_RL_14             1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjWth_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjWth_RL_14           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjWth_RL_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjWth_RL_14(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjWth_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjWth_RL_14(buf, 0)

/**
 * Signal RdrObjWth_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjWth_RL_14(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjWth_RL_14           0

/**
 * Signal RdrObjWth_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjWth_RL_14             0

/**
 * Signal RdrObjWth_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjWth_RL_14             50

/**
 * Signal RdrObjWth_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjWth_RL_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5ADh_RdrObjHeading_RL_14 Signal RdrObjHeading_RL_14 of Message SRR_RL_5ADh (0x5ad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5ADh
 * @{
 */

/**
 * Signal RdrObjHeading_RL_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5ADh_RdrObjHeading_RL_14 and \ref GET_SRR_RL_5ADh_RdrObjHeading_RL_14 instead.
 */
#define SIG_SRR_RL_5ADh_RdrObjHeading_RL_14         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5ADh_RdrObjHeading_RL_14 or \ref INIT_SRR_RL_5ADh instead.
 */
#define SETUP_SRR_RL_5ADh_RdrObjHeading_RL_14       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5ADh_RdrObjHeading_RL_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5ADh_RdrObjHeading_RL_14(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5ADh_RdrObjHeading_RL_14(buf) \
	SET_SRR_RL_5ADh_RdrObjHeading_RL_14(buf, 0)

/**
 * Signal RdrObjHeading_RL_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5ADh_RdrObjHeading_RL_14(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_14 raw initial value.
 */
#define START_SRR_RL_5ADh_RdrObjHeading_RL_14       0

/**
 * Signal RdrObjHeading_RL_14 raw minimum value.
 */
#define MIN_SRR_RL_5ADh_RdrObjHeading_RL_14         0

/**
 * Signal RdrObjHeading_RL_14 raw maximum value.
 */
#define MAX_SRR_RL_5ADh_RdrObjHeading_RL_14         360

/**
 * Signal RdrObjHeading_RL_14 raw offset value.
 */
#define OFF_SRR_RL_5ADh_RdrObjHeading_RL_14         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjChks_RL_15 Signal RdrObjChks_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjChks_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjChks_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjChks_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjChks_RL_15            1, 0, 7, 8

/**
 * Signal RdrObjChks_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjChks_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjChks_RL_15          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjChks_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjChks_RL_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjChks_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjChks_RL_15(buf, 0)

/**
 * Signal RdrObjChks_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjChks_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjChks_RL_15          0

/**
 * Signal RdrObjChks_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjChks_RL_15            0

/**
 * Signal RdrObjChks_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjChks_RL_15            255

/**
 * Signal RdrObjChks_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjChks_RL_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjCntr_RL_15 Signal RdrObjCntr_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjCntr_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjCntr_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjCntr_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjCntr_RL_15            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjCntr_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjCntr_RL_15          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjCntr_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjCntr_RL_15(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjCntr_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjCntr_RL_15(buf, 0)

/**
 * Signal RdrObjCntr_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjCntr_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjCntr_RL_15          0

/**
 * Signal RdrObjCntr_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjCntr_RL_15            0

/**
 * Signal RdrObjCntr_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjCntr_RL_15            15

/**
 * Signal RdrObjCntr_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjCntr_RL_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjAy_RL_15 Signal RdrObjAy_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjAy_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjAy_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjAy_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjAy_RL_15              1, 0, 23, 7

/**
 * Signal RdrObjAy_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjAy_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjAy_RL_15            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjAy_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjAy_RL_15(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjAy_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjAy_RL_15(buf, 0)

/**
 * Signal RdrObjAy_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjAy_RL_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjAy_RL_15            0

/**
 * Signal RdrObjAy_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjAy_RL_15              0

/**
 * Signal RdrObjAy_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjAy_RL_15              128

/**
 * Signal RdrObjAy_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjAy_RL_15              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjAx_RL_15 Signal RdrObjAx_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjAx_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjAx_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjAx_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjAx_RL_15              1, 0, 16, 9

/**
 * Signal RdrObjAx_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjAx_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjAx_RL_15            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjAx_RL_15(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjAx_RL_15(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjAx_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjAx_RL_15(buf, 0)

/**
 * Signal RdrObjAx_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjAx_RL_15(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjAx_RL_15            0

/**
 * Signal RdrObjAx_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjAx_RL_15              0

/**
 * Signal RdrObjAx_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjAx_RL_15              512

/**
 * Signal RdrObjAx_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjAx_RL_15              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjCoast_RL_15 Signal RdrObjCoast_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjCoast_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjCoast_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjCoast_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjCoast_RL_15           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjCoast_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjCoast_RL_15         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjCoast_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjCoast_RL_15(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjCoast_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjCoast_RL_15(buf, 0)

/**
 * Signal RdrObjCoast_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjCoast_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjCoast_RL_15         0

/**
 * Signal RdrObjCoast_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjCoast_RL_15           0

/**
 * Signal RdrObjCoast_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjCoast_RL_15           1

/**
 * Signal RdrObjCoast_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjCoast_RL_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjConf_RL_15 Signal RdrObjConf_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjConf_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjConf_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjConf_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjConf_RL_15            1, 0, 38, 4

/**
 * Signal RdrObjConf_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjConf_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjConf_RL_15          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjConf_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjConf_RL_15(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjConf_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjConf_RL_15(buf, 0)

/**
 * Signal RdrObjConf_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjConf_RL_15(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjConf_RL_15          0

/**
 * Signal RdrObjConf_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjConf_RL_15            0

/**
 * Signal RdrObjConf_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjConf_RL_15            14

/**
 * Signal RdrObjConf_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjConf_RL_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjMtnPat_RL_15 Signal RdrObjMtnPat_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjMtnPat_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjMtnPat_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjMtnPat_RL_15          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjMtnPat_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjMtnPat_RL_15        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjMtnPat_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjMtnPat_RL_15(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjMtnPat_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjMtnPat_RL_15(buf, 0)

/**
 * Signal RdrObjMtnPat_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjMtnPat_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjMtnPat_RL_15        0

/**
 * Signal RdrObjMtnPat_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjMtnPat_RL_15          0

/**
 * Signal RdrObjMtnPat_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjMtnPat_RL_15          3

/**
 * Signal RdrObjMtnPat_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjMtnPat_RL_15          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjID_RL_15 Signal RdrObjID_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjID_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjID_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjID_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjID_RL_15              1, 0, 47, 7

/**
 * Signal RdrObjID_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjID_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjID_RL_15            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjID_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjID_RL_15(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjID_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjID_RL_15(buf, 0)

/**
 * Signal RdrObjID_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjID_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjID_RL_15            0

/**
 * Signal RdrObjID_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjID_RL_15              0

/**
 * Signal RdrObjID_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjID_RL_15              255

/**
 * Signal RdrObjID_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjID_RL_15              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjTyp_RL_15 Signal RdrObjTyp_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjTyp_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjTyp_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjTyp_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjTyp_RL_15             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjTyp_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjTyp_RL_15           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjTyp_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjTyp_RL_15(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjTyp_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjTyp_RL_15(buf, 0)

/**
 * Signal RdrObjTyp_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjTyp_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjTyp_RL_15           0

/**
 * Signal RdrObjTyp_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjTyp_RL_15             0

/**
 * Signal RdrObjTyp_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjTyp_RL_15             3

/**
 * Signal RdrObjTyp_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjTyp_RL_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AEh_RdrObjDy_RL_15 Signal RdrObjDy_RL_15 of Message SRR_RL_5AEh (0x5ae)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AEh
 * @{
 */

/**
 * Signal RdrObjDy_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AEh_RdrObjDy_RL_15 and \ref GET_SRR_RL_5AEh_RdrObjDy_RL_15 instead.
 */
#define SIG_SRR_RL_5AEh_RdrObjDy_RL_15              1, 0, 53, 11

/**
 * Signal RdrObjDy_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AEh_RdrObjDy_RL_15 or \ref INIT_SRR_RL_5AEh instead.
 */
#define SETUP_SRR_RL_5AEh_RdrObjDy_RL_15            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AEh_RdrObjDy_RL_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AEh_RdrObjDy_RL_15(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AEh_RdrObjDy_RL_15(buf) \
	SET_SRR_RL_5AEh_RdrObjDy_RL_15(buf, 0)

/**
 * Signal RdrObjDy_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AEh_RdrObjDy_RL_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RL_15 raw initial value.
 */
#define START_SRR_RL_5AEh_RdrObjDy_RL_15            0

/**
 * Signal RdrObjDy_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AEh_RdrObjDy_RL_15              0

/**
 * Signal RdrObjDy_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AEh_RdrObjDy_RL_15              2046

/**
 * Signal RdrObjDy_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AEh_RdrObjDy_RL_15              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjChks2_RL_15 Signal RdrObjChks2_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjChks2_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjChks2_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjChks2_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjChks2_RL_15           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjChks2_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjChks2_RL_15         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjChks2_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjChks2_RL_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjChks2_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjChks2_RL_15(buf, 0)

/**
 * Signal RdrObjChks2_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjChks2_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjChks2_RL_15         0

/**
 * Signal RdrObjChks2_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjChks2_RL_15           0

/**
 * Signal RdrObjChks2_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjChks2_RL_15           255

/**
 * Signal RdrObjChks2_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjChks2_RL_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjDx_RL_15 Signal RdrObjDx_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjDx_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjDx_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjDx_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjDx_RL_15              1, 0, 14, 12

/**
 * Signal RdrObjDx_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjDx_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjDx_RL_15            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjDx_RL_15(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjDx_RL_15(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjDx_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjDx_RL_15(buf, 0)

/**
 * Signal RdrObjDx_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjDx_RL_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjDx_RL_15            0

/**
 * Signal RdrObjDx_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjDx_RL_15              0

/**
 * Signal RdrObjDx_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjDx_RL_15              2540

/**
 * Signal RdrObjDx_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjDx_RL_15              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjTiAlv_RL_15 Signal RdrObjTiAlv_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjTiAlv_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjTiAlv_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjTiAlv_RL_15           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjTiAlv_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjTiAlv_RL_15         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjTiAlv_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjTiAlv_RL_15(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjTiAlv_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjTiAlv_RL_15(buf, 0)

/**
 * Signal RdrObjTiAlv_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjTiAlv_RL_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjTiAlv_RL_15         0

/**
 * Signal RdrObjTiAlv_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjTiAlv_RL_15           0

/**
 * Signal RdrObjTiAlv_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjTiAlv_RL_15           127

/**
 * Signal RdrObjTiAlv_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjTiAlv_RL_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjVy_RL_15 Signal RdrObjVy_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjVy_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjVy_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjVy_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjVy_RL_15              1, 0, 27, 10

/**
 * Signal RdrObjVy_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjVy_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjVy_RL_15            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjVy_RL_15(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjVy_RL_15(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjVy_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjVy_RL_15(buf, 0)

/**
 * Signal RdrObjVy_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjVy_RL_15(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVy_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjVy_RL_15            0

/**
 * Signal RdrObjVy_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjVy_RL_15              0

/**
 * Signal RdrObjVy_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjVy_RL_15              1023

/**
 * Signal RdrObjVy_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjVy_RL_15              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjVx_RL_15 Signal RdrObjVx_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjVx_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjVx_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjVx_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjVx_RL_15              1, 0, 33, 10

/**
 * Signal RdrObjVx_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjVx_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjVx_RL_15            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjVx_RL_15(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjVx_RL_15(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjVx_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjVx_RL_15(buf, 0)

/**
 * Signal RdrObjVx_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjVx_RL_15(x, fmt) \
	((x) * fmt / 10 + fmt * 256 / (-5))

/**
 * Signal RdrObjVx_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjVx_RL_15            0

/**
 * Signal RdrObjVx_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjVx_RL_15              0

/**
 * Signal RdrObjVx_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjVx_RL_15              1023

/**
 * Signal RdrObjVx_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjVx_RL_15              -512

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjWth_RL_15 Signal RdrObjWth_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjWth_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjWth_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjWth_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjWth_RL_15             1, 0, 55, 6

/**
 * Signal RdrObjWth_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjWth_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjWth_RL_15           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjWth_RL_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjWth_RL_15(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjWth_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjWth_RL_15(buf, 0)

/**
 * Signal RdrObjWth_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjWth_RL_15(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjWth_RL_15           0

/**
 * Signal RdrObjWth_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjWth_RL_15             0

/**
 * Signal RdrObjWth_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjWth_RL_15             50

/**
 * Signal RdrObjWth_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjWth_RL_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RL_5AFh_RdrObjHeading_RL_15 Signal RdrObjHeading_RL_15 of Message SRR_RL_5AFh (0x5af)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RL_5AFh
 * @{
 */

/**
 * Signal RdrObjHeading_RL_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RL_5AFh_RdrObjHeading_RL_15 and \ref GET_SRR_RL_5AFh_RdrObjHeading_RL_15 instead.
 */
#define SIG_SRR_RL_5AFh_RdrObjHeading_RL_15         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RL_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RL_5AFh_RdrObjHeading_RL_15 or \ref INIT_SRR_RL_5AFh instead.
 */
#define SETUP_SRR_RL_5AFh_RdrObjHeading_RL_15       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RL_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RL_5AFh_RdrObjHeading_RL_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RL_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RL_5AFh_RdrObjHeading_RL_15(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RL_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RL_5AFh_RdrObjHeading_RL_15(buf) \
	SET_SRR_RL_5AFh_RdrObjHeading_RL_15(buf, 0)

/**
 * Signal RdrObjHeading_RL_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RL_5AFh_RdrObjHeading_RL_15(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RL_15 raw initial value.
 */
#define START_SRR_RL_5AFh_RdrObjHeading_RL_15       0

/**
 * Signal RdrObjHeading_RL_15 raw minimum value.
 */
#define MIN_SRR_RL_5AFh_RdrObjHeading_RL_15         0

/**
 * Signal RdrObjHeading_RL_15 raw maximum value.
 */
#define MAX_SRR_RL_5AFh_RdrObjHeading_RL_15         360

/**
 * Signal RdrObjHeading_RL_15 raw offset value.
 */
#define OFF_SRR_RL_5AFh_RdrObjHeading_RL_15         -180

/**
 * @}
 */

/**
 * @defgroup SIG_IECU_Tester_709h_TesterDiagRequestData_SRR_RR Signal TesterDiagRequestData_SRR_RR of Message IECU_Tester_709h (0x709)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IECU_Tester_709h
 * @{
 */

/**
 * Signal TesterDiagRequestData_SRR_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IECU_Tester_709h_TesterDiagRequestData_SRR_RR and \ref GET_IECU_Tester_709h_TesterDiagRequestData_SRR_RR instead.
 */
#define SIG_IECU_Tester_709h_TesterDiagRequestData_SRR_RR        1, 0, 7, 64

/**
 * Signal TesterDiagRequestData_SRR_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IECU_Tester_709h_TesterDiagRequestData_SRR_RR or \ref INIT_IECU_Tester_709h instead.
 */
#define SETUP_IECU_Tester_709h_TesterDiagRequestData_SRR_RR      1, 0, 7, 64, 0

/**
 * Get signal TesterDiagRequestData_SRR_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IECU_Tester_709h_TesterDiagRequestData_SRR_RR(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal TesterDiagRequestData_SRR_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IECU_Tester_709h_TesterDiagRequestData_SRR_RR(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal TesterDiagRequestData_SRR_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IECU_Tester_709h_TesterDiagRequestData_SRR_RR(buf) \
	SET_IECU_Tester_709h_TesterDiagRequestData_SRR_RR(buf, 0)

/**
 * Signal TesterDiagRequestData_SRR_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IECU_Tester_709h_TesterDiagRequestData_SRR_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal TesterDiagRequestData_SRR_RR raw initial value.
 */
#define START_IECU_Tester_709h_TesterDiagRequestData_SRR_RR      0

/**
 * Signal TesterDiagRequestData_SRR_RR raw minimum value.
 */
#define MIN_IECU_Tester_709h_TesterDiagRequestData_SRR_RR        0

/**
 * Signal TesterDiagRequestData_SRR_RR raw maximum value.
 */
#define MAX_IECU_Tester_709h_TesterDiagRequestData_SRR_RR        255

/**
 * Signal TesterDiagRequestData_SRR_RR raw offset value.
 */
#define OFF_IECU_Tester_709h_TesterDiagRequestData_SRR_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_789h_SRR_RRDiagResponseData Signal SRR_RRDiagResponseData of Message SRR_RR_789h (0x789)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_789h
 * @{
 */

/**
 * Signal SRR_RRDiagResponseData configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_789h_SRR_RRDiagResponseData and \ref GET_SRR_RR_789h_SRR_RRDiagResponseData instead.
 */
#define SIG_SRR_RR_789h_SRR_RRDiagResponseData        1, 0, 7, 64

/**
 * Signal SRR_RRDiagResponseData setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_789h_SRR_RRDiagResponseData or \ref INIT_SRR_RR_789h instead.
 */
#define SETUP_SRR_RR_789h_SRR_RRDiagResponseData      1, 0, 7, 64, 0

/**
 * Get signal SRR_RRDiagResponseData from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_789h_SRR_RRDiagResponseData(buf) (0 \
	| (ulong)(+(ulong)((buf[0] >> 0) & 0xff) << 56) \
	| (ulong)(+(ulong)((buf[1] >> 0) & 0xff) << 48) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 40) \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 32) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SRR_RRDiagResponseData in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_789h_SRR_RRDiagResponseData(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((ulong)(val) >> 56) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((ulong)(val) >> 48) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 40) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 32) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SRR_RRDiagResponseData in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_789h_SRR_RRDiagResponseData(buf) \
	SET_SRR_RR_789h_SRR_RRDiagResponseData(buf, 0)

/**
 * Signal SRR_RRDiagResponseData value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_789h_SRR_RRDiagResponseData(x, fmt) \
	((x) * fmt)

/**
 * Signal SRR_RRDiagResponseData raw initial value.
 */
#define START_SRR_RR_789h_SRR_RRDiagResponseData      0

/**
 * Signal SRR_RRDiagResponseData raw minimum value.
 */
#define MIN_SRR_RR_789h_SRR_RRDiagResponseData        0

/**
 * Signal SRR_RRDiagResponseData raw maximum value.
 */
#define MAX_SRR_RR_789h_SRR_RRDiagResponseData        255

/**
 * Signal SRR_RRDiagResponseData raw offset value.
 */
#define OFF_SRR_RR_789h_SRR_RRDiagResponseData        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B0h_RdrStsChks_RR Signal RdrStsChks_RR of Message SRR_RR_5B0h (0x5b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B0h
 * @{
 */

/**
 * Signal RdrStsChks_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B0h_RdrStsChks_RR and \ref GET_SRR_RR_5B0h_RdrStsChks_RR instead.
 */
#define SIG_SRR_RR_5B0h_RdrStsChks_RR               1, 0, 7, 8

/**
 * Signal RdrStsChks_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B0h_RdrStsChks_RR or \ref INIT_SRR_RR_5B0h instead.
 */
#define SETUP_SRR_RR_5B0h_RdrStsChks_RR             1, 0, 7, 8, 0

/**
 * Get signal RdrStsChks_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B0h_RdrStsChks_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsChks_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B0h_RdrStsChks_RR(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsChks_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B0h_RdrStsChks_RR(buf) \
	SET_SRR_RR_5B0h_RdrStsChks_RR(buf, 0)

/**
 * Signal RdrStsChks_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B0h_RdrStsChks_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsChks_RR raw initial value.
 */
#define START_SRR_RR_5B0h_RdrStsChks_RR             0

/**
 * Signal RdrStsChks_RR raw minimum value.
 */
#define MIN_SRR_RR_5B0h_RdrStsChks_RR               0

/**
 * Signal RdrStsChks_RR raw maximum value.
 */
#define MAX_SRR_RR_5B0h_RdrStsChks_RR               255

/**
 * Signal RdrStsChks_RR raw offset value.
 */
#define OFF_SRR_RR_5B0h_RdrStsChks_RR               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B0h_RdrStsCntr_RR Signal RdrStsCntr_RR of Message SRR_RR_5B0h (0x5b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B0h
 * @{
 */

/**
 * Signal RdrStsCntr_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B0h_RdrStsCntr_RR and \ref GET_SRR_RR_5B0h_RdrStsCntr_RR instead.
 */
#define SIG_SRR_RR_5B0h_RdrStsCntr_RR               1, 0, 15, 4

/**
 * Signal RdrStsCntr_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B0h_RdrStsCntr_RR or \ref INIT_SRR_RR_5B0h instead.
 */
#define SETUP_SRR_RR_5B0h_RdrStsCntr_RR             1, 0, 15, 4, 0

/**
 * Get signal RdrStsCntr_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B0h_RdrStsCntr_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsCntr_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B0h_RdrStsCntr_RR(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsCntr_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B0h_RdrStsCntr_RR(buf) \
	SET_SRR_RR_5B0h_RdrStsCntr_RR(buf, 0)

/**
 * Signal RdrStsCntr_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B0h_RdrStsCntr_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsCntr_RR raw initial value.
 */
#define START_SRR_RR_5B0h_RdrStsCntr_RR             0

/**
 * Signal RdrStsCntr_RR raw minimum value.
 */
#define MIN_SRR_RR_5B0h_RdrStsCntr_RR               0

/**
 * Signal RdrStsCntr_RR raw maximum value.
 */
#define MAX_SRR_RR_5B0h_RdrStsCntr_RR               15

/**
 * Signal RdrStsCntr_RR raw offset value.
 */
#define OFF_SRR_RR_5B0h_RdrStsCntr_RR               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B0h_RdrStsIfVersMajor_RR Signal RdrStsIfVersMajor_RR of Message SRR_RR_5B0h (0x5b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B0h
 * @{
 */

/**
 * Signal RdrStsIfVersMajor_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B0h_RdrStsIfVersMajor_RR and \ref GET_SRR_RR_5B0h_RdrStsIfVersMajor_RR instead.
 */
#define SIG_SRR_RR_5B0h_RdrStsIfVersMajor_RR        1, 0, 11, 4

/**
 * Signal RdrStsIfVersMajor_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B0h_RdrStsIfVersMajor_RR or \ref INIT_SRR_RR_5B0h instead.
 */
#define SETUP_SRR_RR_5B0h_RdrStsIfVersMajor_RR      1, 0, 11, 4, 0

/**
 * Get signal RdrStsIfVersMajor_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B0h_RdrStsIfVersMajor_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMajor_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B0h_RdrStsIfVersMajor_RR(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMajor_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B0h_RdrStsIfVersMajor_RR(buf) \
	SET_SRR_RR_5B0h_RdrStsIfVersMajor_RR(buf, 0)

/**
 * Signal RdrStsIfVersMajor_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B0h_RdrStsIfVersMajor_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMajor_RR raw initial value.
 */
#define START_SRR_RR_5B0h_RdrStsIfVersMajor_RR      0

/**
 * Signal RdrStsIfVersMajor_RR raw minimum value.
 */
#define MIN_SRR_RR_5B0h_RdrStsIfVersMajor_RR        0

/**
 * Signal RdrStsIfVersMajor_RR raw maximum value.
 */
#define MAX_SRR_RR_5B0h_RdrStsIfVersMajor_RR        15

/**
 * Signal RdrStsIfVersMajor_RR raw offset value.
 */
#define OFF_SRR_RR_5B0h_RdrStsIfVersMajor_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B0h_RdrStsIfVersMiddle_RR Signal RdrStsIfVersMiddle_RR of Message SRR_RR_5B0h (0x5b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B0h
 * @{
 */

/**
 * Signal RdrStsIfVersMiddle_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B0h_RdrStsIfVersMiddle_RR and \ref GET_SRR_RR_5B0h_RdrStsIfVersMiddle_RR instead.
 */
#define SIG_SRR_RR_5B0h_RdrStsIfVersMiddle_RR        1, 0, 23, 4

/**
 * Signal RdrStsIfVersMiddle_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B0h_RdrStsIfVersMiddle_RR or \ref INIT_SRR_RR_5B0h instead.
 */
#define SETUP_SRR_RR_5B0h_RdrStsIfVersMiddle_RR      1, 0, 23, 4, 0

/**
 * Get signal RdrStsIfVersMiddle_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B0h_RdrStsIfVersMiddle_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMiddle_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B0h_RdrStsIfVersMiddle_RR(buf, val) { \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrStsIfVersMiddle_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B0h_RdrStsIfVersMiddle_RR(buf) \
	SET_SRR_RR_5B0h_RdrStsIfVersMiddle_RR(buf, 0)

/**
 * Signal RdrStsIfVersMiddle_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B0h_RdrStsIfVersMiddle_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMiddle_RR raw initial value.
 */
#define START_SRR_RR_5B0h_RdrStsIfVersMiddle_RR      0

/**
 * Signal RdrStsIfVersMiddle_RR raw minimum value.
 */
#define MIN_SRR_RR_5B0h_RdrStsIfVersMiddle_RR        0

/**
 * Signal RdrStsIfVersMiddle_RR raw maximum value.
 */
#define MAX_SRR_RR_5B0h_RdrStsIfVersMiddle_RR        15

/**
 * Signal RdrStsIfVersMiddle_RR raw offset value.
 */
#define OFF_SRR_RR_5B0h_RdrStsIfVersMiddle_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B0h_RdrStsIfVersMinor_RR Signal RdrStsIfVersMinor_RR of Message SRR_RR_5B0h (0x5b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B0h
 * @{
 */

/**
 * Signal RdrStsIfVersMinor_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B0h_RdrStsIfVersMinor_RR and \ref GET_SRR_RR_5B0h_RdrStsIfVersMinor_RR instead.
 */
#define SIG_SRR_RR_5B0h_RdrStsIfVersMinor_RR        1, 0, 19, 4

/**
 * Signal RdrStsIfVersMinor_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B0h_RdrStsIfVersMinor_RR or \ref INIT_SRR_RR_5B0h instead.
 */
#define SETUP_SRR_RR_5B0h_RdrStsIfVersMinor_RR      1, 0, 19, 4, 0

/**
 * Get signal RdrStsIfVersMinor_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B0h_RdrStsIfVersMinor_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal RdrStsIfVersMinor_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B0h_RdrStsIfVersMinor_RR(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal RdrStsIfVersMinor_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B0h_RdrStsIfVersMinor_RR(buf) \
	SET_SRR_RR_5B0h_RdrStsIfVersMinor_RR(buf, 0)

/**
 * Signal RdrStsIfVersMinor_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B0h_RdrStsIfVersMinor_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrStsIfVersMinor_RR raw initial value.
 */
#define START_SRR_RR_5B0h_RdrStsIfVersMinor_RR      0

/**
 * Signal RdrStsIfVersMinor_RR raw minimum value.
 */
#define MIN_SRR_RR_5B0h_RdrStsIfVersMinor_RR        0

/**
 * Signal RdrStsIfVersMinor_RR raw maximum value.
 */
#define MAX_SRR_RR_5B0h_RdrStsIfVersMinor_RR        15

/**
 * Signal RdrStsIfVersMinor_RR raw offset value.
 */
#define OFF_SRR_RR_5B0h_RdrStsIfVersMinor_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B0h_RdrStsTiStamp_RR Signal RdrStsTiStamp_RR of Message SRR_RR_5B0h (0x5b0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B0h
 * @{
 */

/**
 * Signal RdrStsTiStamp_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B0h_RdrStsTiStamp_RR and \ref GET_SRR_RR_5B0h_RdrStsTiStamp_RR instead.
 */
#define SIG_SRR_RR_5B0h_RdrStsTiStamp_RR            1, 0, 31, 32

/**
 * Signal RdrStsTiStamp_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B0h_RdrStsTiStamp_RR or \ref INIT_SRR_RR_5B0h instead.
 */
#define SETUP_SRR_RR_5B0h_RdrStsTiStamp_RR          1, 0, 31, 32, 0

/**
 * Get signal RdrStsTiStamp_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B0h_RdrStsTiStamp_RR(buf) (0 \
	| (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24) \
	| (ulong)(+(ulong)((buf[4] >> 0) & 0xff) << 16) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrStsTiStamp_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B0h_RdrStsTiStamp_RR(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((ulong)(val) >> 24) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrStsTiStamp_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B0h_RdrStsTiStamp_RR(buf) \
	SET_SRR_RR_5B0h_RdrStsTiStamp_RR(buf, 0)

/**
 * Signal RdrStsTiStamp_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B0h_RdrStsTiStamp_RR(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal RdrStsTiStamp_RR raw initial value.
 */
#define START_SRR_RR_5B0h_RdrStsTiStamp_RR          0

/**
 * Signal RdrStsTiStamp_RR raw minimum value.
 */
#define MIN_SRR_RR_5B0h_RdrStsTiStamp_RR            0

/**
 * Signal RdrStsTiStamp_RR raw maximum value.
 */
#define MAX_SRR_RR_5B0h_RdrStsTiStamp_RR            4294967295

/**
 * Signal RdrStsTiStamp_RR raw offset value.
 */
#define OFF_SRR_RR_5B0h_RdrStsTiStamp_RR            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B1h_Genrl_SnsrLatency_RR Signal Genrl_SnsrLatency_RR of Message SRR_RR_5B1h (0x5b1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B1h
 * @{
 */

/**
 * Signal Genrl_SnsrLatency_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B1h_Genrl_SnsrLatency_RR and \ref GET_SRR_RR_5B1h_Genrl_SnsrLatency_RR instead.
 */
#define SIG_SRR_RR_5B1h_Genrl_SnsrLatency_RR        1, 0, 7, 7

/**
 * Signal Genrl_SnsrLatency_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B1h_Genrl_SnsrLatency_RR or \ref INIT_SRR_RR_5B1h instead.
 */
#define SETUP_SRR_RR_5B1h_Genrl_SnsrLatency_RR      1, 0, 7, 7, 0

/**
 * Get signal Genrl_SnsrLatency_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B1h_Genrl_SnsrLatency_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Genrl_SnsrLatency_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B1h_Genrl_SnsrLatency_RR(buf, val) { \
	buf[0] &= ~(0x7f << 1); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Genrl_SnsrLatency_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B1h_Genrl_SnsrLatency_RR(buf) \
	SET_SRR_RR_5B1h_Genrl_SnsrLatency_RR(buf, 0)

/**
 * Signal Genrl_SnsrLatency_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B1h_Genrl_SnsrLatency_RR(x, fmt) \
	((x) * fmt * 10)

/**
 * Signal Genrl_SnsrLatency_RR raw initial value.
 */
#define START_SRR_RR_5B1h_Genrl_SnsrLatency_RR      0

/**
 * Signal Genrl_SnsrLatency_RR raw minimum value.
 */
#define MIN_SRR_RR_5B1h_Genrl_SnsrLatency_RR        0

/**
 * Signal Genrl_SnsrLatency_RR raw maximum value.
 */
#define MAX_SRR_RR_5B1h_Genrl_SnsrLatency_RR        127

/**
 * Signal Genrl_SnsrLatency_RR raw offset value.
 */
#define OFF_SRR_RR_5B1h_Genrl_SnsrLatency_RR        0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B1h_RdrSysSts_RR Signal RdrSysSts_RR of Message SRR_RR_5B1h (0x5b1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B1h
 * @{
 */

/**
 * Signal RdrSysSts_RR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B1h_RdrSysSts_RR and \ref GET_SRR_RR_5B1h_RdrSysSts_RR instead.
 */
#define SIG_SRR_RR_5B1h_RdrSysSts_RR                1, 0, 15, 3

/**
 * Signal RdrSysSts_RR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B1h_RdrSysSts_RR or \ref INIT_SRR_RR_5B1h instead.
 */
#define SETUP_SRR_RR_5B1h_RdrSysSts_RR              1, 0, 15, 3, 0

/**
 * Get signal RdrSysSts_RR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B1h_RdrSysSts_RR(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 5) & 0x07) << 0) \
)

/**
 * Set signal RdrSysSts_RR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B1h_RdrSysSts_RR(buf, val) { \
	buf[1] &= ~(0x07 << 5); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal RdrSysSts_RR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B1h_RdrSysSts_RR(buf) \
	SET_SRR_RR_5B1h_RdrSysSts_RR(buf, 0)

/**
 * Signal RdrSysSts_RR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B1h_RdrSysSts_RR(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrSysSts_RR raw initial value.
 */
#define START_SRR_RR_5B1h_RdrSysSts_RR              0

/**
 * Signal RdrSysSts_RR raw minimum value.
 */
#define MIN_SRR_RR_5B1h_RdrSysSts_RR                0

/**
 * Signal RdrSysSts_RR raw maximum value.
 */
#define MAX_SRR_RR_5B1h_RdrSysSts_RR                7

/**
 * Signal RdrSysSts_RR raw offset value.
 */
#define OFF_SRR_RR_5B1h_RdrSysSts_RR                0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjChks_RR_1 Signal RdrObjChks_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjChks_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjChks_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjChks_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjChks_RR_1             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjChks_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjChks_RR_1           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjChks_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjChks_RR_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjChks_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjChks_RR_1(buf, 0)

/**
 * Signal RdrObjChks_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjChks_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjChks_RR_1           0

/**
 * Signal RdrObjChks_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjChks_RR_1             0

/**
 * Signal RdrObjChks_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjChks_RR_1             255

/**
 * Signal RdrObjChks_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjChks_RR_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjCntr_RR_1 Signal RdrObjCntr_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjCntr_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjCntr_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjCntr_RR_1             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjCntr_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjCntr_RR_1           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjCntr_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjCntr_RR_1(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjCntr_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjCntr_RR_1(buf, 0)

/**
 * Signal RdrObjCntr_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjCntr_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjCntr_RR_1           0

/**
 * Signal RdrObjCntr_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjCntr_RR_1             0

/**
 * Signal RdrObjCntr_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjCntr_RR_1             15

/**
 * Signal RdrObjCntr_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjCntr_RR_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjAy_RR_1 Signal RdrObjAy_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjAy_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjAy_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjAy_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjAy_RR_1               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjAy_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjAy_RR_1             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjAy_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjAy_RR_1(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjAy_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjAy_RR_1(buf, 0)

/**
 * Signal RdrObjAy_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjAy_RR_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjAy_RR_1             0

/**
 * Signal RdrObjAy_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjAy_RR_1               0

/**
 * Signal RdrObjAy_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjAy_RR_1               128

/**
 * Signal RdrObjAy_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjAy_RR_1               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjAx_RR_1 Signal RdrObjAx_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjAx_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjAx_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjAx_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjAx_RR_1               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjAx_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjAx_RR_1             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjAx_RR_1(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjAx_RR_1(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjAx_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjAx_RR_1(buf, 0)

/**
 * Signal RdrObjAx_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjAx_RR_1(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjAx_RR_1             0

/**
 * Signal RdrObjAx_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjAx_RR_1               0

/**
 * Signal RdrObjAx_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjAx_RR_1               512

/**
 * Signal RdrObjAx_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjAx_RR_1               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjCoast_RR_1 Signal RdrObjCoast_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjCoast_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjCoast_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjCoast_RR_1            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjCoast_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjCoast_RR_1          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjCoast_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjCoast_RR_1(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjCoast_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjCoast_RR_1(buf, 0)

/**
 * Signal RdrObjCoast_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjCoast_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjCoast_RR_1          0

/**
 * Signal RdrObjCoast_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjCoast_RR_1            0

/**
 * Signal RdrObjCoast_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjCoast_RR_1            1

/**
 * Signal RdrObjCoast_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjCoast_RR_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjConf_RR_1 Signal RdrObjConf_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjConf_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjConf_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjConf_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjConf_RR_1             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjConf_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjConf_RR_1           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjConf_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjConf_RR_1(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjConf_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjConf_RR_1(buf, 0)

/**
 * Signal RdrObjConf_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjConf_RR_1(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjConf_RR_1           0

/**
 * Signal RdrObjConf_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjConf_RR_1             0

/**
 * Signal RdrObjConf_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjConf_RR_1             14

/**
 * Signal RdrObjConf_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjConf_RR_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjMtnPat_RR_1 Signal RdrObjMtnPat_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjMtnPat_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjMtnPat_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjMtnPat_RR_1           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjMtnPat_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjMtnPat_RR_1         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjMtnPat_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjMtnPat_RR_1(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjMtnPat_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjMtnPat_RR_1(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjMtnPat_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjMtnPat_RR_1         0

/**
 * Signal RdrObjMtnPat_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjMtnPat_RR_1           0

/**
 * Signal RdrObjMtnPat_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjMtnPat_RR_1           3

/**
 * Signal RdrObjMtnPat_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjMtnPat_RR_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjID_RR_1 Signal RdrObjID_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjID_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjID_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjID_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjID_RR_1               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjID_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjID_RR_1             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjID_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjID_RR_1(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjID_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjID_RR_1(buf, 0)

/**
 * Signal RdrObjID_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjID_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjID_RR_1             0

/**
 * Signal RdrObjID_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjID_RR_1               0

/**
 * Signal RdrObjID_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjID_RR_1               255

/**
 * Signal RdrObjID_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjID_RR_1               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjTyp_RR_1 Signal RdrObjTyp_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjTyp_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjTyp_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjTyp_RR_1              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjTyp_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjTyp_RR_1            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjTyp_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjTyp_RR_1(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjTyp_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjTyp_RR_1(buf, 0)

/**
 * Signal RdrObjTyp_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjTyp_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjTyp_RR_1            0

/**
 * Signal RdrObjTyp_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjTyp_RR_1              0

/**
 * Signal RdrObjTyp_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjTyp_RR_1              3

/**
 * Signal RdrObjTyp_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjTyp_RR_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B2h_RdrObjDy_RR_1 Signal RdrObjDy_RR_1 of Message SRR_RR_5B2h (0x5b2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B2h
 * @{
 */

/**
 * Signal RdrObjDy_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B2h_RdrObjDy_RR_1 and \ref GET_SRR_RR_5B2h_RdrObjDy_RR_1 instead.
 */
#define SIG_SRR_RR_5B2h_RdrObjDy_RR_1               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B2h_RdrObjDy_RR_1 or \ref INIT_SRR_RR_5B2h instead.
 */
#define SETUP_SRR_RR_5B2h_RdrObjDy_RR_1             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B2h_RdrObjDy_RR_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B2h_RdrObjDy_RR_1(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B2h_RdrObjDy_RR_1(buf) \
	SET_SRR_RR_5B2h_RdrObjDy_RR_1(buf, 0)

/**
 * Signal RdrObjDy_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B2h_RdrObjDy_RR_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_1 raw initial value.
 */
#define START_SRR_RR_5B2h_RdrObjDy_RR_1             0

/**
 * Signal RdrObjDy_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B2h_RdrObjDy_RR_1               0

/**
 * Signal RdrObjDy_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B2h_RdrObjDy_RR_1               2046

/**
 * Signal RdrObjDy_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B2h_RdrObjDy_RR_1               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjChks2_RR_1 Signal RdrObjChks2_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjChks2_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjChks2_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjChks2_RR_1            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjChks2_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjChks2_RR_1          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjChks2_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjChks2_RR_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjChks2_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjChks2_RR_1(buf, 0)

/**
 * Signal RdrObjChks2_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjChks2_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjChks2_RR_1          0

/**
 * Signal RdrObjChks2_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjChks2_RR_1            0

/**
 * Signal RdrObjChks2_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjChks2_RR_1            255

/**
 * Signal RdrObjChks2_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjChks2_RR_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjDx_RR_1 Signal RdrObjDx_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjDx_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjDx_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjDx_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjDx_RR_1               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjDx_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjDx_RR_1             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjDx_RR_1(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjDx_RR_1(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjDx_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjDx_RR_1(buf, 0)

/**
 * Signal RdrObjDx_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjDx_RR_1(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjDx_RR_1             0

/**
 * Signal RdrObjDx_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjDx_RR_1               0

/**
 * Signal RdrObjDx_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjDx_RR_1               2540

/**
 * Signal RdrObjDx_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjDx_RR_1               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjTiAlv_RR_1 Signal RdrObjTiAlv_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjTiAlv_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjTiAlv_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjTiAlv_RR_1            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjTiAlv_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjTiAlv_RR_1          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjTiAlv_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjTiAlv_RR_1(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjTiAlv_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjTiAlv_RR_1(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjTiAlv_RR_1(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjTiAlv_RR_1          0

/**
 * Signal RdrObjTiAlv_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjTiAlv_RR_1            0

/**
 * Signal RdrObjTiAlv_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjTiAlv_RR_1            127

/**
 * Signal RdrObjTiAlv_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjTiAlv_RR_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjVy_RR_1 Signal RdrObjVy_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjVy_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjVy_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjVy_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjVy_RR_1               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjVy_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjVy_RR_1             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjVy_RR_1(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjVy_RR_1(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjVy_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjVy_RR_1(buf, 0)

/**
 * Signal RdrObjVy_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjVy_RR_1(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjVy_RR_1             0

/**
 * Signal RdrObjVy_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjVy_RR_1               0

/**
 * Signal RdrObjVy_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjVy_RR_1               1023

/**
 * Signal RdrObjVy_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjVy_RR_1               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjVx_RR_1 Signal RdrObjVx_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjVx_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjVx_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjVx_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjVx_RR_1               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjVx_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjVx_RR_1             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjVx_RR_1(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjVx_RR_1(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjVx_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjVx_RR_1(buf, 0)

/**
 * Signal RdrObjVx_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjVx_RR_1(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjVx_RR_1             0

/**
 * Signal RdrObjVx_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjVx_RR_1               0

/**
 * Signal RdrObjVx_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjVx_RR_1               1023

/**
 * Signal RdrObjVx_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjVx_RR_1               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjWth_RR_1 Signal RdrObjWth_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjWth_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjWth_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjWth_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjWth_RR_1              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjWth_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjWth_RR_1            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjWth_RR_1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjWth_RR_1(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjWth_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjWth_RR_1(buf, 0)

/**
 * Signal RdrObjWth_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjWth_RR_1(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjWth_RR_1            0

/**
 * Signal RdrObjWth_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjWth_RR_1              0

/**
 * Signal RdrObjWth_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjWth_RR_1              50

/**
 * Signal RdrObjWth_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjWth_RR_1              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B3h_RdrObjHeading_RR_1 Signal RdrObjHeading_RR_1 of Message SRR_RR_5B3h (0x5b3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B3h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B3h_RdrObjHeading_RR_1 and \ref GET_SRR_RR_5B3h_RdrObjHeading_RR_1 instead.
 */
#define SIG_SRR_RR_5B3h_RdrObjHeading_RR_1          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B3h_RdrObjHeading_RR_1 or \ref INIT_SRR_RR_5B3h instead.
 */
#define SETUP_SRR_RR_5B3h_RdrObjHeading_RR_1        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B3h_RdrObjHeading_RR_1(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B3h_RdrObjHeading_RR_1(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B3h_RdrObjHeading_RR_1(buf) \
	SET_SRR_RR_5B3h_RdrObjHeading_RR_1(buf, 0)

/**
 * Signal RdrObjHeading_RR_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B3h_RdrObjHeading_RR_1(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_1 raw initial value.
 */
#define START_SRR_RR_5B3h_RdrObjHeading_RR_1        0

/**
 * Signal RdrObjHeading_RR_1 raw minimum value.
 */
#define MIN_SRR_RR_5B3h_RdrObjHeading_RR_1          0

/**
 * Signal RdrObjHeading_RR_1 raw maximum value.
 */
#define MAX_SRR_RR_5B3h_RdrObjHeading_RR_1          360

/**
 * Signal RdrObjHeading_RR_1 raw offset value.
 */
#define OFF_SRR_RR_5B3h_RdrObjHeading_RR_1          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjChks_RR_2 Signal RdrObjChks_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjChks_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjChks_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjChks_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjChks_RR_2             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjChks_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjChks_RR_2           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjChks_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjChks_RR_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjChks_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjChks_RR_2(buf, 0)

/**
 * Signal RdrObjChks_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjChks_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjChks_RR_2           0

/**
 * Signal RdrObjChks_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjChks_RR_2             0

/**
 * Signal RdrObjChks_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjChks_RR_2             255

/**
 * Signal RdrObjChks_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjChks_RR_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjCntr_RR_2 Signal RdrObjCntr_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjCntr_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjCntr_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjCntr_RR_2             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjCntr_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjCntr_RR_2           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjCntr_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjCntr_RR_2(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjCntr_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjCntr_RR_2(buf, 0)

/**
 * Signal RdrObjCntr_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjCntr_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjCntr_RR_2           0

/**
 * Signal RdrObjCntr_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjCntr_RR_2             0

/**
 * Signal RdrObjCntr_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjCntr_RR_2             15

/**
 * Signal RdrObjCntr_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjCntr_RR_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjAy_RR_2 Signal RdrObjAy_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjAy_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjAy_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjAy_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjAy_RR_2               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjAy_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjAy_RR_2             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjAy_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjAy_RR_2(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjAy_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjAy_RR_2(buf, 0)

/**
 * Signal RdrObjAy_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjAy_RR_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjAy_RR_2             0

/**
 * Signal RdrObjAy_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjAy_RR_2               0

/**
 * Signal RdrObjAy_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjAy_RR_2               128

/**
 * Signal RdrObjAy_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjAy_RR_2               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjAx_RR_2 Signal RdrObjAx_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjAx_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjAx_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjAx_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjAx_RR_2               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjAx_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjAx_RR_2             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjAx_RR_2(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjAx_RR_2(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjAx_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjAx_RR_2(buf, 0)

/**
 * Signal RdrObjAx_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjAx_RR_2(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjAx_RR_2             0

/**
 * Signal RdrObjAx_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjAx_RR_2               0

/**
 * Signal RdrObjAx_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjAx_RR_2               512

/**
 * Signal RdrObjAx_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjAx_RR_2               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjCoast_RR_2 Signal RdrObjCoast_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjCoast_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjCoast_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjCoast_RR_2            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjCoast_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjCoast_RR_2          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjCoast_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjCoast_RR_2(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjCoast_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjCoast_RR_2(buf, 0)

/**
 * Signal RdrObjCoast_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjCoast_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjCoast_RR_2          0

/**
 * Signal RdrObjCoast_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjCoast_RR_2            0

/**
 * Signal RdrObjCoast_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjCoast_RR_2            1

/**
 * Signal RdrObjCoast_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjCoast_RR_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjConf_RR_2 Signal RdrObjConf_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjConf_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjConf_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjConf_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjConf_RR_2             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjConf_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjConf_RR_2           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjConf_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjConf_RR_2(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjConf_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjConf_RR_2(buf, 0)

/**
 * Signal RdrObjConf_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjConf_RR_2(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjConf_RR_2           0

/**
 * Signal RdrObjConf_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjConf_RR_2             0

/**
 * Signal RdrObjConf_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjConf_RR_2             14

/**
 * Signal RdrObjConf_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjConf_RR_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjMtnPat_RR_2 Signal RdrObjMtnPat_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjMtnPat_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjMtnPat_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjMtnPat_RR_2           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjMtnPat_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjMtnPat_RR_2         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjMtnPat_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjMtnPat_RR_2(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjMtnPat_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjMtnPat_RR_2(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjMtnPat_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjMtnPat_RR_2         0

/**
 * Signal RdrObjMtnPat_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjMtnPat_RR_2           0

/**
 * Signal RdrObjMtnPat_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjMtnPat_RR_2           3

/**
 * Signal RdrObjMtnPat_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjMtnPat_RR_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjID_RR_2 Signal RdrObjID_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjID_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjID_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjID_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjID_RR_2               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjID_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjID_RR_2             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjID_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjID_RR_2(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjID_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjID_RR_2(buf, 0)

/**
 * Signal RdrObjID_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjID_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjID_RR_2             0

/**
 * Signal RdrObjID_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjID_RR_2               0

/**
 * Signal RdrObjID_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjID_RR_2               255

/**
 * Signal RdrObjID_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjID_RR_2               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjTyp_RR_2 Signal RdrObjTyp_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjTyp_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjTyp_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjTyp_RR_2              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjTyp_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjTyp_RR_2            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjTyp_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjTyp_RR_2(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjTyp_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjTyp_RR_2(buf, 0)

/**
 * Signal RdrObjTyp_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjTyp_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjTyp_RR_2            0

/**
 * Signal RdrObjTyp_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjTyp_RR_2              0

/**
 * Signal RdrObjTyp_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjTyp_RR_2              3

/**
 * Signal RdrObjTyp_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjTyp_RR_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B4h_RdrObjDy_RR_2 Signal RdrObjDy_RR_2 of Message SRR_RR_5B4h (0x5b4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B4h
 * @{
 */

/**
 * Signal RdrObjDy_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B4h_RdrObjDy_RR_2 and \ref GET_SRR_RR_5B4h_RdrObjDy_RR_2 instead.
 */
#define SIG_SRR_RR_5B4h_RdrObjDy_RR_2               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B4h_RdrObjDy_RR_2 or \ref INIT_SRR_RR_5B4h instead.
 */
#define SETUP_SRR_RR_5B4h_RdrObjDy_RR_2             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B4h_RdrObjDy_RR_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B4h_RdrObjDy_RR_2(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B4h_RdrObjDy_RR_2(buf) \
	SET_SRR_RR_5B4h_RdrObjDy_RR_2(buf, 0)

/**
 * Signal RdrObjDy_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B4h_RdrObjDy_RR_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_2 raw initial value.
 */
#define START_SRR_RR_5B4h_RdrObjDy_RR_2             0

/**
 * Signal RdrObjDy_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B4h_RdrObjDy_RR_2               0

/**
 * Signal RdrObjDy_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B4h_RdrObjDy_RR_2               2046

/**
 * Signal RdrObjDy_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B4h_RdrObjDy_RR_2               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjChks2_RR_2 Signal RdrObjChks2_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjChks2_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjChks2_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjChks2_RR_2            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjChks2_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjChks2_RR_2          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjChks2_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjChks2_RR_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjChks2_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjChks2_RR_2(buf, 0)

/**
 * Signal RdrObjChks2_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjChks2_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjChks2_RR_2          0

/**
 * Signal RdrObjChks2_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjChks2_RR_2            0

/**
 * Signal RdrObjChks2_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjChks2_RR_2            255

/**
 * Signal RdrObjChks2_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjChks2_RR_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjDx_RR_2 Signal RdrObjDx_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjDx_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjDx_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjDx_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjDx_RR_2               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjDx_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjDx_RR_2             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjDx_RR_2(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjDx_RR_2(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjDx_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjDx_RR_2(buf, 0)

/**
 * Signal RdrObjDx_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjDx_RR_2(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjDx_RR_2             0

/**
 * Signal RdrObjDx_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjDx_RR_2               0

/**
 * Signal RdrObjDx_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjDx_RR_2               2540

/**
 * Signal RdrObjDx_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjDx_RR_2               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjTiAlv_RR_2 Signal RdrObjTiAlv_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjTiAlv_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjTiAlv_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjTiAlv_RR_2            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjTiAlv_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjTiAlv_RR_2          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjTiAlv_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjTiAlv_RR_2(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjTiAlv_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjTiAlv_RR_2(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjTiAlv_RR_2(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjTiAlv_RR_2          0

/**
 * Signal RdrObjTiAlv_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjTiAlv_RR_2            0

/**
 * Signal RdrObjTiAlv_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjTiAlv_RR_2            127

/**
 * Signal RdrObjTiAlv_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjTiAlv_RR_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjVy_RR_2 Signal RdrObjVy_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjVy_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjVy_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjVy_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjVy_RR_2               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjVy_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjVy_RR_2             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjVy_RR_2(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjVy_RR_2(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjVy_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjVy_RR_2(buf, 0)

/**
 * Signal RdrObjVy_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjVy_RR_2(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjVy_RR_2             0

/**
 * Signal RdrObjVy_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjVy_RR_2               0

/**
 * Signal RdrObjVy_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjVy_RR_2               1023

/**
 * Signal RdrObjVy_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjVy_RR_2               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjVx_RR_2 Signal RdrObjVx_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjVx_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjVx_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjVx_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjVx_RR_2               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjVx_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjVx_RR_2             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjVx_RR_2(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjVx_RR_2(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjVx_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjVx_RR_2(buf, 0)

/**
 * Signal RdrObjVx_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjVx_RR_2(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjVx_RR_2             0

/**
 * Signal RdrObjVx_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjVx_RR_2               0

/**
 * Signal RdrObjVx_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjVx_RR_2               1023

/**
 * Signal RdrObjVx_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjVx_RR_2               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjWth_RR_2 Signal RdrObjWth_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjWth_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjWth_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjWth_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjWth_RR_2              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjWth_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjWth_RR_2            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjWth_RR_2(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjWth_RR_2(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjWth_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjWth_RR_2(buf, 0)

/**
 * Signal RdrObjWth_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjWth_RR_2(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjWth_RR_2            0

/**
 * Signal RdrObjWth_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjWth_RR_2              0

/**
 * Signal RdrObjWth_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjWth_RR_2              50

/**
 * Signal RdrObjWth_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjWth_RR_2              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B5h_RdrObjHeading_RR_2 Signal RdrObjHeading_RR_2 of Message SRR_RR_5B5h (0x5b5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B5h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B5h_RdrObjHeading_RR_2 and \ref GET_SRR_RR_5B5h_RdrObjHeading_RR_2 instead.
 */
#define SIG_SRR_RR_5B5h_RdrObjHeading_RR_2          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B5h_RdrObjHeading_RR_2 or \ref INIT_SRR_RR_5B5h instead.
 */
#define SETUP_SRR_RR_5B5h_RdrObjHeading_RR_2        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B5h_RdrObjHeading_RR_2(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B5h_RdrObjHeading_RR_2(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B5h_RdrObjHeading_RR_2(buf) \
	SET_SRR_RR_5B5h_RdrObjHeading_RR_2(buf, 0)

/**
 * Signal RdrObjHeading_RR_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B5h_RdrObjHeading_RR_2(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_2 raw initial value.
 */
#define START_SRR_RR_5B5h_RdrObjHeading_RR_2        0

/**
 * Signal RdrObjHeading_RR_2 raw minimum value.
 */
#define MIN_SRR_RR_5B5h_RdrObjHeading_RR_2          0

/**
 * Signal RdrObjHeading_RR_2 raw maximum value.
 */
#define MAX_SRR_RR_5B5h_RdrObjHeading_RR_2          360

/**
 * Signal RdrObjHeading_RR_2 raw offset value.
 */
#define OFF_SRR_RR_5B5h_RdrObjHeading_RR_2          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjChks_RR_3 Signal RdrObjChks_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjChks_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjChks_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjChks_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjChks_RR_3             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjChks_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjChks_RR_3           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjChks_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjChks_RR_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjChks_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjChks_RR_3(buf, 0)

/**
 * Signal RdrObjChks_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjChks_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjChks_RR_3           0

/**
 * Signal RdrObjChks_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjChks_RR_3             0

/**
 * Signal RdrObjChks_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjChks_RR_3             255

/**
 * Signal RdrObjChks_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjChks_RR_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjCntr_RR_3 Signal RdrObjCntr_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjCntr_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjCntr_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjCntr_RR_3             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjCntr_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjCntr_RR_3           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjCntr_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjCntr_RR_3(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjCntr_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjCntr_RR_3(buf, 0)

/**
 * Signal RdrObjCntr_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjCntr_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjCntr_RR_3           0

/**
 * Signal RdrObjCntr_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjCntr_RR_3             0

/**
 * Signal RdrObjCntr_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjCntr_RR_3             15

/**
 * Signal RdrObjCntr_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjCntr_RR_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjAy_RR_3 Signal RdrObjAy_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjAy_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjAy_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjAy_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjAy_RR_3               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjAy_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjAy_RR_3             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjAy_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjAy_RR_3(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjAy_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjAy_RR_3(buf, 0)

/**
 * Signal RdrObjAy_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjAy_RR_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjAy_RR_3             0

/**
 * Signal RdrObjAy_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjAy_RR_3               0

/**
 * Signal RdrObjAy_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjAy_RR_3               128

/**
 * Signal RdrObjAy_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjAy_RR_3               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjAx_RR_3 Signal RdrObjAx_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjAx_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjAx_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjAx_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjAx_RR_3               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjAx_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjAx_RR_3             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjAx_RR_3(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjAx_RR_3(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjAx_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjAx_RR_3(buf, 0)

/**
 * Signal RdrObjAx_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjAx_RR_3(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjAx_RR_3             0

/**
 * Signal RdrObjAx_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjAx_RR_3               0

/**
 * Signal RdrObjAx_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjAx_RR_3               512

/**
 * Signal RdrObjAx_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjAx_RR_3               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjCoast_RR_3 Signal RdrObjCoast_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjCoast_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjCoast_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjCoast_RR_3            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjCoast_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjCoast_RR_3          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjCoast_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjCoast_RR_3(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjCoast_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjCoast_RR_3(buf, 0)

/**
 * Signal RdrObjCoast_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjCoast_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjCoast_RR_3          0

/**
 * Signal RdrObjCoast_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjCoast_RR_3            0

/**
 * Signal RdrObjCoast_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjCoast_RR_3            1

/**
 * Signal RdrObjCoast_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjCoast_RR_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjConf_RR_3 Signal RdrObjConf_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjConf_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjConf_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjConf_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjConf_RR_3             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjConf_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjConf_RR_3           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjConf_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjConf_RR_3(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjConf_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjConf_RR_3(buf, 0)

/**
 * Signal RdrObjConf_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjConf_RR_3(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjConf_RR_3           0

/**
 * Signal RdrObjConf_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjConf_RR_3             0

/**
 * Signal RdrObjConf_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjConf_RR_3             14

/**
 * Signal RdrObjConf_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjConf_RR_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjMtnPat_RR_3 Signal RdrObjMtnPat_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjMtnPat_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjMtnPat_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjMtnPat_RR_3           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjMtnPat_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjMtnPat_RR_3         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjMtnPat_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjMtnPat_RR_3(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjMtnPat_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjMtnPat_RR_3(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjMtnPat_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjMtnPat_RR_3         0

/**
 * Signal RdrObjMtnPat_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjMtnPat_RR_3           0

/**
 * Signal RdrObjMtnPat_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjMtnPat_RR_3           3

/**
 * Signal RdrObjMtnPat_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjMtnPat_RR_3           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjID_RR_3 Signal RdrObjID_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjID_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjID_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjID_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjID_RR_3               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjID_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjID_RR_3             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjID_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjID_RR_3(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjID_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjID_RR_3(buf, 0)

/**
 * Signal RdrObjID_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjID_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjID_RR_3             0

/**
 * Signal RdrObjID_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjID_RR_3               0

/**
 * Signal RdrObjID_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjID_RR_3               255

/**
 * Signal RdrObjID_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjID_RR_3               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjTyp_RR_3 Signal RdrObjTyp_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjTyp_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjTyp_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjTyp_RR_3              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjTyp_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjTyp_RR_3            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjTyp_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjTyp_RR_3(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjTyp_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjTyp_RR_3(buf, 0)

/**
 * Signal RdrObjTyp_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjTyp_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjTyp_RR_3            0

/**
 * Signal RdrObjTyp_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjTyp_RR_3              0

/**
 * Signal RdrObjTyp_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjTyp_RR_3              3

/**
 * Signal RdrObjTyp_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjTyp_RR_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B6h_RdrObjDy_RR_3 Signal RdrObjDy_RR_3 of Message SRR_RR_5B6h (0x5b6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B6h
 * @{
 */

/**
 * Signal RdrObjDy_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B6h_RdrObjDy_RR_3 and \ref GET_SRR_RR_5B6h_RdrObjDy_RR_3 instead.
 */
#define SIG_SRR_RR_5B6h_RdrObjDy_RR_3               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B6h_RdrObjDy_RR_3 or \ref INIT_SRR_RR_5B6h instead.
 */
#define SETUP_SRR_RR_5B6h_RdrObjDy_RR_3             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B6h_RdrObjDy_RR_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B6h_RdrObjDy_RR_3(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B6h_RdrObjDy_RR_3(buf) \
	SET_SRR_RR_5B6h_RdrObjDy_RR_3(buf, 0)

/**
 * Signal RdrObjDy_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B6h_RdrObjDy_RR_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_3 raw initial value.
 */
#define START_SRR_RR_5B6h_RdrObjDy_RR_3             0

/**
 * Signal RdrObjDy_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B6h_RdrObjDy_RR_3               0

/**
 * Signal RdrObjDy_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B6h_RdrObjDy_RR_3               2046

/**
 * Signal RdrObjDy_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B6h_RdrObjDy_RR_3               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjChks2_RR_3 Signal RdrObjChks2_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjChks2_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjChks2_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjChks2_RR_3            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjChks2_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjChks2_RR_3          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjChks2_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjChks2_RR_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjChks2_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjChks2_RR_3(buf, 0)

/**
 * Signal RdrObjChks2_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjChks2_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjChks2_RR_3          0

/**
 * Signal RdrObjChks2_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjChks2_RR_3            0

/**
 * Signal RdrObjChks2_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjChks2_RR_3            255

/**
 * Signal RdrObjChks2_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjChks2_RR_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjDx_RR_3 Signal RdrObjDx_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjDx_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjDx_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjDx_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjDx_RR_3               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjDx_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjDx_RR_3             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjDx_RR_3(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjDx_RR_3(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjDx_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjDx_RR_3(buf, 0)

/**
 * Signal RdrObjDx_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjDx_RR_3(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjDx_RR_3             0

/**
 * Signal RdrObjDx_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjDx_RR_3               0

/**
 * Signal RdrObjDx_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjDx_RR_3               2540

/**
 * Signal RdrObjDx_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjDx_RR_3               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjTiAlv_RR_3 Signal RdrObjTiAlv_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjTiAlv_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjTiAlv_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjTiAlv_RR_3            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjTiAlv_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjTiAlv_RR_3          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjTiAlv_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjTiAlv_RR_3(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjTiAlv_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjTiAlv_RR_3(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjTiAlv_RR_3(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjTiAlv_RR_3          0

/**
 * Signal RdrObjTiAlv_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjTiAlv_RR_3            0

/**
 * Signal RdrObjTiAlv_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjTiAlv_RR_3            127

/**
 * Signal RdrObjTiAlv_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjTiAlv_RR_3            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjVy_RR_3 Signal RdrObjVy_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjVy_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjVy_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjVy_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjVy_RR_3               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjVy_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjVy_RR_3             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjVy_RR_3(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjVy_RR_3(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjVy_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjVy_RR_3(buf, 0)

/**
 * Signal RdrObjVy_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjVy_RR_3(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjVy_RR_3             0

/**
 * Signal RdrObjVy_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjVy_RR_3               0

/**
 * Signal RdrObjVy_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjVy_RR_3               1023

/**
 * Signal RdrObjVy_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjVy_RR_3               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjVx_RR_3 Signal RdrObjVx_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjVx_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjVx_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjVx_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjVx_RR_3               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjVx_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjVx_RR_3             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjVx_RR_3(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjVx_RR_3(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjVx_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjVx_RR_3(buf, 0)

/**
 * Signal RdrObjVx_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjVx_RR_3(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjVx_RR_3             0

/**
 * Signal RdrObjVx_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjVx_RR_3               0

/**
 * Signal RdrObjVx_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjVx_RR_3               1023

/**
 * Signal RdrObjVx_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjVx_RR_3               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjWth_RR_3 Signal RdrObjWth_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjWth_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjWth_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjWth_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjWth_RR_3              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjWth_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjWth_RR_3            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjWth_RR_3(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjWth_RR_3(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjWth_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjWth_RR_3(buf, 0)

/**
 * Signal RdrObjWth_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjWth_RR_3(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjWth_RR_3            0

/**
 * Signal RdrObjWth_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjWth_RR_3              0

/**
 * Signal RdrObjWth_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjWth_RR_3              50

/**
 * Signal RdrObjWth_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjWth_RR_3              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B7h_RdrObjHeading_RR_3 Signal RdrObjHeading_RR_3 of Message SRR_RR_5B7h (0x5b7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B7h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B7h_RdrObjHeading_RR_3 and \ref GET_SRR_RR_5B7h_RdrObjHeading_RR_3 instead.
 */
#define SIG_SRR_RR_5B7h_RdrObjHeading_RR_3          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B7h_RdrObjHeading_RR_3 or \ref INIT_SRR_RR_5B7h instead.
 */
#define SETUP_SRR_RR_5B7h_RdrObjHeading_RR_3        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B7h_RdrObjHeading_RR_3(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B7h_RdrObjHeading_RR_3(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B7h_RdrObjHeading_RR_3(buf) \
	SET_SRR_RR_5B7h_RdrObjHeading_RR_3(buf, 0)

/**
 * Signal RdrObjHeading_RR_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B7h_RdrObjHeading_RR_3(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_3 raw initial value.
 */
#define START_SRR_RR_5B7h_RdrObjHeading_RR_3        0

/**
 * Signal RdrObjHeading_RR_3 raw minimum value.
 */
#define MIN_SRR_RR_5B7h_RdrObjHeading_RR_3          0

/**
 * Signal RdrObjHeading_RR_3 raw maximum value.
 */
#define MAX_SRR_RR_5B7h_RdrObjHeading_RR_3          360

/**
 * Signal RdrObjHeading_RR_3 raw offset value.
 */
#define OFF_SRR_RR_5B7h_RdrObjHeading_RR_3          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjChks_RR_4 Signal RdrObjChks_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjChks_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjChks_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjChks_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjChks_RR_4             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjChks_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjChks_RR_4           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjChks_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjChks_RR_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjChks_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjChks_RR_4(buf, 0)

/**
 * Signal RdrObjChks_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjChks_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjChks_RR_4           0

/**
 * Signal RdrObjChks_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjChks_RR_4             0

/**
 * Signal RdrObjChks_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjChks_RR_4             255

/**
 * Signal RdrObjChks_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjChks_RR_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjCntr_RR_4 Signal RdrObjCntr_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjCntr_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjCntr_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjCntr_RR_4             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjCntr_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjCntr_RR_4           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjCntr_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjCntr_RR_4(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjCntr_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjCntr_RR_4(buf, 0)

/**
 * Signal RdrObjCntr_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjCntr_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjCntr_RR_4           0

/**
 * Signal RdrObjCntr_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjCntr_RR_4             0

/**
 * Signal RdrObjCntr_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjCntr_RR_4             15

/**
 * Signal RdrObjCntr_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjCntr_RR_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjAy_RR_4 Signal RdrObjAy_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjAy_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjAy_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjAy_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjAy_RR_4               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjAy_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjAy_RR_4             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjAy_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjAy_RR_4(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjAy_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjAy_RR_4(buf, 0)

/**
 * Signal RdrObjAy_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjAy_RR_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjAy_RR_4             0

/**
 * Signal RdrObjAy_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjAy_RR_4               0

/**
 * Signal RdrObjAy_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjAy_RR_4               128

/**
 * Signal RdrObjAy_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjAy_RR_4               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjAx_RR_4 Signal RdrObjAx_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjAx_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjAx_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjAx_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjAx_RR_4               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjAx_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjAx_RR_4             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjAx_RR_4(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjAx_RR_4(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjAx_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjAx_RR_4(buf, 0)

/**
 * Signal RdrObjAx_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjAx_RR_4(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjAx_RR_4             0

/**
 * Signal RdrObjAx_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjAx_RR_4               0

/**
 * Signal RdrObjAx_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjAx_RR_4               512

/**
 * Signal RdrObjAx_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjAx_RR_4               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjCoast_RR_4 Signal RdrObjCoast_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjCoast_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjCoast_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjCoast_RR_4            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjCoast_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjCoast_RR_4          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjCoast_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjCoast_RR_4(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjCoast_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjCoast_RR_4(buf, 0)

/**
 * Signal RdrObjCoast_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjCoast_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjCoast_RR_4          0

/**
 * Signal RdrObjCoast_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjCoast_RR_4            0

/**
 * Signal RdrObjCoast_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjCoast_RR_4            1

/**
 * Signal RdrObjCoast_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjCoast_RR_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjConf_RR_4 Signal RdrObjConf_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjConf_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjConf_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjConf_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjConf_RR_4             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjConf_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjConf_RR_4           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjConf_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjConf_RR_4(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjConf_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjConf_RR_4(buf, 0)

/**
 * Signal RdrObjConf_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjConf_RR_4(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjConf_RR_4           0

/**
 * Signal RdrObjConf_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjConf_RR_4             0

/**
 * Signal RdrObjConf_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjConf_RR_4             14

/**
 * Signal RdrObjConf_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjConf_RR_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjMtnPat_RR_4 Signal RdrObjMtnPat_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjMtnPat_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjMtnPat_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjMtnPat_RR_4           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjMtnPat_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjMtnPat_RR_4         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjMtnPat_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjMtnPat_RR_4(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjMtnPat_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjMtnPat_RR_4(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjMtnPat_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjMtnPat_RR_4         0

/**
 * Signal RdrObjMtnPat_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjMtnPat_RR_4           0

/**
 * Signal RdrObjMtnPat_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjMtnPat_RR_4           3

/**
 * Signal RdrObjMtnPat_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjMtnPat_RR_4           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjID_RR_4 Signal RdrObjID_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjID_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjID_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjID_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjID_RR_4               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjID_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjID_RR_4             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjID_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjID_RR_4(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjID_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjID_RR_4(buf, 0)

/**
 * Signal RdrObjID_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjID_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjID_RR_4             0

/**
 * Signal RdrObjID_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjID_RR_4               0

/**
 * Signal RdrObjID_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjID_RR_4               255

/**
 * Signal RdrObjID_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjID_RR_4               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjTyp_RR_4 Signal RdrObjTyp_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjTyp_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjTyp_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjTyp_RR_4              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjTyp_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjTyp_RR_4            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjTyp_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjTyp_RR_4(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjTyp_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjTyp_RR_4(buf, 0)

/**
 * Signal RdrObjTyp_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjTyp_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjTyp_RR_4            0

/**
 * Signal RdrObjTyp_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjTyp_RR_4              0

/**
 * Signal RdrObjTyp_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjTyp_RR_4              3

/**
 * Signal RdrObjTyp_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjTyp_RR_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B8h_RdrObjDy_RR_4 Signal RdrObjDy_RR_4 of Message SRR_RR_5B8h (0x5b8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B8h
 * @{
 */

/**
 * Signal RdrObjDy_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B8h_RdrObjDy_RR_4 and \ref GET_SRR_RR_5B8h_RdrObjDy_RR_4 instead.
 */
#define SIG_SRR_RR_5B8h_RdrObjDy_RR_4               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B8h_RdrObjDy_RR_4 or \ref INIT_SRR_RR_5B8h instead.
 */
#define SETUP_SRR_RR_5B8h_RdrObjDy_RR_4             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B8h_RdrObjDy_RR_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B8h_RdrObjDy_RR_4(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B8h_RdrObjDy_RR_4(buf) \
	SET_SRR_RR_5B8h_RdrObjDy_RR_4(buf, 0)

/**
 * Signal RdrObjDy_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B8h_RdrObjDy_RR_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_4 raw initial value.
 */
#define START_SRR_RR_5B8h_RdrObjDy_RR_4             0

/**
 * Signal RdrObjDy_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B8h_RdrObjDy_RR_4               0

/**
 * Signal RdrObjDy_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B8h_RdrObjDy_RR_4               2046

/**
 * Signal RdrObjDy_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B8h_RdrObjDy_RR_4               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjChks2_RR_4 Signal RdrObjChks2_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjChks2_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjChks2_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjChks2_RR_4            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjChks2_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjChks2_RR_4          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjChks2_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjChks2_RR_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjChks2_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjChks2_RR_4(buf, 0)

/**
 * Signal RdrObjChks2_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjChks2_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjChks2_RR_4          0

/**
 * Signal RdrObjChks2_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjChks2_RR_4            0

/**
 * Signal RdrObjChks2_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjChks2_RR_4            255

/**
 * Signal RdrObjChks2_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjChks2_RR_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjDx_RR_4 Signal RdrObjDx_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjDx_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjDx_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjDx_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjDx_RR_4               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjDx_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjDx_RR_4             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjDx_RR_4(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjDx_RR_4(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjDx_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjDx_RR_4(buf, 0)

/**
 * Signal RdrObjDx_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjDx_RR_4(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjDx_RR_4             0

/**
 * Signal RdrObjDx_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjDx_RR_4               0

/**
 * Signal RdrObjDx_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjDx_RR_4               2540

/**
 * Signal RdrObjDx_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjDx_RR_4               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjTiAlv_RR_4 Signal RdrObjTiAlv_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjTiAlv_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjTiAlv_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjTiAlv_RR_4            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjTiAlv_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjTiAlv_RR_4          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjTiAlv_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjTiAlv_RR_4(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjTiAlv_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjTiAlv_RR_4(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjTiAlv_RR_4(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjTiAlv_RR_4          0

/**
 * Signal RdrObjTiAlv_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjTiAlv_RR_4            0

/**
 * Signal RdrObjTiAlv_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjTiAlv_RR_4            127

/**
 * Signal RdrObjTiAlv_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjTiAlv_RR_4            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjVy_RR_4 Signal RdrObjVy_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjVy_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjVy_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjVy_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjVy_RR_4               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjVy_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjVy_RR_4             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjVy_RR_4(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjVy_RR_4(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjVy_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjVy_RR_4(buf, 0)

/**
 * Signal RdrObjVy_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjVy_RR_4(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjVy_RR_4             0

/**
 * Signal RdrObjVy_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjVy_RR_4               0

/**
 * Signal RdrObjVy_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjVy_RR_4               1023

/**
 * Signal RdrObjVy_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjVy_RR_4               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjVx_RR_4 Signal RdrObjVx_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjVx_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjVx_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjVx_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjVx_RR_4               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjVx_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjVx_RR_4             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjVx_RR_4(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjVx_RR_4(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjVx_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjVx_RR_4(buf, 0)

/**
 * Signal RdrObjVx_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjVx_RR_4(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjVx_RR_4             0

/**
 * Signal RdrObjVx_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjVx_RR_4               0

/**
 * Signal RdrObjVx_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjVx_RR_4               1023

/**
 * Signal RdrObjVx_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjVx_RR_4               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjWth_RR_4 Signal RdrObjWth_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjWth_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjWth_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjWth_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjWth_RR_4              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjWth_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjWth_RR_4            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjWth_RR_4(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjWth_RR_4(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjWth_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjWth_RR_4(buf, 0)

/**
 * Signal RdrObjWth_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjWth_RR_4(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjWth_RR_4            0

/**
 * Signal RdrObjWth_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjWth_RR_4              0

/**
 * Signal RdrObjWth_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjWth_RR_4              50

/**
 * Signal RdrObjWth_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjWth_RR_4              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5B9h_RdrObjHeading_RR_4 Signal RdrObjHeading_RR_4 of Message SRR_RR_5B9h (0x5b9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5B9h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5B9h_RdrObjHeading_RR_4 and \ref GET_SRR_RR_5B9h_RdrObjHeading_RR_4 instead.
 */
#define SIG_SRR_RR_5B9h_RdrObjHeading_RR_4          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5B9h_RdrObjHeading_RR_4 or \ref INIT_SRR_RR_5B9h instead.
 */
#define SETUP_SRR_RR_5B9h_RdrObjHeading_RR_4        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5B9h_RdrObjHeading_RR_4(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5B9h_RdrObjHeading_RR_4(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5B9h_RdrObjHeading_RR_4(buf) \
	SET_SRR_RR_5B9h_RdrObjHeading_RR_4(buf, 0)

/**
 * Signal RdrObjHeading_RR_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5B9h_RdrObjHeading_RR_4(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_4 raw initial value.
 */
#define START_SRR_RR_5B9h_RdrObjHeading_RR_4        0

/**
 * Signal RdrObjHeading_RR_4 raw minimum value.
 */
#define MIN_SRR_RR_5B9h_RdrObjHeading_RR_4          0

/**
 * Signal RdrObjHeading_RR_4 raw maximum value.
 */
#define MAX_SRR_RR_5B9h_RdrObjHeading_RR_4          360

/**
 * Signal RdrObjHeading_RR_4 raw offset value.
 */
#define OFF_SRR_RR_5B9h_RdrObjHeading_RR_4          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjChks_RR_5 Signal RdrObjChks_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjChks_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjChks_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjChks_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjChks_RR_5             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjChks_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjChks_RR_5           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjChks_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjChks_RR_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjChks_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjChks_RR_5(buf, 0)

/**
 * Signal RdrObjChks_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjChks_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjChks_RR_5           0

/**
 * Signal RdrObjChks_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjChks_RR_5             0

/**
 * Signal RdrObjChks_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjChks_RR_5             255

/**
 * Signal RdrObjChks_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjChks_RR_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjCntr_RR_5 Signal RdrObjCntr_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjCntr_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjCntr_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjCntr_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjCntr_RR_5             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjCntr_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjCntr_RR_5           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjCntr_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjCntr_RR_5(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjCntr_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjCntr_RR_5(buf, 0)

/**
 * Signal RdrObjCntr_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjCntr_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjCntr_RR_5           0

/**
 * Signal RdrObjCntr_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjCntr_RR_5             0

/**
 * Signal RdrObjCntr_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjCntr_RR_5             15

/**
 * Signal RdrObjCntr_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjCntr_RR_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjAy_RR_5 Signal RdrObjAy_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjAy_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjAy_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjAy_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjAy_RR_5               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjAy_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjAy_RR_5             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjAy_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjAy_RR_5(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjAy_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjAy_RR_5(buf, 0)

/**
 * Signal RdrObjAy_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjAy_RR_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjAy_RR_5             0

/**
 * Signal RdrObjAy_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjAy_RR_5               0

/**
 * Signal RdrObjAy_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjAy_RR_5               128

/**
 * Signal RdrObjAy_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjAy_RR_5               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjAx_RR_5 Signal RdrObjAx_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjAx_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjAx_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjAx_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjAx_RR_5               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjAx_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjAx_RR_5             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjAx_RR_5(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjAx_RR_5(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjAx_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjAx_RR_5(buf, 0)

/**
 * Signal RdrObjAx_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjAx_RR_5(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjAx_RR_5             0

/**
 * Signal RdrObjAx_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjAx_RR_5               0

/**
 * Signal RdrObjAx_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjAx_RR_5               512

/**
 * Signal RdrObjAx_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjAx_RR_5               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjCoast_RR_5 Signal RdrObjCoast_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjCoast_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjCoast_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjCoast_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjCoast_RR_5            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjCoast_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjCoast_RR_5          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjCoast_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjCoast_RR_5(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjCoast_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjCoast_RR_5(buf, 0)

/**
 * Signal RdrObjCoast_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjCoast_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjCoast_RR_5          0

/**
 * Signal RdrObjCoast_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjCoast_RR_5            0

/**
 * Signal RdrObjCoast_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjCoast_RR_5            1

/**
 * Signal RdrObjCoast_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjCoast_RR_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjConf_RR_5 Signal RdrObjConf_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjConf_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjConf_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjConf_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjConf_RR_5             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjConf_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjConf_RR_5           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjConf_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjConf_RR_5(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjConf_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjConf_RR_5(buf, 0)

/**
 * Signal RdrObjConf_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjConf_RR_5(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjConf_RR_5           0

/**
 * Signal RdrObjConf_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjConf_RR_5             0

/**
 * Signal RdrObjConf_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjConf_RR_5             14

/**
 * Signal RdrObjConf_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjConf_RR_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjMtnPat_RR_5 Signal RdrObjMtnPat_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjMtnPat_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjMtnPat_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjMtnPat_RR_5           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjMtnPat_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjMtnPat_RR_5         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjMtnPat_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjMtnPat_RR_5(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjMtnPat_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjMtnPat_RR_5(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjMtnPat_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjMtnPat_RR_5         0

/**
 * Signal RdrObjMtnPat_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjMtnPat_RR_5           0

/**
 * Signal RdrObjMtnPat_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjMtnPat_RR_5           3

/**
 * Signal RdrObjMtnPat_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjMtnPat_RR_5           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjID_RR_5 Signal RdrObjID_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjID_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjID_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjID_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjID_RR_5               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjID_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjID_RR_5             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjID_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjID_RR_5(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjID_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjID_RR_5(buf, 0)

/**
 * Signal RdrObjID_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjID_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjID_RR_5             0

/**
 * Signal RdrObjID_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjID_RR_5               0

/**
 * Signal RdrObjID_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjID_RR_5               255

/**
 * Signal RdrObjID_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjID_RR_5               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjTyp_RR_5 Signal RdrObjTyp_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjTyp_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjTyp_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjTyp_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjTyp_RR_5              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjTyp_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjTyp_RR_5            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjTyp_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjTyp_RR_5(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjTyp_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjTyp_RR_5(buf, 0)

/**
 * Signal RdrObjTyp_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjTyp_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjTyp_RR_5            0

/**
 * Signal RdrObjTyp_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjTyp_RR_5              0

/**
 * Signal RdrObjTyp_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjTyp_RR_5              3

/**
 * Signal RdrObjTyp_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjTyp_RR_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BAh_RdrObjDy_RR_5 Signal RdrObjDy_RR_5 of Message SRR_RR_5BAh (0x5ba)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BAh
 * @{
 */

/**
 * Signal RdrObjDy_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BAh_RdrObjDy_RR_5 and \ref GET_SRR_RR_5BAh_RdrObjDy_RR_5 instead.
 */
#define SIG_SRR_RR_5BAh_RdrObjDy_RR_5               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BAh_RdrObjDy_RR_5 or \ref INIT_SRR_RR_5BAh instead.
 */
#define SETUP_SRR_RR_5BAh_RdrObjDy_RR_5             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BAh_RdrObjDy_RR_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BAh_RdrObjDy_RR_5(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BAh_RdrObjDy_RR_5(buf) \
	SET_SRR_RR_5BAh_RdrObjDy_RR_5(buf, 0)

/**
 * Signal RdrObjDy_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BAh_RdrObjDy_RR_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_5 raw initial value.
 */
#define START_SRR_RR_5BAh_RdrObjDy_RR_5             0

/**
 * Signal RdrObjDy_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BAh_RdrObjDy_RR_5               0

/**
 * Signal RdrObjDy_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BAh_RdrObjDy_RR_5               2046

/**
 * Signal RdrObjDy_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BAh_RdrObjDy_RR_5               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjChks2_RR_5 Signal RdrObjChks2_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjChks2_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjChks2_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjChks2_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjChks2_RR_5            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjChks2_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjChks2_RR_5          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjChks2_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjChks2_RR_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjChks2_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjChks2_RR_5(buf, 0)

/**
 * Signal RdrObjChks2_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjChks2_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjChks2_RR_5          0

/**
 * Signal RdrObjChks2_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjChks2_RR_5            0

/**
 * Signal RdrObjChks2_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjChks2_RR_5            255

/**
 * Signal RdrObjChks2_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjChks2_RR_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjDx_RR_5 Signal RdrObjDx_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjDx_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjDx_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjDx_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjDx_RR_5               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjDx_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjDx_RR_5             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjDx_RR_5(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjDx_RR_5(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjDx_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjDx_RR_5(buf, 0)

/**
 * Signal RdrObjDx_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjDx_RR_5(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjDx_RR_5             0

/**
 * Signal RdrObjDx_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjDx_RR_5               0

/**
 * Signal RdrObjDx_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjDx_RR_5               2540

/**
 * Signal RdrObjDx_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjDx_RR_5               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjTiAlv_RR_5 Signal RdrObjTiAlv_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjTiAlv_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjTiAlv_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjTiAlv_RR_5            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjTiAlv_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjTiAlv_RR_5          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjTiAlv_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjTiAlv_RR_5(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjTiAlv_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjTiAlv_RR_5(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjTiAlv_RR_5(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjTiAlv_RR_5          0

/**
 * Signal RdrObjTiAlv_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjTiAlv_RR_5            0

/**
 * Signal RdrObjTiAlv_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjTiAlv_RR_5            127

/**
 * Signal RdrObjTiAlv_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjTiAlv_RR_5            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjVy_RR_5 Signal RdrObjVy_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjVy_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjVy_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjVy_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjVy_RR_5               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjVy_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjVy_RR_5             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjVy_RR_5(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjVy_RR_5(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjVy_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjVy_RR_5(buf, 0)

/**
 * Signal RdrObjVy_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjVy_RR_5(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjVy_RR_5             0

/**
 * Signal RdrObjVy_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjVy_RR_5               0

/**
 * Signal RdrObjVy_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjVy_RR_5               1023

/**
 * Signal RdrObjVy_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjVy_RR_5               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjVx_RR_5 Signal RdrObjVx_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjVx_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjVx_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjVx_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjVx_RR_5               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjVx_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjVx_RR_5             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjVx_RR_5(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjVx_RR_5(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjVx_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjVx_RR_5(buf, 0)

/**
 * Signal RdrObjVx_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjVx_RR_5(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjVx_RR_5             0

/**
 * Signal RdrObjVx_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjVx_RR_5               0

/**
 * Signal RdrObjVx_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjVx_RR_5               1023

/**
 * Signal RdrObjVx_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjVx_RR_5               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjWth_RR_5 Signal RdrObjWth_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjWth_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjWth_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjWth_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjWth_RR_5              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjWth_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjWth_RR_5            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjWth_RR_5(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjWth_RR_5(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjWth_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjWth_RR_5(buf, 0)

/**
 * Signal RdrObjWth_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjWth_RR_5(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjWth_RR_5            0

/**
 * Signal RdrObjWth_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjWth_RR_5              0

/**
 * Signal RdrObjWth_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjWth_RR_5              50

/**
 * Signal RdrObjWth_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjWth_RR_5              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BBh_RdrObjHeading_RR_5 Signal RdrObjHeading_RR_5 of Message SRR_RR_5BBh (0x5bb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BBh
 * @{
 */

/**
 * Signal RdrObjHeading_RR_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BBh_RdrObjHeading_RR_5 and \ref GET_SRR_RR_5BBh_RdrObjHeading_RR_5 instead.
 */
#define SIG_SRR_RR_5BBh_RdrObjHeading_RR_5          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BBh_RdrObjHeading_RR_5 or \ref INIT_SRR_RR_5BBh instead.
 */
#define SETUP_SRR_RR_5BBh_RdrObjHeading_RR_5        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BBh_RdrObjHeading_RR_5(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BBh_RdrObjHeading_RR_5(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BBh_RdrObjHeading_RR_5(buf) \
	SET_SRR_RR_5BBh_RdrObjHeading_RR_5(buf, 0)

/**
 * Signal RdrObjHeading_RR_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BBh_RdrObjHeading_RR_5(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_5 raw initial value.
 */
#define START_SRR_RR_5BBh_RdrObjHeading_RR_5        0

/**
 * Signal RdrObjHeading_RR_5 raw minimum value.
 */
#define MIN_SRR_RR_5BBh_RdrObjHeading_RR_5          0

/**
 * Signal RdrObjHeading_RR_5 raw maximum value.
 */
#define MAX_SRR_RR_5BBh_RdrObjHeading_RR_5          360

/**
 * Signal RdrObjHeading_RR_5 raw offset value.
 */
#define OFF_SRR_RR_5BBh_RdrObjHeading_RR_5          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjChks_RR_6 Signal RdrObjChks_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjChks_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjChks_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjChks_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjChks_RR_6             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjChks_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjChks_RR_6           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjChks_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjChks_RR_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjChks_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjChks_RR_6(buf, 0)

/**
 * Signal RdrObjChks_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjChks_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjChks_RR_6           0

/**
 * Signal RdrObjChks_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjChks_RR_6             0

/**
 * Signal RdrObjChks_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjChks_RR_6             255

/**
 * Signal RdrObjChks_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjChks_RR_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjCntr_RR_6 Signal RdrObjCntr_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjCntr_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjCntr_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjCntr_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjCntr_RR_6             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjCntr_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjCntr_RR_6           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjCntr_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjCntr_RR_6(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjCntr_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjCntr_RR_6(buf, 0)

/**
 * Signal RdrObjCntr_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjCntr_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjCntr_RR_6           0

/**
 * Signal RdrObjCntr_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjCntr_RR_6             0

/**
 * Signal RdrObjCntr_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjCntr_RR_6             15

/**
 * Signal RdrObjCntr_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjCntr_RR_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjAy_RR_6 Signal RdrObjAy_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjAy_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjAy_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjAy_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjAy_RR_6               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjAy_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjAy_RR_6             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjAy_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjAy_RR_6(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjAy_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjAy_RR_6(buf, 0)

/**
 * Signal RdrObjAy_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjAy_RR_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjAy_RR_6             0

/**
 * Signal RdrObjAy_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjAy_RR_6               0

/**
 * Signal RdrObjAy_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjAy_RR_6               128

/**
 * Signal RdrObjAy_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjAy_RR_6               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjAx_RR_6 Signal RdrObjAx_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjAx_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjAx_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjAx_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjAx_RR_6               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjAx_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjAx_RR_6             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjAx_RR_6(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjAx_RR_6(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjAx_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjAx_RR_6(buf, 0)

/**
 * Signal RdrObjAx_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjAx_RR_6(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjAx_RR_6             0

/**
 * Signal RdrObjAx_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjAx_RR_6               0

/**
 * Signal RdrObjAx_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjAx_RR_6               512

/**
 * Signal RdrObjAx_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjAx_RR_6               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjCoast_RR_6 Signal RdrObjCoast_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjCoast_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjCoast_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjCoast_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjCoast_RR_6            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjCoast_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjCoast_RR_6          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjCoast_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjCoast_RR_6(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjCoast_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjCoast_RR_6(buf, 0)

/**
 * Signal RdrObjCoast_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjCoast_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjCoast_RR_6          0

/**
 * Signal RdrObjCoast_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjCoast_RR_6            0

/**
 * Signal RdrObjCoast_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjCoast_RR_6            1

/**
 * Signal RdrObjCoast_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjCoast_RR_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjConf_RR_6 Signal RdrObjConf_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjConf_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjConf_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjConf_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjConf_RR_6             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjConf_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjConf_RR_6           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjConf_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjConf_RR_6(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjConf_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjConf_RR_6(buf, 0)

/**
 * Signal RdrObjConf_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjConf_RR_6(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjConf_RR_6           0

/**
 * Signal RdrObjConf_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjConf_RR_6             0

/**
 * Signal RdrObjConf_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjConf_RR_6             14

/**
 * Signal RdrObjConf_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjConf_RR_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjMtnPat_RR_6 Signal RdrObjMtnPat_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjMtnPat_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjMtnPat_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjMtnPat_RR_6           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjMtnPat_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjMtnPat_RR_6         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjMtnPat_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjMtnPat_RR_6(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjMtnPat_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjMtnPat_RR_6(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjMtnPat_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjMtnPat_RR_6         0

/**
 * Signal RdrObjMtnPat_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjMtnPat_RR_6           0

/**
 * Signal RdrObjMtnPat_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjMtnPat_RR_6           3

/**
 * Signal RdrObjMtnPat_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjMtnPat_RR_6           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjID_RR_6 Signal RdrObjID_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjID_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjID_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjID_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjID_RR_6               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjID_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjID_RR_6             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjID_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjID_RR_6(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjID_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjID_RR_6(buf, 0)

/**
 * Signal RdrObjID_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjID_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjID_RR_6             0

/**
 * Signal RdrObjID_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjID_RR_6               0

/**
 * Signal RdrObjID_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjID_RR_6               255

/**
 * Signal RdrObjID_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjID_RR_6               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjTyp_RR_6 Signal RdrObjTyp_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjTyp_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjTyp_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjTyp_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjTyp_RR_6              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjTyp_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjTyp_RR_6            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjTyp_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjTyp_RR_6(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjTyp_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjTyp_RR_6(buf, 0)

/**
 * Signal RdrObjTyp_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjTyp_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjTyp_RR_6            0

/**
 * Signal RdrObjTyp_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjTyp_RR_6              0

/**
 * Signal RdrObjTyp_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjTyp_RR_6              3

/**
 * Signal RdrObjTyp_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjTyp_RR_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BCh_RdrObjDy_RR_6 Signal RdrObjDy_RR_6 of Message SRR_RR_5BCh (0x5bc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BCh
 * @{
 */

/**
 * Signal RdrObjDy_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BCh_RdrObjDy_RR_6 and \ref GET_SRR_RR_5BCh_RdrObjDy_RR_6 instead.
 */
#define SIG_SRR_RR_5BCh_RdrObjDy_RR_6               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BCh_RdrObjDy_RR_6 or \ref INIT_SRR_RR_5BCh instead.
 */
#define SETUP_SRR_RR_5BCh_RdrObjDy_RR_6             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BCh_RdrObjDy_RR_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BCh_RdrObjDy_RR_6(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BCh_RdrObjDy_RR_6(buf) \
	SET_SRR_RR_5BCh_RdrObjDy_RR_6(buf, 0)

/**
 * Signal RdrObjDy_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BCh_RdrObjDy_RR_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_6 raw initial value.
 */
#define START_SRR_RR_5BCh_RdrObjDy_RR_6             0

/**
 * Signal RdrObjDy_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BCh_RdrObjDy_RR_6               0

/**
 * Signal RdrObjDy_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BCh_RdrObjDy_RR_6               2046

/**
 * Signal RdrObjDy_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BCh_RdrObjDy_RR_6               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjChks2_RR_6 Signal RdrObjChks2_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjChks2_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjChks2_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjChks2_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjChks2_RR_6            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjChks2_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjChks2_RR_6          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjChks2_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjChks2_RR_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjChks2_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjChks2_RR_6(buf, 0)

/**
 * Signal RdrObjChks2_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjChks2_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjChks2_RR_6          0

/**
 * Signal RdrObjChks2_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjChks2_RR_6            0

/**
 * Signal RdrObjChks2_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjChks2_RR_6            255

/**
 * Signal RdrObjChks2_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjChks2_RR_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjDx_RR_6 Signal RdrObjDx_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjDx_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjDx_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjDx_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjDx_RR_6               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjDx_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjDx_RR_6             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjDx_RR_6(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjDx_RR_6(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjDx_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjDx_RR_6(buf, 0)

/**
 * Signal RdrObjDx_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjDx_RR_6(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjDx_RR_6             0

/**
 * Signal RdrObjDx_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjDx_RR_6               0

/**
 * Signal RdrObjDx_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjDx_RR_6               2540

/**
 * Signal RdrObjDx_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjDx_RR_6               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjTiAlv_RR_6 Signal RdrObjTiAlv_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjTiAlv_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjTiAlv_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjTiAlv_RR_6            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjTiAlv_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjTiAlv_RR_6          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjTiAlv_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjTiAlv_RR_6(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjTiAlv_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjTiAlv_RR_6(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjTiAlv_RR_6(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjTiAlv_RR_6          0

/**
 * Signal RdrObjTiAlv_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjTiAlv_RR_6            0

/**
 * Signal RdrObjTiAlv_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjTiAlv_RR_6            127

/**
 * Signal RdrObjTiAlv_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjTiAlv_RR_6            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjVy_RR_6 Signal RdrObjVy_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjVy_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjVy_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjVy_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjVy_RR_6               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjVy_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjVy_RR_6             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjVy_RR_6(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjVy_RR_6(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjVy_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjVy_RR_6(buf, 0)

/**
 * Signal RdrObjVy_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjVy_RR_6(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjVy_RR_6             0

/**
 * Signal RdrObjVy_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjVy_RR_6               0

/**
 * Signal RdrObjVy_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjVy_RR_6               1023

/**
 * Signal RdrObjVy_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjVy_RR_6               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjVx_RR_6 Signal RdrObjVx_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjVx_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjVx_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjVx_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjVx_RR_6               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjVx_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjVx_RR_6             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjVx_RR_6(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjVx_RR_6(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjVx_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjVx_RR_6(buf, 0)

/**
 * Signal RdrObjVx_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjVx_RR_6(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjVx_RR_6             0

/**
 * Signal RdrObjVx_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjVx_RR_6               0

/**
 * Signal RdrObjVx_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjVx_RR_6               1023

/**
 * Signal RdrObjVx_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjVx_RR_6               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjWth_RR_6 Signal RdrObjWth_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjWth_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjWth_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjWth_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjWth_RR_6              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjWth_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjWth_RR_6            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjWth_RR_6(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjWth_RR_6(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjWth_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjWth_RR_6(buf, 0)

/**
 * Signal RdrObjWth_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjWth_RR_6(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjWth_RR_6            0

/**
 * Signal RdrObjWth_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjWth_RR_6              0

/**
 * Signal RdrObjWth_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjWth_RR_6              50

/**
 * Signal RdrObjWth_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjWth_RR_6              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BDh_RdrObjHeading_RR_6 Signal RdrObjHeading_RR_6 of Message SRR_RR_5BDh (0x5bd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BDh
 * @{
 */

/**
 * Signal RdrObjHeading_RR_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BDh_RdrObjHeading_RR_6 and \ref GET_SRR_RR_5BDh_RdrObjHeading_RR_6 instead.
 */
#define SIG_SRR_RR_5BDh_RdrObjHeading_RR_6          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BDh_RdrObjHeading_RR_6 or \ref INIT_SRR_RR_5BDh instead.
 */
#define SETUP_SRR_RR_5BDh_RdrObjHeading_RR_6        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BDh_RdrObjHeading_RR_6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BDh_RdrObjHeading_RR_6(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BDh_RdrObjHeading_RR_6(buf) \
	SET_SRR_RR_5BDh_RdrObjHeading_RR_6(buf, 0)

/**
 * Signal RdrObjHeading_RR_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BDh_RdrObjHeading_RR_6(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_6 raw initial value.
 */
#define START_SRR_RR_5BDh_RdrObjHeading_RR_6        0

/**
 * Signal RdrObjHeading_RR_6 raw minimum value.
 */
#define MIN_SRR_RR_5BDh_RdrObjHeading_RR_6          0

/**
 * Signal RdrObjHeading_RR_6 raw maximum value.
 */
#define MAX_SRR_RR_5BDh_RdrObjHeading_RR_6          360

/**
 * Signal RdrObjHeading_RR_6 raw offset value.
 */
#define OFF_SRR_RR_5BDh_RdrObjHeading_RR_6          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjChks_RR_7 Signal RdrObjChks_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjChks_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjChks_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjChks_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjChks_RR_7             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjChks_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjChks_RR_7           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjChks_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjChks_RR_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjChks_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjChks_RR_7(buf, 0)

/**
 * Signal RdrObjChks_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjChks_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjChks_RR_7           0

/**
 * Signal RdrObjChks_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjChks_RR_7             0

/**
 * Signal RdrObjChks_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjChks_RR_7             255

/**
 * Signal RdrObjChks_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjChks_RR_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjCntr_RR_7 Signal RdrObjCntr_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjCntr_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjCntr_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjCntr_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjCntr_RR_7             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjCntr_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjCntr_RR_7           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjCntr_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjCntr_RR_7(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjCntr_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjCntr_RR_7(buf, 0)

/**
 * Signal RdrObjCntr_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjCntr_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjCntr_RR_7           0

/**
 * Signal RdrObjCntr_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjCntr_RR_7             0

/**
 * Signal RdrObjCntr_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjCntr_RR_7             15

/**
 * Signal RdrObjCntr_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjCntr_RR_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjAy_RR_7 Signal RdrObjAy_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjAy_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjAy_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjAy_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjAy_RR_7               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjAy_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjAy_RR_7             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjAy_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjAy_RR_7(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjAy_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjAy_RR_7(buf, 0)

/**
 * Signal RdrObjAy_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjAy_RR_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjAy_RR_7             0

/**
 * Signal RdrObjAy_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjAy_RR_7               0

/**
 * Signal RdrObjAy_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjAy_RR_7               128

/**
 * Signal RdrObjAy_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjAy_RR_7               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjAx_RR_7 Signal RdrObjAx_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjAx_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjAx_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjAx_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjAx_RR_7               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjAx_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjAx_RR_7             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjAx_RR_7(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjAx_RR_7(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjAx_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjAx_RR_7(buf, 0)

/**
 * Signal RdrObjAx_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjAx_RR_7(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjAx_RR_7             0

/**
 * Signal RdrObjAx_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjAx_RR_7               0

/**
 * Signal RdrObjAx_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjAx_RR_7               512

/**
 * Signal RdrObjAx_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjAx_RR_7               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjCoast_RR_7 Signal RdrObjCoast_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjCoast_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjCoast_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjCoast_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjCoast_RR_7            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjCoast_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjCoast_RR_7          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjCoast_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjCoast_RR_7(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjCoast_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjCoast_RR_7(buf, 0)

/**
 * Signal RdrObjCoast_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjCoast_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjCoast_RR_7          0

/**
 * Signal RdrObjCoast_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjCoast_RR_7            0

/**
 * Signal RdrObjCoast_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjCoast_RR_7            1

/**
 * Signal RdrObjCoast_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjCoast_RR_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjConf_RR_7 Signal RdrObjConf_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjConf_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjConf_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjConf_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjConf_RR_7             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjConf_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjConf_RR_7           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjConf_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjConf_RR_7(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjConf_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjConf_RR_7(buf, 0)

/**
 * Signal RdrObjConf_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjConf_RR_7(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjConf_RR_7           0

/**
 * Signal RdrObjConf_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjConf_RR_7             0

/**
 * Signal RdrObjConf_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjConf_RR_7             14

/**
 * Signal RdrObjConf_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjConf_RR_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjMtnPat_RR_7 Signal RdrObjMtnPat_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjMtnPat_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjMtnPat_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjMtnPat_RR_7           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjMtnPat_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjMtnPat_RR_7         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjMtnPat_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjMtnPat_RR_7(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjMtnPat_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjMtnPat_RR_7(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjMtnPat_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjMtnPat_RR_7         0

/**
 * Signal RdrObjMtnPat_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjMtnPat_RR_7           0

/**
 * Signal RdrObjMtnPat_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjMtnPat_RR_7           3

/**
 * Signal RdrObjMtnPat_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjMtnPat_RR_7           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjID_RR_7 Signal RdrObjID_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjID_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjID_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjID_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjID_RR_7               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjID_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjID_RR_7             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjID_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjID_RR_7(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjID_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjID_RR_7(buf, 0)

/**
 * Signal RdrObjID_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjID_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjID_RR_7             0

/**
 * Signal RdrObjID_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjID_RR_7               0

/**
 * Signal RdrObjID_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjID_RR_7               255

/**
 * Signal RdrObjID_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjID_RR_7               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjTyp_RR_7 Signal RdrObjTyp_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjTyp_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjTyp_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjTyp_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjTyp_RR_7              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjTyp_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjTyp_RR_7            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjTyp_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjTyp_RR_7(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjTyp_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjTyp_RR_7(buf, 0)

/**
 * Signal RdrObjTyp_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjTyp_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjTyp_RR_7            0

/**
 * Signal RdrObjTyp_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjTyp_RR_7              0

/**
 * Signal RdrObjTyp_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjTyp_RR_7              3

/**
 * Signal RdrObjTyp_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjTyp_RR_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BEh_RdrObjDy_RR_7 Signal RdrObjDy_RR_7 of Message SRR_RR_5BEh (0x5be)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BEh
 * @{
 */

/**
 * Signal RdrObjDy_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BEh_RdrObjDy_RR_7 and \ref GET_SRR_RR_5BEh_RdrObjDy_RR_7 instead.
 */
#define SIG_SRR_RR_5BEh_RdrObjDy_RR_7               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BEh_RdrObjDy_RR_7 or \ref INIT_SRR_RR_5BEh instead.
 */
#define SETUP_SRR_RR_5BEh_RdrObjDy_RR_7             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BEh_RdrObjDy_RR_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BEh_RdrObjDy_RR_7(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BEh_RdrObjDy_RR_7(buf) \
	SET_SRR_RR_5BEh_RdrObjDy_RR_7(buf, 0)

/**
 * Signal RdrObjDy_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BEh_RdrObjDy_RR_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_7 raw initial value.
 */
#define START_SRR_RR_5BEh_RdrObjDy_RR_7             0

/**
 * Signal RdrObjDy_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BEh_RdrObjDy_RR_7               0

/**
 * Signal RdrObjDy_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BEh_RdrObjDy_RR_7               2046

/**
 * Signal RdrObjDy_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BEh_RdrObjDy_RR_7               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjChks2_RR_7 Signal RdrObjChks2_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjChks2_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjChks2_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjChks2_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjChks2_RR_7            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjChks2_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjChks2_RR_7          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjChks2_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjChks2_RR_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjChks2_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjChks2_RR_7(buf, 0)

/**
 * Signal RdrObjChks2_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjChks2_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjChks2_RR_7          0

/**
 * Signal RdrObjChks2_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjChks2_RR_7            0

/**
 * Signal RdrObjChks2_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjChks2_RR_7            255

/**
 * Signal RdrObjChks2_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjChks2_RR_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjDx_RR_7 Signal RdrObjDx_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjDx_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjDx_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjDx_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjDx_RR_7               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjDx_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjDx_RR_7             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjDx_RR_7(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjDx_RR_7(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjDx_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjDx_RR_7(buf, 0)

/**
 * Signal RdrObjDx_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjDx_RR_7(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjDx_RR_7             0

/**
 * Signal RdrObjDx_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjDx_RR_7               0

/**
 * Signal RdrObjDx_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjDx_RR_7               2540

/**
 * Signal RdrObjDx_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjDx_RR_7               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjTiAlv_RR_7 Signal RdrObjTiAlv_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjTiAlv_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjTiAlv_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjTiAlv_RR_7            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjTiAlv_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjTiAlv_RR_7          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjTiAlv_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjTiAlv_RR_7(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjTiAlv_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjTiAlv_RR_7(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjTiAlv_RR_7(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjTiAlv_RR_7          0

/**
 * Signal RdrObjTiAlv_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjTiAlv_RR_7            0

/**
 * Signal RdrObjTiAlv_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjTiAlv_RR_7            127

/**
 * Signal RdrObjTiAlv_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjTiAlv_RR_7            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjVy_RR_7 Signal RdrObjVy_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjVy_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjVy_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjVy_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjVy_RR_7               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjVy_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjVy_RR_7             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjVy_RR_7(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjVy_RR_7(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjVy_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjVy_RR_7(buf, 0)

/**
 * Signal RdrObjVy_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjVy_RR_7(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjVy_RR_7             0

/**
 * Signal RdrObjVy_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjVy_RR_7               0

/**
 * Signal RdrObjVy_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjVy_RR_7               1023

/**
 * Signal RdrObjVy_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjVy_RR_7               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjVx_RR_7 Signal RdrObjVx_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjVx_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjVx_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjVx_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjVx_RR_7               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjVx_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjVx_RR_7             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjVx_RR_7(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjVx_RR_7(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjVx_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjVx_RR_7(buf, 0)

/**
 * Signal RdrObjVx_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjVx_RR_7(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjVx_RR_7             0

/**
 * Signal RdrObjVx_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjVx_RR_7               0

/**
 * Signal RdrObjVx_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjVx_RR_7               1023

/**
 * Signal RdrObjVx_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjVx_RR_7               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjWth_RR_7 Signal RdrObjWth_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjWth_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjWth_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjWth_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjWth_RR_7              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjWth_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjWth_RR_7            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjWth_RR_7(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjWth_RR_7(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjWth_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjWth_RR_7(buf, 0)

/**
 * Signal RdrObjWth_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjWth_RR_7(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjWth_RR_7            0

/**
 * Signal RdrObjWth_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjWth_RR_7              0

/**
 * Signal RdrObjWth_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjWth_RR_7              50

/**
 * Signal RdrObjWth_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjWth_RR_7              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5BFh_RdrObjHeading_RR_7 Signal RdrObjHeading_RR_7 of Message SRR_RR_5BFh (0x5bf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5BFh
 * @{
 */

/**
 * Signal RdrObjHeading_RR_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5BFh_RdrObjHeading_RR_7 and \ref GET_SRR_RR_5BFh_RdrObjHeading_RR_7 instead.
 */
#define SIG_SRR_RR_5BFh_RdrObjHeading_RR_7          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5BFh_RdrObjHeading_RR_7 or \ref INIT_SRR_RR_5BFh instead.
 */
#define SETUP_SRR_RR_5BFh_RdrObjHeading_RR_7        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5BFh_RdrObjHeading_RR_7(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5BFh_RdrObjHeading_RR_7(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5BFh_RdrObjHeading_RR_7(buf) \
	SET_SRR_RR_5BFh_RdrObjHeading_RR_7(buf, 0)

/**
 * Signal RdrObjHeading_RR_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5BFh_RdrObjHeading_RR_7(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_7 raw initial value.
 */
#define START_SRR_RR_5BFh_RdrObjHeading_RR_7        0

/**
 * Signal RdrObjHeading_RR_7 raw minimum value.
 */
#define MIN_SRR_RR_5BFh_RdrObjHeading_RR_7          0

/**
 * Signal RdrObjHeading_RR_7 raw maximum value.
 */
#define MAX_SRR_RR_5BFh_RdrObjHeading_RR_7          360

/**
 * Signal RdrObjHeading_RR_7 raw offset value.
 */
#define OFF_SRR_RR_5BFh_RdrObjHeading_RR_7          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjChks_RR_8 Signal RdrObjChks_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjChks_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjChks_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjChks_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjChks_RR_8             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjChks_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjChks_RR_8           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjChks_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjChks_RR_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjChks_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjChks_RR_8(buf, 0)

/**
 * Signal RdrObjChks_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjChks_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjChks_RR_8           0

/**
 * Signal RdrObjChks_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjChks_RR_8             0

/**
 * Signal RdrObjChks_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjChks_RR_8             255

/**
 * Signal RdrObjChks_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjChks_RR_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjCntr_RR_8 Signal RdrObjCntr_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjCntr_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjCntr_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjCntr_RR_8             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjCntr_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjCntr_RR_8           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjCntr_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjCntr_RR_8(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjCntr_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjCntr_RR_8(buf, 0)

/**
 * Signal RdrObjCntr_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjCntr_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjCntr_RR_8           0

/**
 * Signal RdrObjCntr_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjCntr_RR_8             0

/**
 * Signal RdrObjCntr_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjCntr_RR_8             15

/**
 * Signal RdrObjCntr_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjCntr_RR_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjAy_RR_8 Signal RdrObjAy_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjAy_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjAy_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjAy_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjAy_RR_8               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjAy_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjAy_RR_8             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjAy_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjAy_RR_8(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjAy_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjAy_RR_8(buf, 0)

/**
 * Signal RdrObjAy_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjAy_RR_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjAy_RR_8             0

/**
 * Signal RdrObjAy_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjAy_RR_8               0

/**
 * Signal RdrObjAy_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjAy_RR_8               128

/**
 * Signal RdrObjAy_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjAy_RR_8               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjAx_RR_8 Signal RdrObjAx_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjAx_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjAx_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjAx_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjAx_RR_8               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjAx_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjAx_RR_8             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjAx_RR_8(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjAx_RR_8(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjAx_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjAx_RR_8(buf, 0)

/**
 * Signal RdrObjAx_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjAx_RR_8(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjAx_RR_8             0

/**
 * Signal RdrObjAx_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjAx_RR_8               0

/**
 * Signal RdrObjAx_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjAx_RR_8               512

/**
 * Signal RdrObjAx_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjAx_RR_8               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjCoast_RR_8 Signal RdrObjCoast_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjCoast_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjCoast_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjCoast_RR_8            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjCoast_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjCoast_RR_8          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjCoast_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjCoast_RR_8(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjCoast_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjCoast_RR_8(buf, 0)

/**
 * Signal RdrObjCoast_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjCoast_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjCoast_RR_8          0

/**
 * Signal RdrObjCoast_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjCoast_RR_8            0

/**
 * Signal RdrObjCoast_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjCoast_RR_8            1

/**
 * Signal RdrObjCoast_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjCoast_RR_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjConf_RR_8 Signal RdrObjConf_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjConf_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjConf_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjConf_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjConf_RR_8             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjConf_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjConf_RR_8           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjConf_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjConf_RR_8(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjConf_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjConf_RR_8(buf, 0)

/**
 * Signal RdrObjConf_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjConf_RR_8(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjConf_RR_8           0

/**
 * Signal RdrObjConf_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjConf_RR_8             0

/**
 * Signal RdrObjConf_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjConf_RR_8             14

/**
 * Signal RdrObjConf_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjConf_RR_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjMtnPat_RR_8 Signal RdrObjMtnPat_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjMtnPat_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjMtnPat_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjMtnPat_RR_8           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjMtnPat_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjMtnPat_RR_8         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjMtnPat_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjMtnPat_RR_8(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjMtnPat_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjMtnPat_RR_8(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjMtnPat_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjMtnPat_RR_8         0

/**
 * Signal RdrObjMtnPat_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjMtnPat_RR_8           0

/**
 * Signal RdrObjMtnPat_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjMtnPat_RR_8           3

/**
 * Signal RdrObjMtnPat_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjMtnPat_RR_8           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjID_RR_8 Signal RdrObjID_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjID_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjID_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjID_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjID_RR_8               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjID_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjID_RR_8             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjID_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjID_RR_8(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjID_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjID_RR_8(buf, 0)

/**
 * Signal RdrObjID_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjID_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjID_RR_8             0

/**
 * Signal RdrObjID_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjID_RR_8               0

/**
 * Signal RdrObjID_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjID_RR_8               255

/**
 * Signal RdrObjID_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjID_RR_8               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjTyp_RR_8 Signal RdrObjTyp_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjTyp_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjTyp_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjTyp_RR_8              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjTyp_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjTyp_RR_8            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjTyp_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjTyp_RR_8(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjTyp_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjTyp_RR_8(buf, 0)

/**
 * Signal RdrObjTyp_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjTyp_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjTyp_RR_8            0

/**
 * Signal RdrObjTyp_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjTyp_RR_8              0

/**
 * Signal RdrObjTyp_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjTyp_RR_8              3

/**
 * Signal RdrObjTyp_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjTyp_RR_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C0h_RdrObjDy_RR_8 Signal RdrObjDy_RR_8 of Message SRR_RR_5C0h (0x5c0)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C0h
 * @{
 */

/**
 * Signal RdrObjDy_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C0h_RdrObjDy_RR_8 and \ref GET_SRR_RR_5C0h_RdrObjDy_RR_8 instead.
 */
#define SIG_SRR_RR_5C0h_RdrObjDy_RR_8               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C0h_RdrObjDy_RR_8 or \ref INIT_SRR_RR_5C0h instead.
 */
#define SETUP_SRR_RR_5C0h_RdrObjDy_RR_8             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C0h_RdrObjDy_RR_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C0h_RdrObjDy_RR_8(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C0h_RdrObjDy_RR_8(buf) \
	SET_SRR_RR_5C0h_RdrObjDy_RR_8(buf, 0)

/**
 * Signal RdrObjDy_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C0h_RdrObjDy_RR_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_8 raw initial value.
 */
#define START_SRR_RR_5C0h_RdrObjDy_RR_8             0

/**
 * Signal RdrObjDy_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C0h_RdrObjDy_RR_8               0

/**
 * Signal RdrObjDy_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C0h_RdrObjDy_RR_8               2046

/**
 * Signal RdrObjDy_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C0h_RdrObjDy_RR_8               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjChks2_RR_8 Signal RdrObjChks2_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjChks2_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjChks2_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjChks2_RR_8            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjChks2_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjChks2_RR_8          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjChks2_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjChks2_RR_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjChks2_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjChks2_RR_8(buf, 0)

/**
 * Signal RdrObjChks2_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjChks2_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjChks2_RR_8          0

/**
 * Signal RdrObjChks2_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjChks2_RR_8            0

/**
 * Signal RdrObjChks2_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjChks2_RR_8            255

/**
 * Signal RdrObjChks2_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjChks2_RR_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjDx_RR_8 Signal RdrObjDx_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjDx_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjDx_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjDx_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjDx_RR_8               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjDx_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjDx_RR_8             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjDx_RR_8(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjDx_RR_8(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjDx_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjDx_RR_8(buf, 0)

/**
 * Signal RdrObjDx_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjDx_RR_8(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjDx_RR_8             0

/**
 * Signal RdrObjDx_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjDx_RR_8               0

/**
 * Signal RdrObjDx_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjDx_RR_8               2540

/**
 * Signal RdrObjDx_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjDx_RR_8               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjTiAlv_RR_8 Signal RdrObjTiAlv_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjTiAlv_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjTiAlv_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjTiAlv_RR_8            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjTiAlv_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjTiAlv_RR_8          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjTiAlv_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjTiAlv_RR_8(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjTiAlv_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjTiAlv_RR_8(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjTiAlv_RR_8(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjTiAlv_RR_8          0

/**
 * Signal RdrObjTiAlv_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjTiAlv_RR_8            0

/**
 * Signal RdrObjTiAlv_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjTiAlv_RR_8            127

/**
 * Signal RdrObjTiAlv_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjTiAlv_RR_8            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjVy_RR_8 Signal RdrObjVy_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjVy_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjVy_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjVy_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjVy_RR_8               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjVy_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjVy_RR_8             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjVy_RR_8(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjVy_RR_8(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjVy_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjVy_RR_8(buf, 0)

/**
 * Signal RdrObjVy_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjVy_RR_8(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjVy_RR_8             0

/**
 * Signal RdrObjVy_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjVy_RR_8               0

/**
 * Signal RdrObjVy_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjVy_RR_8               1023

/**
 * Signal RdrObjVy_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjVy_RR_8               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjVx_RR_8 Signal RdrObjVx_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjVx_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjVx_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjVx_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjVx_RR_8               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjVx_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjVx_RR_8             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjVx_RR_8(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjVx_RR_8(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjVx_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjVx_RR_8(buf, 0)

/**
 * Signal RdrObjVx_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjVx_RR_8(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjVx_RR_8             0

/**
 * Signal RdrObjVx_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjVx_RR_8               0

/**
 * Signal RdrObjVx_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjVx_RR_8               1023

/**
 * Signal RdrObjVx_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjVx_RR_8               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjWth_RR_8 Signal RdrObjWth_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjWth_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjWth_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjWth_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjWth_RR_8              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjWth_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjWth_RR_8            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjWth_RR_8(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjWth_RR_8(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjWth_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjWth_RR_8(buf, 0)

/**
 * Signal RdrObjWth_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjWth_RR_8(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjWth_RR_8            0

/**
 * Signal RdrObjWth_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjWth_RR_8              0

/**
 * Signal RdrObjWth_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjWth_RR_8              50

/**
 * Signal RdrObjWth_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjWth_RR_8              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C1h_RdrObjHeading_RR_8 Signal RdrObjHeading_RR_8 of Message SRR_RR_5C1h (0x5c1)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C1h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C1h_RdrObjHeading_RR_8 and \ref GET_SRR_RR_5C1h_RdrObjHeading_RR_8 instead.
 */
#define SIG_SRR_RR_5C1h_RdrObjHeading_RR_8          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C1h_RdrObjHeading_RR_8 or \ref INIT_SRR_RR_5C1h instead.
 */
#define SETUP_SRR_RR_5C1h_RdrObjHeading_RR_8        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C1h_RdrObjHeading_RR_8(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C1h_RdrObjHeading_RR_8(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C1h_RdrObjHeading_RR_8(buf) \
	SET_SRR_RR_5C1h_RdrObjHeading_RR_8(buf, 0)

/**
 * Signal RdrObjHeading_RR_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C1h_RdrObjHeading_RR_8(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_8 raw initial value.
 */
#define START_SRR_RR_5C1h_RdrObjHeading_RR_8        0

/**
 * Signal RdrObjHeading_RR_8 raw minimum value.
 */
#define MIN_SRR_RR_5C1h_RdrObjHeading_RR_8          0

/**
 * Signal RdrObjHeading_RR_8 raw maximum value.
 */
#define MAX_SRR_RR_5C1h_RdrObjHeading_RR_8          360

/**
 * Signal RdrObjHeading_RR_8 raw offset value.
 */
#define OFF_SRR_RR_5C1h_RdrObjHeading_RR_8          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjChks_RR_9 Signal RdrObjChks_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjChks_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjChks_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjChks_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjChks_RR_9             1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjChks_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjChks_RR_9           1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjChks_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjChks_RR_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjChks_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjChks_RR_9(buf, 0)

/**
 * Signal RdrObjChks_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjChks_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjChks_RR_9           0

/**
 * Signal RdrObjChks_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjChks_RR_9             0

/**
 * Signal RdrObjChks_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjChks_RR_9             255

/**
 * Signal RdrObjChks_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjChks_RR_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjCntr_RR_9 Signal RdrObjCntr_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjCntr_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjCntr_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjCntr_RR_9             1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjCntr_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjCntr_RR_9           1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjCntr_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjCntr_RR_9(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjCntr_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjCntr_RR_9(buf, 0)

/**
 * Signal RdrObjCntr_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjCntr_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjCntr_RR_9           0

/**
 * Signal RdrObjCntr_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjCntr_RR_9             0

/**
 * Signal RdrObjCntr_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjCntr_RR_9             15

/**
 * Signal RdrObjCntr_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjCntr_RR_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjAy_RR_9 Signal RdrObjAy_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjAy_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjAy_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjAy_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjAy_RR_9               1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjAy_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjAy_RR_9             1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjAy_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjAy_RR_9(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjAy_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjAy_RR_9(buf, 0)

/**
 * Signal RdrObjAy_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjAy_RR_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjAy_RR_9             0

/**
 * Signal RdrObjAy_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjAy_RR_9               0

/**
 * Signal RdrObjAy_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjAy_RR_9               128

/**
 * Signal RdrObjAy_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjAy_RR_9               -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjAx_RR_9 Signal RdrObjAx_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjAx_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjAx_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjAx_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjAx_RR_9               1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjAx_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjAx_RR_9             1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjAx_RR_9(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjAx_RR_9(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjAx_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjAx_RR_9(buf, 0)

/**
 * Signal RdrObjAx_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjAx_RR_9(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjAx_RR_9             0

/**
 * Signal RdrObjAx_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjAx_RR_9               0

/**
 * Signal RdrObjAx_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjAx_RR_9               512

/**
 * Signal RdrObjAx_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjAx_RR_9               -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjCoast_RR_9 Signal RdrObjCoast_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjCoast_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjCoast_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjCoast_RR_9            1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjCoast_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjCoast_RR_9          1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjCoast_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjCoast_RR_9(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjCoast_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjCoast_RR_9(buf, 0)

/**
 * Signal RdrObjCoast_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjCoast_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjCoast_RR_9          0

/**
 * Signal RdrObjCoast_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjCoast_RR_9            0

/**
 * Signal RdrObjCoast_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjCoast_RR_9            1

/**
 * Signal RdrObjCoast_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjCoast_RR_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjConf_RR_9 Signal RdrObjConf_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjConf_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjConf_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjConf_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjConf_RR_9             1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjConf_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjConf_RR_9           1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjConf_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjConf_RR_9(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjConf_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjConf_RR_9(buf, 0)

/**
 * Signal RdrObjConf_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjConf_RR_9(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjConf_RR_9           0

/**
 * Signal RdrObjConf_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjConf_RR_9             0

/**
 * Signal RdrObjConf_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjConf_RR_9             14

/**
 * Signal RdrObjConf_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjConf_RR_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjMtnPat_RR_9 Signal RdrObjMtnPat_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjMtnPat_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjMtnPat_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjMtnPat_RR_9           1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjMtnPat_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjMtnPat_RR_9         1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjMtnPat_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjMtnPat_RR_9(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjMtnPat_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjMtnPat_RR_9(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjMtnPat_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjMtnPat_RR_9         0

/**
 * Signal RdrObjMtnPat_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjMtnPat_RR_9           0

/**
 * Signal RdrObjMtnPat_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjMtnPat_RR_9           3

/**
 * Signal RdrObjMtnPat_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjMtnPat_RR_9           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjID_RR_9 Signal RdrObjID_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjID_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjID_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjID_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjID_RR_9               1, 0, 47, 7

/**
 * Signal RdrObjID_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjID_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjID_RR_9             1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjID_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjID_RR_9(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjID_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjID_RR_9(buf, 0)

/**
 * Signal RdrObjID_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjID_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjID_RR_9             0

/**
 * Signal RdrObjID_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjID_RR_9               0

/**
 * Signal RdrObjID_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjID_RR_9               255

/**
 * Signal RdrObjID_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjID_RR_9               0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjTyp_RR_9 Signal RdrObjTyp_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjTyp_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjTyp_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjTyp_RR_9              1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjTyp_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjTyp_RR_9            1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjTyp_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjTyp_RR_9(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjTyp_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjTyp_RR_9(buf, 0)

/**
 * Signal RdrObjTyp_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjTyp_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjTyp_RR_9            0

/**
 * Signal RdrObjTyp_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjTyp_RR_9              0

/**
 * Signal RdrObjTyp_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjTyp_RR_9              3

/**
 * Signal RdrObjTyp_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjTyp_RR_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C2h_RdrObjDy_RR_9 Signal RdrObjDy_RR_9 of Message SRR_RR_5C2h (0x5c2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C2h
 * @{
 */

/**
 * Signal RdrObjDy_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C2h_RdrObjDy_RR_9 and \ref GET_SRR_RR_5C2h_RdrObjDy_RR_9 instead.
 */
#define SIG_SRR_RR_5C2h_RdrObjDy_RR_9               1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C2h_RdrObjDy_RR_9 or \ref INIT_SRR_RR_5C2h instead.
 */
#define SETUP_SRR_RR_5C2h_RdrObjDy_RR_9             1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C2h_RdrObjDy_RR_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C2h_RdrObjDy_RR_9(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C2h_RdrObjDy_RR_9(buf) \
	SET_SRR_RR_5C2h_RdrObjDy_RR_9(buf, 0)

/**
 * Signal RdrObjDy_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C2h_RdrObjDy_RR_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_9 raw initial value.
 */
#define START_SRR_RR_5C2h_RdrObjDy_RR_9             0

/**
 * Signal RdrObjDy_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C2h_RdrObjDy_RR_9               0

/**
 * Signal RdrObjDy_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C2h_RdrObjDy_RR_9               2046

/**
 * Signal RdrObjDy_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C2h_RdrObjDy_RR_9               -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjChks2_RR_9 Signal RdrObjChks2_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjChks2_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjChks2_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjChks2_RR_9            1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjChks2_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjChks2_RR_9          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjChks2_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjChks2_RR_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjChks2_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjChks2_RR_9(buf, 0)

/**
 * Signal RdrObjChks2_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjChks2_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjChks2_RR_9          0

/**
 * Signal RdrObjChks2_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjChks2_RR_9            0

/**
 * Signal RdrObjChks2_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjChks2_RR_9            255

/**
 * Signal RdrObjChks2_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjChks2_RR_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjDx_RR_9 Signal RdrObjDx_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjDx_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjDx_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjDx_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjDx_RR_9               1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjDx_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjDx_RR_9             1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjDx_RR_9(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjDx_RR_9(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjDx_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjDx_RR_9(buf, 0)

/**
 * Signal RdrObjDx_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjDx_RR_9(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjDx_RR_9             0

/**
 * Signal RdrObjDx_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjDx_RR_9               0

/**
 * Signal RdrObjDx_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjDx_RR_9               2540

/**
 * Signal RdrObjDx_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjDx_RR_9               -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjTiAlv_RR_9 Signal RdrObjTiAlv_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjTiAlv_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjTiAlv_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjTiAlv_RR_9            1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjTiAlv_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjTiAlv_RR_9          1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjTiAlv_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjTiAlv_RR_9(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjTiAlv_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjTiAlv_RR_9(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjTiAlv_RR_9(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjTiAlv_RR_9          0

/**
 * Signal RdrObjTiAlv_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjTiAlv_RR_9            0

/**
 * Signal RdrObjTiAlv_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjTiAlv_RR_9            127

/**
 * Signal RdrObjTiAlv_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjTiAlv_RR_9            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjVy_RR_9 Signal RdrObjVy_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjVy_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjVy_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjVy_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjVy_RR_9               1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjVy_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjVy_RR_9             1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjVy_RR_9(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjVy_RR_9(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjVy_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjVy_RR_9(buf, 0)

/**
 * Signal RdrObjVy_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjVy_RR_9(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjVy_RR_9             0

/**
 * Signal RdrObjVy_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjVy_RR_9               0

/**
 * Signal RdrObjVy_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjVy_RR_9               1023

/**
 * Signal RdrObjVy_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjVy_RR_9               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjVx_RR_9 Signal RdrObjVx_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjVx_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjVx_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjVx_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjVx_RR_9               1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjVx_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjVx_RR_9             1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjVx_RR_9(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjVx_RR_9(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjVx_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjVx_RR_9(buf, 0)

/**
 * Signal RdrObjVx_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjVx_RR_9(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjVx_RR_9             0

/**
 * Signal RdrObjVx_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjVx_RR_9               0

/**
 * Signal RdrObjVx_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjVx_RR_9               1023

/**
 * Signal RdrObjVx_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjVx_RR_9               -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjWth_RR_9 Signal RdrObjWth_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjWth_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjWth_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjWth_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjWth_RR_9              1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjWth_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjWth_RR_9            1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjWth_RR_9(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjWth_RR_9(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjWth_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjWth_RR_9(buf, 0)

/**
 * Signal RdrObjWth_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjWth_RR_9(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjWth_RR_9            0

/**
 * Signal RdrObjWth_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjWth_RR_9              0

/**
 * Signal RdrObjWth_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjWth_RR_9              50

/**
 * Signal RdrObjWth_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjWth_RR_9              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C3h_RdrObjHeading_RR_9 Signal RdrObjHeading_RR_9 of Message SRR_RR_5C3h (0x5c3)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C3h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C3h_RdrObjHeading_RR_9 and \ref GET_SRR_RR_5C3h_RdrObjHeading_RR_9 instead.
 */
#define SIG_SRR_RR_5C3h_RdrObjHeading_RR_9          1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C3h_RdrObjHeading_RR_9 or \ref INIT_SRR_RR_5C3h instead.
 */
#define SETUP_SRR_RR_5C3h_RdrObjHeading_RR_9        1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C3h_RdrObjHeading_RR_9(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C3h_RdrObjHeading_RR_9(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C3h_RdrObjHeading_RR_9(buf) \
	SET_SRR_RR_5C3h_RdrObjHeading_RR_9(buf, 0)

/**
 * Signal RdrObjHeading_RR_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C3h_RdrObjHeading_RR_9(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_9 raw initial value.
 */
#define START_SRR_RR_5C3h_RdrObjHeading_RR_9        0

/**
 * Signal RdrObjHeading_RR_9 raw minimum value.
 */
#define MIN_SRR_RR_5C3h_RdrObjHeading_RR_9          0

/**
 * Signal RdrObjHeading_RR_9 raw maximum value.
 */
#define MAX_SRR_RR_5C3h_RdrObjHeading_RR_9          360

/**
 * Signal RdrObjHeading_RR_9 raw offset value.
 */
#define OFF_SRR_RR_5C3h_RdrObjHeading_RR_9          -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjChks_RR_10 Signal RdrObjChks_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjChks_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjChks_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjChks_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjChks_RR_10            1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjChks_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjChks_RR_10          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjChks_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjChks_RR_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjChks_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjChks_RR_10(buf, 0)

/**
 * Signal RdrObjChks_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjChks_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjChks_RR_10          0

/**
 * Signal RdrObjChks_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjChks_RR_10            0

/**
 * Signal RdrObjChks_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjChks_RR_10            255

/**
 * Signal RdrObjChks_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjChks_RR_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjCntr_RR_10 Signal RdrObjCntr_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjCntr_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjCntr_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjCntr_RR_10            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjCntr_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjCntr_RR_10          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjCntr_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjCntr_RR_10(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjCntr_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjCntr_RR_10(buf, 0)

/**
 * Signal RdrObjCntr_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjCntr_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjCntr_RR_10          0

/**
 * Signal RdrObjCntr_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjCntr_RR_10            0

/**
 * Signal RdrObjCntr_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjCntr_RR_10            15

/**
 * Signal RdrObjCntr_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjCntr_RR_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjAy_RR_10 Signal RdrObjAy_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjAy_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjAy_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjAy_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjAy_RR_10              1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjAy_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjAy_RR_10            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjAy_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjAy_RR_10(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjAy_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjAy_RR_10(buf, 0)

/**
 * Signal RdrObjAy_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjAy_RR_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjAy_RR_10            0

/**
 * Signal RdrObjAy_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjAy_RR_10              0

/**
 * Signal RdrObjAy_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjAy_RR_10              128

/**
 * Signal RdrObjAy_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjAy_RR_10              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjAx_RR_10 Signal RdrObjAx_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjAx_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjAx_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjAx_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjAx_RR_10              1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjAx_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjAx_RR_10            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjAx_RR_10(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjAx_RR_10(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjAx_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjAx_RR_10(buf, 0)

/**
 * Signal RdrObjAx_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjAx_RR_10(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjAx_RR_10            0

/**
 * Signal RdrObjAx_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjAx_RR_10              0

/**
 * Signal RdrObjAx_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjAx_RR_10              512

/**
 * Signal RdrObjAx_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjAx_RR_10              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjCoast_RR_10 Signal RdrObjCoast_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjCoast_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjCoast_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjCoast_RR_10           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjCoast_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjCoast_RR_10         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjCoast_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjCoast_RR_10(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjCoast_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjCoast_RR_10(buf, 0)

/**
 * Signal RdrObjCoast_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjCoast_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjCoast_RR_10         0

/**
 * Signal RdrObjCoast_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjCoast_RR_10           0

/**
 * Signal RdrObjCoast_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjCoast_RR_10           1

/**
 * Signal RdrObjCoast_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjCoast_RR_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjConf_RR_10 Signal RdrObjConf_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjConf_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjConf_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjConf_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjConf_RR_10            1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjConf_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjConf_RR_10          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjConf_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjConf_RR_10(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjConf_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjConf_RR_10(buf, 0)

/**
 * Signal RdrObjConf_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjConf_RR_10(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjConf_RR_10          0

/**
 * Signal RdrObjConf_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjConf_RR_10            0

/**
 * Signal RdrObjConf_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjConf_RR_10            14

/**
 * Signal RdrObjConf_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjConf_RR_10            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjMtnPat_RR_10 Signal RdrObjMtnPat_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjMtnPat_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjMtnPat_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjMtnPat_RR_10          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjMtnPat_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjMtnPat_RR_10        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjMtnPat_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjMtnPat_RR_10(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjMtnPat_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjMtnPat_RR_10(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjMtnPat_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjMtnPat_RR_10        0

/**
 * Signal RdrObjMtnPat_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjMtnPat_RR_10          0

/**
 * Signal RdrObjMtnPat_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjMtnPat_RR_10          3

/**
 * Signal RdrObjMtnPat_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjMtnPat_RR_10          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjID_RR_10 Signal RdrObjID_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjID_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjID_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjID_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjID_RR_10              1, 0, 47, 7

/**
 * Signal RdrObjID_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjID_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjID_RR_10            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjID_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjID_RR_10(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjID_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjID_RR_10(buf, 0)

/**
 * Signal RdrObjID_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjID_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjID_RR_10            0

/**
 * Signal RdrObjID_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjID_RR_10              0

/**
 * Signal RdrObjID_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjID_RR_10              255

/**
 * Signal RdrObjID_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjID_RR_10              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjTyp_RR_10 Signal RdrObjTyp_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjTyp_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjTyp_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjTyp_RR_10             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjTyp_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjTyp_RR_10           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjTyp_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjTyp_RR_10(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjTyp_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjTyp_RR_10(buf, 0)

/**
 * Signal RdrObjTyp_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjTyp_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjTyp_RR_10           0

/**
 * Signal RdrObjTyp_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjTyp_RR_10             0

/**
 * Signal RdrObjTyp_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjTyp_RR_10             3

/**
 * Signal RdrObjTyp_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjTyp_RR_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C4h_RdrObjDy_RR_10 Signal RdrObjDy_RR_10 of Message SRR_RR_5C4h (0x5c4)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C4h
 * @{
 */

/**
 * Signal RdrObjDy_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C4h_RdrObjDy_RR_10 and \ref GET_SRR_RR_5C4h_RdrObjDy_RR_10 instead.
 */
#define SIG_SRR_RR_5C4h_RdrObjDy_RR_10              1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C4h_RdrObjDy_RR_10 or \ref INIT_SRR_RR_5C4h instead.
 */
#define SETUP_SRR_RR_5C4h_RdrObjDy_RR_10            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C4h_RdrObjDy_RR_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C4h_RdrObjDy_RR_10(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C4h_RdrObjDy_RR_10(buf) \
	SET_SRR_RR_5C4h_RdrObjDy_RR_10(buf, 0)

/**
 * Signal RdrObjDy_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C4h_RdrObjDy_RR_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_10 raw initial value.
 */
#define START_SRR_RR_5C4h_RdrObjDy_RR_10            0

/**
 * Signal RdrObjDy_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C4h_RdrObjDy_RR_10              0

/**
 * Signal RdrObjDy_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C4h_RdrObjDy_RR_10              2046

/**
 * Signal RdrObjDy_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C4h_RdrObjDy_RR_10              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjChks2_RR_10 Signal RdrObjChks2_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjChks2_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjChks2_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjChks2_RR_10           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjChks2_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjChks2_RR_10         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjChks2_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjChks2_RR_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjChks2_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjChks2_RR_10(buf, 0)

/**
 * Signal RdrObjChks2_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjChks2_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjChks2_RR_10         0

/**
 * Signal RdrObjChks2_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjChks2_RR_10           0

/**
 * Signal RdrObjChks2_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjChks2_RR_10           255

/**
 * Signal RdrObjChks2_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjChks2_RR_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjDx_RR_10 Signal RdrObjDx_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjDx_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjDx_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjDx_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjDx_RR_10              1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjDx_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjDx_RR_10            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjDx_RR_10(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjDx_RR_10(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjDx_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjDx_RR_10(buf, 0)

/**
 * Signal RdrObjDx_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjDx_RR_10(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjDx_RR_10            0

/**
 * Signal RdrObjDx_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjDx_RR_10              0

/**
 * Signal RdrObjDx_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjDx_RR_10              2540

/**
 * Signal RdrObjDx_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjDx_RR_10              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjTiAlv_RR_10 Signal RdrObjTiAlv_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjTiAlv_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjTiAlv_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjTiAlv_RR_10           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjTiAlv_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjTiAlv_RR_10         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjTiAlv_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjTiAlv_RR_10(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjTiAlv_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjTiAlv_RR_10(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjTiAlv_RR_10(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjTiAlv_RR_10         0

/**
 * Signal RdrObjTiAlv_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjTiAlv_RR_10           0

/**
 * Signal RdrObjTiAlv_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjTiAlv_RR_10           127

/**
 * Signal RdrObjTiAlv_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjTiAlv_RR_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjVy_RR_10 Signal RdrObjVy_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjVy_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjVy_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjVy_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjVy_RR_10              1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjVy_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjVy_RR_10            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjVy_RR_10(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjVy_RR_10(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjVy_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjVy_RR_10(buf, 0)

/**
 * Signal RdrObjVy_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjVy_RR_10(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjVy_RR_10            0

/**
 * Signal RdrObjVy_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjVy_RR_10              0

/**
 * Signal RdrObjVy_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjVy_RR_10              1023

/**
 * Signal RdrObjVy_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjVy_RR_10              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjVx_RR_10 Signal RdrObjVx_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjVx_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjVx_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjVx_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjVx_RR_10              1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjVx_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjVx_RR_10            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjVx_RR_10(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjVx_RR_10(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjVx_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjVx_RR_10(buf, 0)

/**
 * Signal RdrObjVx_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjVx_RR_10(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjVx_RR_10            0

/**
 * Signal RdrObjVx_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjVx_RR_10              0

/**
 * Signal RdrObjVx_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjVx_RR_10              1023

/**
 * Signal RdrObjVx_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjVx_RR_10              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjWth_RR_10 Signal RdrObjWth_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjWth_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjWth_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjWth_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjWth_RR_10             1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjWth_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjWth_RR_10           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjWth_RR_10(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjWth_RR_10(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjWth_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjWth_RR_10(buf, 0)

/**
 * Signal RdrObjWth_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjWth_RR_10(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjWth_RR_10           0

/**
 * Signal RdrObjWth_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjWth_RR_10             0

/**
 * Signal RdrObjWth_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjWth_RR_10             50

/**
 * Signal RdrObjWth_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjWth_RR_10             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C5h_RdrObjHeading_RR_10 Signal RdrObjHeading_RR_10 of Message SRR_RR_5C5h (0x5c5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C5h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C5h_RdrObjHeading_RR_10 and \ref GET_SRR_RR_5C5h_RdrObjHeading_RR_10 instead.
 */
#define SIG_SRR_RR_5C5h_RdrObjHeading_RR_10         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C5h_RdrObjHeading_RR_10 or \ref INIT_SRR_RR_5C5h instead.
 */
#define SETUP_SRR_RR_5C5h_RdrObjHeading_RR_10       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C5h_RdrObjHeading_RR_10(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C5h_RdrObjHeading_RR_10(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C5h_RdrObjHeading_RR_10(buf) \
	SET_SRR_RR_5C5h_RdrObjHeading_RR_10(buf, 0)

/**
 * Signal RdrObjHeading_RR_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C5h_RdrObjHeading_RR_10(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_10 raw initial value.
 */
#define START_SRR_RR_5C5h_RdrObjHeading_RR_10       0

/**
 * Signal RdrObjHeading_RR_10 raw minimum value.
 */
#define MIN_SRR_RR_5C5h_RdrObjHeading_RR_10         0

/**
 * Signal RdrObjHeading_RR_10 raw maximum value.
 */
#define MAX_SRR_RR_5C5h_RdrObjHeading_RR_10         360

/**
 * Signal RdrObjHeading_RR_10 raw offset value.
 */
#define OFF_SRR_RR_5C5h_RdrObjHeading_RR_10         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjChks_RR_11 Signal RdrObjChks_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjChks_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjChks_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjChks_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjChks_RR_11            1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjChks_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjChks_RR_11          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjChks_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjChks_RR_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjChks_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjChks_RR_11(buf, 0)

/**
 * Signal RdrObjChks_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjChks_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjChks_RR_11          0

/**
 * Signal RdrObjChks_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjChks_RR_11            0

/**
 * Signal RdrObjChks_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjChks_RR_11            255

/**
 * Signal RdrObjChks_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjChks_RR_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjCntr_RR_11 Signal RdrObjCntr_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjCntr_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjCntr_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjCntr_RR_11            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjCntr_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjCntr_RR_11          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjCntr_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjCntr_RR_11(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjCntr_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjCntr_RR_11(buf, 0)

/**
 * Signal RdrObjCntr_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjCntr_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjCntr_RR_11          0

/**
 * Signal RdrObjCntr_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjCntr_RR_11            0

/**
 * Signal RdrObjCntr_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjCntr_RR_11            15

/**
 * Signal RdrObjCntr_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjCntr_RR_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjAy_RR_11 Signal RdrObjAy_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjAy_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjAy_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjAy_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjAy_RR_11              1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjAy_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjAy_RR_11            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjAy_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjAy_RR_11(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjAy_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjAy_RR_11(buf, 0)

/**
 * Signal RdrObjAy_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjAy_RR_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjAy_RR_11            0

/**
 * Signal RdrObjAy_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjAy_RR_11              0

/**
 * Signal RdrObjAy_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjAy_RR_11              128

/**
 * Signal RdrObjAy_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjAy_RR_11              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjAx_RR_11 Signal RdrObjAx_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjAx_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjAx_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjAx_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjAx_RR_11              1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjAx_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjAx_RR_11            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjAx_RR_11(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjAx_RR_11(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjAx_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjAx_RR_11(buf, 0)

/**
 * Signal RdrObjAx_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjAx_RR_11(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjAx_RR_11            0

/**
 * Signal RdrObjAx_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjAx_RR_11              0

/**
 * Signal RdrObjAx_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjAx_RR_11              512

/**
 * Signal RdrObjAx_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjAx_RR_11              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjCoast_RR_11 Signal RdrObjCoast_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjCoast_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjCoast_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjCoast_RR_11           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjCoast_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjCoast_RR_11         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjCoast_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjCoast_RR_11(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjCoast_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjCoast_RR_11(buf, 0)

/**
 * Signal RdrObjCoast_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjCoast_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjCoast_RR_11         0

/**
 * Signal RdrObjCoast_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjCoast_RR_11           0

/**
 * Signal RdrObjCoast_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjCoast_RR_11           1

/**
 * Signal RdrObjCoast_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjCoast_RR_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjConf_RR_11 Signal RdrObjConf_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjConf_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjConf_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjConf_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjConf_RR_11            1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjConf_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjConf_RR_11          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjConf_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjConf_RR_11(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjConf_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjConf_RR_11(buf, 0)

/**
 * Signal RdrObjConf_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjConf_RR_11(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjConf_RR_11          0

/**
 * Signal RdrObjConf_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjConf_RR_11            0

/**
 * Signal RdrObjConf_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjConf_RR_11            14

/**
 * Signal RdrObjConf_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjConf_RR_11            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjMtnPat_RR_11 Signal RdrObjMtnPat_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjMtnPat_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjMtnPat_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjMtnPat_RR_11          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjMtnPat_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjMtnPat_RR_11        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjMtnPat_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjMtnPat_RR_11(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjMtnPat_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjMtnPat_RR_11(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjMtnPat_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjMtnPat_RR_11        0

/**
 * Signal RdrObjMtnPat_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjMtnPat_RR_11          0

/**
 * Signal RdrObjMtnPat_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjMtnPat_RR_11          3

/**
 * Signal RdrObjMtnPat_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjMtnPat_RR_11          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjID_RR_11 Signal RdrObjID_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjID_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjID_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjID_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjID_RR_11              1, 0, 47, 7

/**
 * Signal RdrObjID_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjID_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjID_RR_11            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjID_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjID_RR_11(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjID_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjID_RR_11(buf, 0)

/**
 * Signal RdrObjID_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjID_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjID_RR_11            0

/**
 * Signal RdrObjID_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjID_RR_11              0

/**
 * Signal RdrObjID_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjID_RR_11              255

/**
 * Signal RdrObjID_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjID_RR_11              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjTyp_RR_11 Signal RdrObjTyp_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjTyp_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjTyp_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjTyp_RR_11             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjTyp_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjTyp_RR_11           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjTyp_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjTyp_RR_11(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjTyp_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjTyp_RR_11(buf, 0)

/**
 * Signal RdrObjTyp_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjTyp_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjTyp_RR_11           0

/**
 * Signal RdrObjTyp_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjTyp_RR_11             0

/**
 * Signal RdrObjTyp_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjTyp_RR_11             3

/**
 * Signal RdrObjTyp_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjTyp_RR_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C6h_RdrObjDy_RR_11 Signal RdrObjDy_RR_11 of Message SRR_RR_5C6h (0x5c6)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C6h
 * @{
 */

/**
 * Signal RdrObjDy_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C6h_RdrObjDy_RR_11 and \ref GET_SRR_RR_5C6h_RdrObjDy_RR_11 instead.
 */
#define SIG_SRR_RR_5C6h_RdrObjDy_RR_11              1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C6h_RdrObjDy_RR_11 or \ref INIT_SRR_RR_5C6h instead.
 */
#define SETUP_SRR_RR_5C6h_RdrObjDy_RR_11            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C6h_RdrObjDy_RR_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C6h_RdrObjDy_RR_11(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C6h_RdrObjDy_RR_11(buf) \
	SET_SRR_RR_5C6h_RdrObjDy_RR_11(buf, 0)

/**
 * Signal RdrObjDy_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C6h_RdrObjDy_RR_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_11 raw initial value.
 */
#define START_SRR_RR_5C6h_RdrObjDy_RR_11            0

/**
 * Signal RdrObjDy_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C6h_RdrObjDy_RR_11              0

/**
 * Signal RdrObjDy_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C6h_RdrObjDy_RR_11              2046

/**
 * Signal RdrObjDy_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C6h_RdrObjDy_RR_11              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjChks2_RR_11 Signal RdrObjChks2_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjChks2_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjChks2_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjChks2_RR_11           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjChks2_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjChks2_RR_11         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjChks2_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjChks2_RR_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjChks2_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjChks2_RR_11(buf, 0)

/**
 * Signal RdrObjChks2_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjChks2_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjChks2_RR_11         0

/**
 * Signal RdrObjChks2_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjChks2_RR_11           0

/**
 * Signal RdrObjChks2_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjChks2_RR_11           255

/**
 * Signal RdrObjChks2_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjChks2_RR_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjDx_RR_11 Signal RdrObjDx_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjDx_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjDx_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjDx_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjDx_RR_11              1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjDx_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjDx_RR_11            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjDx_RR_11(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjDx_RR_11(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjDx_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjDx_RR_11(buf, 0)

/**
 * Signal RdrObjDx_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjDx_RR_11(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjDx_RR_11            0

/**
 * Signal RdrObjDx_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjDx_RR_11              0

/**
 * Signal RdrObjDx_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjDx_RR_11              2540

/**
 * Signal RdrObjDx_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjDx_RR_11              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjTiAlv_RR_11 Signal RdrObjTiAlv_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjTiAlv_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjTiAlv_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjTiAlv_RR_11           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjTiAlv_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjTiAlv_RR_11         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjTiAlv_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjTiAlv_RR_11(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjTiAlv_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjTiAlv_RR_11(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjTiAlv_RR_11(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjTiAlv_RR_11         0

/**
 * Signal RdrObjTiAlv_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjTiAlv_RR_11           0

/**
 * Signal RdrObjTiAlv_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjTiAlv_RR_11           127

/**
 * Signal RdrObjTiAlv_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjTiAlv_RR_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjVy_RR_11 Signal RdrObjVy_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjVy_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjVy_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjVy_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjVy_RR_11              1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjVy_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjVy_RR_11            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjVy_RR_11(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjVy_RR_11(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjVy_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjVy_RR_11(buf, 0)

/**
 * Signal RdrObjVy_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjVy_RR_11(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjVy_RR_11            0

/**
 * Signal RdrObjVy_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjVy_RR_11              0

/**
 * Signal RdrObjVy_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjVy_RR_11              1023

/**
 * Signal RdrObjVy_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjVy_RR_11              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjVx_RR_11 Signal RdrObjVx_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjVx_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjVx_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjVx_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjVx_RR_11              1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjVx_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjVx_RR_11            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjVx_RR_11(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjVx_RR_11(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjVx_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjVx_RR_11(buf, 0)

/**
 * Signal RdrObjVx_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjVx_RR_11(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjVx_RR_11            0

/**
 * Signal RdrObjVx_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjVx_RR_11              0

/**
 * Signal RdrObjVx_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjVx_RR_11              1023

/**
 * Signal RdrObjVx_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjVx_RR_11              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjWth_RR_11 Signal RdrObjWth_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjWth_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjWth_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjWth_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjWth_RR_11             1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjWth_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjWth_RR_11           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjWth_RR_11(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjWth_RR_11(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjWth_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjWth_RR_11(buf, 0)

/**
 * Signal RdrObjWth_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjWth_RR_11(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjWth_RR_11           0

/**
 * Signal RdrObjWth_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjWth_RR_11             0

/**
 * Signal RdrObjWth_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjWth_RR_11             50

/**
 * Signal RdrObjWth_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjWth_RR_11             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C7h_RdrObjHeading_RR_11 Signal RdrObjHeading_RR_11 of Message SRR_RR_5C7h (0x5c7)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C7h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C7h_RdrObjHeading_RR_11 and \ref GET_SRR_RR_5C7h_RdrObjHeading_RR_11 instead.
 */
#define SIG_SRR_RR_5C7h_RdrObjHeading_RR_11         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C7h_RdrObjHeading_RR_11 or \ref INIT_SRR_RR_5C7h instead.
 */
#define SETUP_SRR_RR_5C7h_RdrObjHeading_RR_11       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C7h_RdrObjHeading_RR_11(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C7h_RdrObjHeading_RR_11(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C7h_RdrObjHeading_RR_11(buf) \
	SET_SRR_RR_5C7h_RdrObjHeading_RR_11(buf, 0)

/**
 * Signal RdrObjHeading_RR_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C7h_RdrObjHeading_RR_11(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_11 raw initial value.
 */
#define START_SRR_RR_5C7h_RdrObjHeading_RR_11       0

/**
 * Signal RdrObjHeading_RR_11 raw minimum value.
 */
#define MIN_SRR_RR_5C7h_RdrObjHeading_RR_11         0

/**
 * Signal RdrObjHeading_RR_11 raw maximum value.
 */
#define MAX_SRR_RR_5C7h_RdrObjHeading_RR_11         360

/**
 * Signal RdrObjHeading_RR_11 raw offset value.
 */
#define OFF_SRR_RR_5C7h_RdrObjHeading_RR_11         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjChks_RR_12 Signal RdrObjChks_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjChks_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjChks_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjChks_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjChks_RR_12            1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjChks_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjChks_RR_12          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjChks_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjChks_RR_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjChks_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjChks_RR_12(buf, 0)

/**
 * Signal RdrObjChks_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjChks_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjChks_RR_12          0

/**
 * Signal RdrObjChks_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjChks_RR_12            0

/**
 * Signal RdrObjChks_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjChks_RR_12            255

/**
 * Signal RdrObjChks_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjChks_RR_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjCntr_RR_12 Signal RdrObjCntr_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjCntr_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjCntr_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjCntr_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjCntr_RR_12            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjCntr_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjCntr_RR_12          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjCntr_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjCntr_RR_12(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjCntr_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjCntr_RR_12(buf, 0)

/**
 * Signal RdrObjCntr_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjCntr_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjCntr_RR_12          0

/**
 * Signal RdrObjCntr_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjCntr_RR_12            0

/**
 * Signal RdrObjCntr_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjCntr_RR_12            15

/**
 * Signal RdrObjCntr_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjCntr_RR_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjAy_RR_12 Signal RdrObjAy_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjAy_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjAy_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjAy_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjAy_RR_12              1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjAy_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjAy_RR_12            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjAy_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjAy_RR_12(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjAy_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjAy_RR_12(buf, 0)

/**
 * Signal RdrObjAy_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjAy_RR_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjAy_RR_12            0

/**
 * Signal RdrObjAy_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjAy_RR_12              0

/**
 * Signal RdrObjAy_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjAy_RR_12              128

/**
 * Signal RdrObjAy_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjAy_RR_12              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjAx_RR_12 Signal RdrObjAx_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjAx_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjAx_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjAx_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjAx_RR_12              1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjAx_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjAx_RR_12            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjAx_RR_12(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjAx_RR_12(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjAx_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjAx_RR_12(buf, 0)

/**
 * Signal RdrObjAx_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjAx_RR_12(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjAx_RR_12            0

/**
 * Signal RdrObjAx_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjAx_RR_12              0

/**
 * Signal RdrObjAx_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjAx_RR_12              512

/**
 * Signal RdrObjAx_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjAx_RR_12              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjCoast_RR_12 Signal RdrObjCoast_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjCoast_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjCoast_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjCoast_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjCoast_RR_12           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjCoast_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjCoast_RR_12         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjCoast_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjCoast_RR_12(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjCoast_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjCoast_RR_12(buf, 0)

/**
 * Signal RdrObjCoast_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjCoast_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjCoast_RR_12         0

/**
 * Signal RdrObjCoast_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjCoast_RR_12           0

/**
 * Signal RdrObjCoast_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjCoast_RR_12           1

/**
 * Signal RdrObjCoast_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjCoast_RR_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjConf_RR_12 Signal RdrObjConf_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjConf_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjConf_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjConf_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjConf_RR_12            1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjConf_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjConf_RR_12          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjConf_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjConf_RR_12(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjConf_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjConf_RR_12(buf, 0)

/**
 * Signal RdrObjConf_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjConf_RR_12(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjConf_RR_12          0

/**
 * Signal RdrObjConf_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjConf_RR_12            0

/**
 * Signal RdrObjConf_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjConf_RR_12            14

/**
 * Signal RdrObjConf_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjConf_RR_12            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjMtnPat_RR_12 Signal RdrObjMtnPat_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjMtnPat_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjMtnPat_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjMtnPat_RR_12          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjMtnPat_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjMtnPat_RR_12        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjMtnPat_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjMtnPat_RR_12(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjMtnPat_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjMtnPat_RR_12(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjMtnPat_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjMtnPat_RR_12        0

/**
 * Signal RdrObjMtnPat_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjMtnPat_RR_12          0

/**
 * Signal RdrObjMtnPat_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjMtnPat_RR_12          3

/**
 * Signal RdrObjMtnPat_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjMtnPat_RR_12          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjID_RR_12 Signal RdrObjID_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjID_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjID_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjID_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjID_RR_12              1, 0, 47, 7

/**
 * Signal RdrObjID_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjID_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjID_RR_12            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjID_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjID_RR_12(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjID_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjID_RR_12(buf, 0)

/**
 * Signal RdrObjID_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjID_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjID_RR_12            0

/**
 * Signal RdrObjID_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjID_RR_12              0

/**
 * Signal RdrObjID_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjID_RR_12              255

/**
 * Signal RdrObjID_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjID_RR_12              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjTyp_RR_12 Signal RdrObjTyp_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjTyp_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjTyp_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjTyp_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjTyp_RR_12             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjTyp_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjTyp_RR_12           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjTyp_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjTyp_RR_12(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjTyp_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjTyp_RR_12(buf, 0)

/**
 * Signal RdrObjTyp_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjTyp_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjTyp_RR_12           0

/**
 * Signal RdrObjTyp_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjTyp_RR_12             0

/**
 * Signal RdrObjTyp_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjTyp_RR_12             3

/**
 * Signal RdrObjTyp_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjTyp_RR_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C8h_RdrObjDy_RR_12 Signal RdrObjDy_RR_12 of Message SRR_RR_5C8h (0x5c8)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C8h
 * @{
 */

/**
 * Signal RdrObjDy_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C8h_RdrObjDy_RR_12 and \ref GET_SRR_RR_5C8h_RdrObjDy_RR_12 instead.
 */
#define SIG_SRR_RR_5C8h_RdrObjDy_RR_12              1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C8h_RdrObjDy_RR_12 or \ref INIT_SRR_RR_5C8h instead.
 */
#define SETUP_SRR_RR_5C8h_RdrObjDy_RR_12            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C8h_RdrObjDy_RR_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C8h_RdrObjDy_RR_12(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C8h_RdrObjDy_RR_12(buf) \
	SET_SRR_RR_5C8h_RdrObjDy_RR_12(buf, 0)

/**
 * Signal RdrObjDy_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C8h_RdrObjDy_RR_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_12 raw initial value.
 */
#define START_SRR_RR_5C8h_RdrObjDy_RR_12            0

/**
 * Signal RdrObjDy_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C8h_RdrObjDy_RR_12              0

/**
 * Signal RdrObjDy_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C8h_RdrObjDy_RR_12              2046

/**
 * Signal RdrObjDy_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C8h_RdrObjDy_RR_12              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjChks2_RR_12 Signal RdrObjChks2_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjChks2_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjChks2_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjChks2_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjChks2_RR_12           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjChks2_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjChks2_RR_12         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjChks2_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjChks2_RR_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjChks2_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjChks2_RR_12(buf, 0)

/**
 * Signal RdrObjChks2_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjChks2_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjChks2_RR_12         0

/**
 * Signal RdrObjChks2_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjChks2_RR_12           0

/**
 * Signal RdrObjChks2_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjChks2_RR_12           255

/**
 * Signal RdrObjChks2_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjChks2_RR_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjDx_RR_12 Signal RdrObjDx_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjDx_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjDx_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjDx_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjDx_RR_12              1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjDx_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjDx_RR_12            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjDx_RR_12(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjDx_RR_12(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjDx_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjDx_RR_12(buf, 0)

/**
 * Signal RdrObjDx_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjDx_RR_12(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjDx_RR_12            0

/**
 * Signal RdrObjDx_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjDx_RR_12              0

/**
 * Signal RdrObjDx_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjDx_RR_12              2540

/**
 * Signal RdrObjDx_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjDx_RR_12              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjTiAlv_RR_12 Signal RdrObjTiAlv_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjTiAlv_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjTiAlv_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjTiAlv_RR_12           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjTiAlv_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjTiAlv_RR_12         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjTiAlv_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjTiAlv_RR_12(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjTiAlv_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjTiAlv_RR_12(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjTiAlv_RR_12(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjTiAlv_RR_12         0

/**
 * Signal RdrObjTiAlv_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjTiAlv_RR_12           0

/**
 * Signal RdrObjTiAlv_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjTiAlv_RR_12           127

/**
 * Signal RdrObjTiAlv_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjTiAlv_RR_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjVy_RR_12 Signal RdrObjVy_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjVy_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjVy_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjVy_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjVy_RR_12              1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjVy_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjVy_RR_12            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjVy_RR_12(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjVy_RR_12(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjVy_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjVy_RR_12(buf, 0)

/**
 * Signal RdrObjVy_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjVy_RR_12(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjVy_RR_12            0

/**
 * Signal RdrObjVy_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjVy_RR_12              0

/**
 * Signal RdrObjVy_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjVy_RR_12              1023

/**
 * Signal RdrObjVy_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjVy_RR_12              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjVx_RR_12 Signal RdrObjVx_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjVx_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjVx_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjVx_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjVx_RR_12              1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjVx_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjVx_RR_12            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjVx_RR_12(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjVx_RR_12(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjVx_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjVx_RR_12(buf, 0)

/**
 * Signal RdrObjVx_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjVx_RR_12(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjVx_RR_12            0

/**
 * Signal RdrObjVx_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjVx_RR_12              0

/**
 * Signal RdrObjVx_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjVx_RR_12              1023

/**
 * Signal RdrObjVx_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjVx_RR_12              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjWth_RR_12 Signal RdrObjWth_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjWth_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjWth_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjWth_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjWth_RR_12             1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjWth_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjWth_RR_12           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjWth_RR_12(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjWth_RR_12(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjWth_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjWth_RR_12(buf, 0)

/**
 * Signal RdrObjWth_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjWth_RR_12(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjWth_RR_12           0

/**
 * Signal RdrObjWth_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjWth_RR_12             0

/**
 * Signal RdrObjWth_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjWth_RR_12             50

/**
 * Signal RdrObjWth_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjWth_RR_12             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5C9h_RdrObjHeading_RR_12 Signal RdrObjHeading_RR_12 of Message SRR_RR_5C9h (0x5c9)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5C9h
 * @{
 */

/**
 * Signal RdrObjHeading_RR_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5C9h_RdrObjHeading_RR_12 and \ref GET_SRR_RR_5C9h_RdrObjHeading_RR_12 instead.
 */
#define SIG_SRR_RR_5C9h_RdrObjHeading_RR_12         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5C9h_RdrObjHeading_RR_12 or \ref INIT_SRR_RR_5C9h instead.
 */
#define SETUP_SRR_RR_5C9h_RdrObjHeading_RR_12       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5C9h_RdrObjHeading_RR_12(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5C9h_RdrObjHeading_RR_12(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5C9h_RdrObjHeading_RR_12(buf) \
	SET_SRR_RR_5C9h_RdrObjHeading_RR_12(buf, 0)

/**
 * Signal RdrObjHeading_RR_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5C9h_RdrObjHeading_RR_12(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_12 raw initial value.
 */
#define START_SRR_RR_5C9h_RdrObjHeading_RR_12       0

/**
 * Signal RdrObjHeading_RR_12 raw minimum value.
 */
#define MIN_SRR_RR_5C9h_RdrObjHeading_RR_12         0

/**
 * Signal RdrObjHeading_RR_12 raw maximum value.
 */
#define MAX_SRR_RR_5C9h_RdrObjHeading_RR_12         360

/**
 * Signal RdrObjHeading_RR_12 raw offset value.
 */
#define OFF_SRR_RR_5C9h_RdrObjHeading_RR_12         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjChks_RR_13 Signal RdrObjChks_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjChks_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjChks_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjChks_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjChks_RR_13            1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjChks_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjChks_RR_13          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjChks_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjChks_RR_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjChks_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjChks_RR_13(buf, 0)

/**
 * Signal RdrObjChks_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjChks_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjChks_RR_13          0

/**
 * Signal RdrObjChks_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjChks_RR_13            0

/**
 * Signal RdrObjChks_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjChks_RR_13            255

/**
 * Signal RdrObjChks_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjChks_RR_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjCntr_RR_13 Signal RdrObjCntr_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjCntr_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjCntr_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjCntr_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjCntr_RR_13            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjCntr_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjCntr_RR_13          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjCntr_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjCntr_RR_13(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjCntr_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjCntr_RR_13(buf, 0)

/**
 * Signal RdrObjCntr_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjCntr_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjCntr_RR_13          0

/**
 * Signal RdrObjCntr_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjCntr_RR_13            0

/**
 * Signal RdrObjCntr_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjCntr_RR_13            15

/**
 * Signal RdrObjCntr_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjCntr_RR_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjAy_RR_13 Signal RdrObjAy_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjAy_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjAy_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjAy_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjAy_RR_13              1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjAy_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjAy_RR_13            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjAy_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjAy_RR_13(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjAy_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjAy_RR_13(buf, 0)

/**
 * Signal RdrObjAy_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjAy_RR_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjAy_RR_13            0

/**
 * Signal RdrObjAy_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjAy_RR_13              0

/**
 * Signal RdrObjAy_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjAy_RR_13              128

/**
 * Signal RdrObjAy_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjAy_RR_13              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjAx_RR_13 Signal RdrObjAx_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjAx_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjAx_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjAx_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjAx_RR_13              1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjAx_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjAx_RR_13            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjAx_RR_13(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjAx_RR_13(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjAx_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjAx_RR_13(buf, 0)

/**
 * Signal RdrObjAx_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjAx_RR_13(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjAx_RR_13            0

/**
 * Signal RdrObjAx_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjAx_RR_13              0

/**
 * Signal RdrObjAx_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjAx_RR_13              512

/**
 * Signal RdrObjAx_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjAx_RR_13              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjCoast_RR_13 Signal RdrObjCoast_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjCoast_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjCoast_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjCoast_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjCoast_RR_13           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjCoast_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjCoast_RR_13         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjCoast_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjCoast_RR_13(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjCoast_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjCoast_RR_13(buf, 0)

/**
 * Signal RdrObjCoast_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjCoast_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjCoast_RR_13         0

/**
 * Signal RdrObjCoast_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjCoast_RR_13           0

/**
 * Signal RdrObjCoast_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjCoast_RR_13           1

/**
 * Signal RdrObjCoast_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjCoast_RR_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjConf_RR_13 Signal RdrObjConf_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjConf_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjConf_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjConf_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjConf_RR_13            1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjConf_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjConf_RR_13          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjConf_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjConf_RR_13(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjConf_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjConf_RR_13(buf, 0)

/**
 * Signal RdrObjConf_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjConf_RR_13(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjConf_RR_13          0

/**
 * Signal RdrObjConf_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjConf_RR_13            0

/**
 * Signal RdrObjConf_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjConf_RR_13            14

/**
 * Signal RdrObjConf_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjConf_RR_13            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjMtnPat_RR_13 Signal RdrObjMtnPat_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjMtnPat_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjMtnPat_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjMtnPat_RR_13          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjMtnPat_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjMtnPat_RR_13        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjMtnPat_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjMtnPat_RR_13(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjMtnPat_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjMtnPat_RR_13(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjMtnPat_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjMtnPat_RR_13        0

/**
 * Signal RdrObjMtnPat_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjMtnPat_RR_13          0

/**
 * Signal RdrObjMtnPat_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjMtnPat_RR_13          3

/**
 * Signal RdrObjMtnPat_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjMtnPat_RR_13          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjID_RR_13 Signal RdrObjID_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjID_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjID_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjID_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjID_RR_13              1, 0, 47, 7

/**
 * Signal RdrObjID_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjID_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjID_RR_13            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjID_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjID_RR_13(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjID_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjID_RR_13(buf, 0)

/**
 * Signal RdrObjID_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjID_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjID_RR_13            0

/**
 * Signal RdrObjID_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjID_RR_13              0

/**
 * Signal RdrObjID_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjID_RR_13              255

/**
 * Signal RdrObjID_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjID_RR_13              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjTyp_RR_13 Signal RdrObjTyp_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjTyp_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjTyp_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjTyp_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjTyp_RR_13             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjTyp_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjTyp_RR_13           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjTyp_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjTyp_RR_13(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjTyp_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjTyp_RR_13(buf, 0)

/**
 * Signal RdrObjTyp_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjTyp_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjTyp_RR_13           0

/**
 * Signal RdrObjTyp_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjTyp_RR_13             0

/**
 * Signal RdrObjTyp_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjTyp_RR_13             3

/**
 * Signal RdrObjTyp_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjTyp_RR_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CAh_RdrObjDy_RR_13 Signal RdrObjDy_RR_13 of Message SRR_RR_5CAh (0x5ca)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CAh
 * @{
 */

/**
 * Signal RdrObjDy_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CAh_RdrObjDy_RR_13 and \ref GET_SRR_RR_5CAh_RdrObjDy_RR_13 instead.
 */
#define SIG_SRR_RR_5CAh_RdrObjDy_RR_13              1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CAh_RdrObjDy_RR_13 or \ref INIT_SRR_RR_5CAh instead.
 */
#define SETUP_SRR_RR_5CAh_RdrObjDy_RR_13            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CAh_RdrObjDy_RR_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CAh_RdrObjDy_RR_13(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CAh_RdrObjDy_RR_13(buf) \
	SET_SRR_RR_5CAh_RdrObjDy_RR_13(buf, 0)

/**
 * Signal RdrObjDy_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CAh_RdrObjDy_RR_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_13 raw initial value.
 */
#define START_SRR_RR_5CAh_RdrObjDy_RR_13            0

/**
 * Signal RdrObjDy_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CAh_RdrObjDy_RR_13              0

/**
 * Signal RdrObjDy_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CAh_RdrObjDy_RR_13              2046

/**
 * Signal RdrObjDy_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CAh_RdrObjDy_RR_13              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjChks2_RR_13 Signal RdrObjChks2_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjChks2_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjChks2_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjChks2_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjChks2_RR_13           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjChks2_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjChks2_RR_13         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjChks2_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjChks2_RR_13(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjChks2_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjChks2_RR_13(buf, 0)

/**
 * Signal RdrObjChks2_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjChks2_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjChks2_RR_13         0

/**
 * Signal RdrObjChks2_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjChks2_RR_13           0

/**
 * Signal RdrObjChks2_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjChks2_RR_13           255

/**
 * Signal RdrObjChks2_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjChks2_RR_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjDx_RR_13 Signal RdrObjDx_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjDx_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjDx_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjDx_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjDx_RR_13              1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjDx_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjDx_RR_13            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjDx_RR_13(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjDx_RR_13(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjDx_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjDx_RR_13(buf, 0)

/**
 * Signal RdrObjDx_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjDx_RR_13(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjDx_RR_13            0

/**
 * Signal RdrObjDx_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjDx_RR_13              0

/**
 * Signal RdrObjDx_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjDx_RR_13              2540

/**
 * Signal RdrObjDx_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjDx_RR_13              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjTiAlv_RR_13 Signal RdrObjTiAlv_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjTiAlv_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjTiAlv_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjTiAlv_RR_13           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjTiAlv_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjTiAlv_RR_13         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjTiAlv_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjTiAlv_RR_13(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjTiAlv_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjTiAlv_RR_13(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjTiAlv_RR_13(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjTiAlv_RR_13         0

/**
 * Signal RdrObjTiAlv_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjTiAlv_RR_13           0

/**
 * Signal RdrObjTiAlv_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjTiAlv_RR_13           127

/**
 * Signal RdrObjTiAlv_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjTiAlv_RR_13           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjVy_RR_13 Signal RdrObjVy_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjVy_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjVy_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjVy_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjVy_RR_13              1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjVy_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjVy_RR_13            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjVy_RR_13(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjVy_RR_13(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjVy_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjVy_RR_13(buf, 0)

/**
 * Signal RdrObjVy_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjVy_RR_13(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjVy_RR_13            0

/**
 * Signal RdrObjVy_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjVy_RR_13              0

/**
 * Signal RdrObjVy_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjVy_RR_13              1023

/**
 * Signal RdrObjVy_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjVy_RR_13              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjVx_RR_13 Signal RdrObjVx_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjVx_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjVx_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjVx_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjVx_RR_13              1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjVx_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjVx_RR_13            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjVx_RR_13(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjVx_RR_13(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjVx_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjVx_RR_13(buf, 0)

/**
 * Signal RdrObjVx_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjVx_RR_13(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjVx_RR_13            0

/**
 * Signal RdrObjVx_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjVx_RR_13              0

/**
 * Signal RdrObjVx_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjVx_RR_13              1023

/**
 * Signal RdrObjVx_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjVx_RR_13              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjWth_RR_13 Signal RdrObjWth_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjWth_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjWth_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjWth_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjWth_RR_13             1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjWth_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjWth_RR_13           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjWth_RR_13(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjWth_RR_13(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjWth_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjWth_RR_13(buf, 0)

/**
 * Signal RdrObjWth_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjWth_RR_13(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjWth_RR_13           0

/**
 * Signal RdrObjWth_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjWth_RR_13             0

/**
 * Signal RdrObjWth_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjWth_RR_13             50

/**
 * Signal RdrObjWth_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjWth_RR_13             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CBh_RdrObjHeading_RR_13 Signal RdrObjHeading_RR_13 of Message SRR_RR_5CBh (0x5cb)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CBh
 * @{
 */

/**
 * Signal RdrObjHeading_RR_13 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CBh_RdrObjHeading_RR_13 and \ref GET_SRR_RR_5CBh_RdrObjHeading_RR_13 instead.
 */
#define SIG_SRR_RR_5CBh_RdrObjHeading_RR_13         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_13 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CBh_RdrObjHeading_RR_13 or \ref INIT_SRR_RR_5CBh instead.
 */
#define SETUP_SRR_RR_5CBh_RdrObjHeading_RR_13       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_13 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CBh_RdrObjHeading_RR_13(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_13 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CBh_RdrObjHeading_RR_13(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_13 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CBh_RdrObjHeading_RR_13(buf) \
	SET_SRR_RR_5CBh_RdrObjHeading_RR_13(buf, 0)

/**
 * Signal RdrObjHeading_RR_13 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CBh_RdrObjHeading_RR_13(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_13 raw initial value.
 */
#define START_SRR_RR_5CBh_RdrObjHeading_RR_13       0

/**
 * Signal RdrObjHeading_RR_13 raw minimum value.
 */
#define MIN_SRR_RR_5CBh_RdrObjHeading_RR_13         0

/**
 * Signal RdrObjHeading_RR_13 raw maximum value.
 */
#define MAX_SRR_RR_5CBh_RdrObjHeading_RR_13         360

/**
 * Signal RdrObjHeading_RR_13 raw offset value.
 */
#define OFF_SRR_RR_5CBh_RdrObjHeading_RR_13         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjChks_RR_14 Signal RdrObjChks_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjChks_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjChks_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjChks_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjChks_RR_14            1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjChks_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjChks_RR_14          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjChks_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjChks_RR_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjChks_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjChks_RR_14(buf, 0)

/**
 * Signal RdrObjChks_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjChks_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjChks_RR_14          0

/**
 * Signal RdrObjChks_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjChks_RR_14            0

/**
 * Signal RdrObjChks_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjChks_RR_14            255

/**
 * Signal RdrObjChks_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjChks_RR_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjCntr_RR_14 Signal RdrObjCntr_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjCntr_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjCntr_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjCntr_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjCntr_RR_14            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjCntr_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjCntr_RR_14          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjCntr_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjCntr_RR_14(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjCntr_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjCntr_RR_14(buf, 0)

/**
 * Signal RdrObjCntr_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjCntr_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjCntr_RR_14          0

/**
 * Signal RdrObjCntr_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjCntr_RR_14            0

/**
 * Signal RdrObjCntr_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjCntr_RR_14            15

/**
 * Signal RdrObjCntr_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjCntr_RR_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjAy_RR_14 Signal RdrObjAy_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjAy_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjAy_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjAy_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjAy_RR_14              1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjAy_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjAy_RR_14            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjAy_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjAy_RR_14(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjAy_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjAy_RR_14(buf, 0)

/**
 * Signal RdrObjAy_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjAy_RR_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjAy_RR_14            0

/**
 * Signal RdrObjAy_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjAy_RR_14              0

/**
 * Signal RdrObjAy_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjAy_RR_14              128

/**
 * Signal RdrObjAy_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjAy_RR_14              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjAx_RR_14 Signal RdrObjAx_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjAx_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjAx_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjAx_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjAx_RR_14              1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjAx_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjAx_RR_14            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjAx_RR_14(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjAx_RR_14(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjAx_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjAx_RR_14(buf, 0)

/**
 * Signal RdrObjAx_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjAx_RR_14(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjAx_RR_14            0

/**
 * Signal RdrObjAx_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjAx_RR_14              0

/**
 * Signal RdrObjAx_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjAx_RR_14              512

/**
 * Signal RdrObjAx_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjAx_RR_14              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjCoast_RR_14 Signal RdrObjCoast_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjCoast_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjCoast_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjCoast_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjCoast_RR_14           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjCoast_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjCoast_RR_14         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjCoast_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjCoast_RR_14(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjCoast_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjCoast_RR_14(buf, 0)

/**
 * Signal RdrObjCoast_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjCoast_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjCoast_RR_14         0

/**
 * Signal RdrObjCoast_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjCoast_RR_14           0

/**
 * Signal RdrObjCoast_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjCoast_RR_14           1

/**
 * Signal RdrObjCoast_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjCoast_RR_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjConf_RR_14 Signal RdrObjConf_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjConf_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjConf_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjConf_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjConf_RR_14            1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjConf_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjConf_RR_14          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjConf_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjConf_RR_14(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjConf_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjConf_RR_14(buf, 0)

/**
 * Signal RdrObjConf_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjConf_RR_14(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjConf_RR_14          0

/**
 * Signal RdrObjConf_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjConf_RR_14            0

/**
 * Signal RdrObjConf_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjConf_RR_14            14

/**
 * Signal RdrObjConf_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjConf_RR_14            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjMtnPat_RR_14 Signal RdrObjMtnPat_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjMtnPat_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjMtnPat_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjMtnPat_RR_14          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjMtnPat_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjMtnPat_RR_14        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjMtnPat_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjMtnPat_RR_14(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjMtnPat_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjMtnPat_RR_14(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjMtnPat_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjMtnPat_RR_14        0

/**
 * Signal RdrObjMtnPat_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjMtnPat_RR_14          0

/**
 * Signal RdrObjMtnPat_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjMtnPat_RR_14          3

/**
 * Signal RdrObjMtnPat_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjMtnPat_RR_14          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjID_RR_14 Signal RdrObjID_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjID_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjID_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjID_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjID_RR_14              1, 0, 47, 7

/**
 * Signal RdrObjID_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjID_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjID_RR_14            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjID_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjID_RR_14(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjID_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjID_RR_14(buf, 0)

/**
 * Signal RdrObjID_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjID_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjID_RR_14            0

/**
 * Signal RdrObjID_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjID_RR_14              0

/**
 * Signal RdrObjID_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjID_RR_14              255

/**
 * Signal RdrObjID_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjID_RR_14              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjTyp_RR_14 Signal RdrObjTyp_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjTyp_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjTyp_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjTyp_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjTyp_RR_14             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjTyp_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjTyp_RR_14           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjTyp_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjTyp_RR_14(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjTyp_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjTyp_RR_14(buf, 0)

/**
 * Signal RdrObjTyp_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjTyp_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjTyp_RR_14           0

/**
 * Signal RdrObjTyp_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjTyp_RR_14             0

/**
 * Signal RdrObjTyp_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjTyp_RR_14             3

/**
 * Signal RdrObjTyp_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjTyp_RR_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CCh_RdrObjDy_RR_14 Signal RdrObjDy_RR_14 of Message SRR_RR_5CCh (0x5cc)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CCh
 * @{
 */

/**
 * Signal RdrObjDy_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CCh_RdrObjDy_RR_14 and \ref GET_SRR_RR_5CCh_RdrObjDy_RR_14 instead.
 */
#define SIG_SRR_RR_5CCh_RdrObjDy_RR_14              1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CCh_RdrObjDy_RR_14 or \ref INIT_SRR_RR_5CCh instead.
 */
#define SETUP_SRR_RR_5CCh_RdrObjDy_RR_14            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CCh_RdrObjDy_RR_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CCh_RdrObjDy_RR_14(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CCh_RdrObjDy_RR_14(buf) \
	SET_SRR_RR_5CCh_RdrObjDy_RR_14(buf, 0)

/**
 * Signal RdrObjDy_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CCh_RdrObjDy_RR_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_14 raw initial value.
 */
#define START_SRR_RR_5CCh_RdrObjDy_RR_14            0

/**
 * Signal RdrObjDy_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CCh_RdrObjDy_RR_14              0

/**
 * Signal RdrObjDy_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CCh_RdrObjDy_RR_14              2046

/**
 * Signal RdrObjDy_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CCh_RdrObjDy_RR_14              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjChks2_RR_14 Signal RdrObjChks2_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjChks2_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjChks2_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjChks2_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjChks2_RR_14           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjChks2_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjChks2_RR_14         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjChks2_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjChks2_RR_14(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjChks2_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjChks2_RR_14(buf, 0)

/**
 * Signal RdrObjChks2_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjChks2_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjChks2_RR_14         0

/**
 * Signal RdrObjChks2_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjChks2_RR_14           0

/**
 * Signal RdrObjChks2_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjChks2_RR_14           255

/**
 * Signal RdrObjChks2_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjChks2_RR_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjDx_RR_14 Signal RdrObjDx_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjDx_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjDx_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjDx_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjDx_RR_14              1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjDx_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjDx_RR_14            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjDx_RR_14(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjDx_RR_14(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjDx_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjDx_RR_14(buf, 0)

/**
 * Signal RdrObjDx_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjDx_RR_14(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjDx_RR_14            0

/**
 * Signal RdrObjDx_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjDx_RR_14              0

/**
 * Signal RdrObjDx_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjDx_RR_14              2540

/**
 * Signal RdrObjDx_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjDx_RR_14              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjTiAlv_RR_14 Signal RdrObjTiAlv_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjTiAlv_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjTiAlv_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjTiAlv_RR_14           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjTiAlv_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjTiAlv_RR_14         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjTiAlv_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjTiAlv_RR_14(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjTiAlv_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjTiAlv_RR_14(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjTiAlv_RR_14(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjTiAlv_RR_14         0

/**
 * Signal RdrObjTiAlv_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjTiAlv_RR_14           0

/**
 * Signal RdrObjTiAlv_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjTiAlv_RR_14           127

/**
 * Signal RdrObjTiAlv_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjTiAlv_RR_14           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjVy_RR_14 Signal RdrObjVy_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjVy_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjVy_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjVy_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjVy_RR_14              1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjVy_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjVy_RR_14            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjVy_RR_14(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjVy_RR_14(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjVy_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjVy_RR_14(buf, 0)

/**
 * Signal RdrObjVy_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjVy_RR_14(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjVy_RR_14            0

/**
 * Signal RdrObjVy_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjVy_RR_14              0

/**
 * Signal RdrObjVy_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjVy_RR_14              1023

/**
 * Signal RdrObjVy_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjVy_RR_14              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjVx_RR_14 Signal RdrObjVx_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjVx_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjVx_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjVx_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjVx_RR_14              1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjVx_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjVx_RR_14            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjVx_RR_14(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjVx_RR_14(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjVx_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjVx_RR_14(buf, 0)

/**
 * Signal RdrObjVx_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjVx_RR_14(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjVx_RR_14            0

/**
 * Signal RdrObjVx_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjVx_RR_14              0

/**
 * Signal RdrObjVx_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjVx_RR_14              1023

/**
 * Signal RdrObjVx_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjVx_RR_14              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjWth_RR_14 Signal RdrObjWth_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjWth_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjWth_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjWth_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjWth_RR_14             1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjWth_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjWth_RR_14           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjWth_RR_14(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjWth_RR_14(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjWth_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjWth_RR_14(buf, 0)

/**
 * Signal RdrObjWth_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjWth_RR_14(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjWth_RR_14           0

/**
 * Signal RdrObjWth_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjWth_RR_14             0

/**
 * Signal RdrObjWth_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjWth_RR_14             50

/**
 * Signal RdrObjWth_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjWth_RR_14             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CDh_RdrObjHeading_RR_14 Signal RdrObjHeading_RR_14 of Message SRR_RR_5CDh (0x5cd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CDh
 * @{
 */

/**
 * Signal RdrObjHeading_RR_14 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CDh_RdrObjHeading_RR_14 and \ref GET_SRR_RR_5CDh_RdrObjHeading_RR_14 instead.
 */
#define SIG_SRR_RR_5CDh_RdrObjHeading_RR_14         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_14 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CDh_RdrObjHeading_RR_14 or \ref INIT_SRR_RR_5CDh instead.
 */
#define SETUP_SRR_RR_5CDh_RdrObjHeading_RR_14       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_14 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CDh_RdrObjHeading_RR_14(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_14 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CDh_RdrObjHeading_RR_14(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_14 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CDh_RdrObjHeading_RR_14(buf) \
	SET_SRR_RR_5CDh_RdrObjHeading_RR_14(buf, 0)

/**
 * Signal RdrObjHeading_RR_14 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CDh_RdrObjHeading_RR_14(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_14 raw initial value.
 */
#define START_SRR_RR_5CDh_RdrObjHeading_RR_14       0

/**
 * Signal RdrObjHeading_RR_14 raw minimum value.
 */
#define MIN_SRR_RR_5CDh_RdrObjHeading_RR_14         0

/**
 * Signal RdrObjHeading_RR_14 raw maximum value.
 */
#define MAX_SRR_RR_5CDh_RdrObjHeading_RR_14         360

/**
 * Signal RdrObjHeading_RR_14 raw offset value.
 */
#define OFF_SRR_RR_5CDh_RdrObjHeading_RR_14         -180

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjChks_RR_15 Signal RdrObjChks_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjChks_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjChks_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjChks_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjChks_RR_15            1, 0, 7, 8

/**
 * Signal RdrObjChks_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjChks_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjChks_RR_15          1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjChks_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjChks_RR_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjChks_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjChks_RR_15(buf, 0)

/**
 * Signal RdrObjChks_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjChks_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjChks_RR_15          0

/**
 * Signal RdrObjChks_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjChks_RR_15            0

/**
 * Signal RdrObjChks_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjChks_RR_15            255

/**
 * Signal RdrObjChks_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjChks_RR_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjCntr_RR_15 Signal RdrObjCntr_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjCntr_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjCntr_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjCntr_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjCntr_RR_15            1, 0, 15, 4

/**
 * Signal RdrObjCntr_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjCntr_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjCntr_RR_15          1, 0, 15, 4, 0

/**
 * Get signal RdrObjCntr_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjCntr_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjCntr_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjCntr_RR_15(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjCntr_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjCntr_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjCntr_RR_15(buf, 0)

/**
 * Signal RdrObjCntr_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjCntr_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCntr_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjCntr_RR_15          0

/**
 * Signal RdrObjCntr_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjCntr_RR_15            0

/**
 * Signal RdrObjCntr_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjCntr_RR_15            15

/**
 * Signal RdrObjCntr_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjCntr_RR_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjAy_RR_15 Signal RdrObjAy_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjAy_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjAy_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjAy_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjAy_RR_15              1, 0, 23, 7

/**
 * Signal RdrObjAy_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjAy_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjAy_RR_15            1, 0, 23, 7, 0

/**
 * Get signal RdrObjAy_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjAy_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjAy_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjAy_RR_15(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjAy_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjAy_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjAy_RR_15(buf, 0)

/**
 * Signal RdrObjAy_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjAy_RR_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-32) / 5)

/**
 * Signal RdrObjAy_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjAy_RR_15            0

/**
 * Signal RdrObjAy_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjAy_RR_15              0

/**
 * Signal RdrObjAy_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjAy_RR_15              128

/**
 * Signal RdrObjAy_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjAy_RR_15              -64

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjAx_RR_15 Signal RdrObjAx_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjAx_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjAx_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjAx_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjAx_RR_15              1, 0, 16, 9

/**
 * Signal RdrObjAx_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjAx_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjAx_RR_15            1, 0, 16, 9, 0

/**
 * Get signal RdrObjAx_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjAx_RR_15(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x01) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjAx_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjAx_RR_15(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x01) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjAx_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjAx_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjAx_RR_15(buf, 0)

/**
 * Signal RdrObjAx_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjAx_RR_15(x, fmt) \
	((x) * fmt / 10 + fmt * 128 / (-5))

/**
 * Signal RdrObjAx_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjAx_RR_15            0

/**
 * Signal RdrObjAx_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjAx_RR_15              0

/**
 * Signal RdrObjAx_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjAx_RR_15              512

/**
 * Signal RdrObjAx_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjAx_RR_15              -256

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjCoast_RR_15 Signal RdrObjCoast_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjCoast_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjCoast_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjCoast_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjCoast_RR_15           1, 0, 39, 1

/**
 * Signal RdrObjCoast_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjCoast_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjCoast_RR_15         1, 0, 39, 1, 0

/**
 * Get signal RdrObjCoast_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjCoast_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RdrObjCoast_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjCoast_RR_15(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RdrObjCoast_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjCoast_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjCoast_RR_15(buf, 0)

/**
 * Signal RdrObjCoast_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjCoast_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjCoast_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjCoast_RR_15         0

/**
 * Signal RdrObjCoast_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjCoast_RR_15           0

/**
 * Signal RdrObjCoast_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjCoast_RR_15           1

/**
 * Signal RdrObjCoast_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjCoast_RR_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjConf_RR_15 Signal RdrObjConf_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjConf_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjConf_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjConf_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjConf_RR_15            1, 0, 38, 4

/**
 * Signal RdrObjConf_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjConf_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjConf_RR_15          1, 0, 38, 4, 0

/**
 * Get signal RdrObjConf_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjConf_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjConf_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjConf_RR_15(buf, val) { \
	buf[4] &= ~(0x0f << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 3; \
}

/**
 * Set signal RdrObjConf_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjConf_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjConf_RR_15(buf, 0)

/**
 * Signal RdrObjConf_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjConf_RR_15(x, fmt) \
	((x) * fmt * 7)

/**
 * Signal RdrObjConf_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjConf_RR_15          0

/**
 * Signal RdrObjConf_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjConf_RR_15            0

/**
 * Signal RdrObjConf_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjConf_RR_15            14

/**
 * Signal RdrObjConf_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjConf_RR_15            0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjMtnPat_RR_15 Signal RdrObjMtnPat_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjMtnPat_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjMtnPat_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjMtnPat_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjMtnPat_RR_15          1, 0, 34, 2

/**
 * Signal RdrObjMtnPat_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjMtnPat_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjMtnPat_RR_15        1, 0, 34, 2, 0

/**
 * Get signal RdrObjMtnPat_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjMtnPat_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 1) & 0x03) << 0) \
)

/**
 * Set signal RdrObjMtnPat_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjMtnPat_RR_15(buf, val) { \
	buf[4] &= ~(0x03 << 1); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal RdrObjMtnPat_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjMtnPat_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjMtnPat_RR_15(buf, 0)

/**
 * Signal RdrObjMtnPat_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjMtnPat_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjMtnPat_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjMtnPat_RR_15        0

/**
 * Signal RdrObjMtnPat_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjMtnPat_RR_15          0

/**
 * Signal RdrObjMtnPat_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjMtnPat_RR_15          3

/**
 * Signal RdrObjMtnPat_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjMtnPat_RR_15          0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjID_RR_15 Signal RdrObjID_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjID_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjID_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjID_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjID_RR_15              1, 0, 47, 7

/**
 * Signal RdrObjID_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjID_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjID_RR_15            1, 0, 47, 7, 0

/**
 * Get signal RdrObjID_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjID_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjID_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjID_RR_15(buf, val) { \
	buf[5] &= ~(0x7f << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjID_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjID_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjID_RR_15(buf, 0)

/**
 * Signal RdrObjID_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjID_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjID_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjID_RR_15            0

/**
 * Signal RdrObjID_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjID_RR_15              0

/**
 * Signal RdrObjID_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjID_RR_15              255

/**
 * Signal RdrObjID_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjID_RR_15              0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjTyp_RR_15 Signal RdrObjTyp_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjTyp_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjTyp_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjTyp_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjTyp_RR_15             1, 0, 55, 2

/**
 * Signal RdrObjTyp_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjTyp_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjTyp_RR_15           1, 0, 55, 2, 0

/**
 * Get signal RdrObjTyp_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjTyp_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RdrObjTyp_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjTyp_RR_15(buf, val) { \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RdrObjTyp_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjTyp_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjTyp_RR_15(buf, 0)

/**
 * Signal RdrObjTyp_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjTyp_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTyp_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjTyp_RR_15           0

/**
 * Signal RdrObjTyp_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjTyp_RR_15             0

/**
 * Signal RdrObjTyp_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjTyp_RR_15             3

/**
 * Signal RdrObjTyp_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjTyp_RR_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CEh_RdrObjDy_RR_15 Signal RdrObjDy_RR_15 of Message SRR_RR_5CEh (0x5ce)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CEh
 * @{
 */

/**
 * Signal RdrObjDy_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CEh_RdrObjDy_RR_15 and \ref GET_SRR_RR_5CEh_RdrObjDy_RR_15 instead.
 */
#define SIG_SRR_RR_5CEh_RdrObjDy_RR_15              1, 0, 53, 11

/**
 * Signal RdrObjDy_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CEh_RdrObjDy_RR_15 or \ref INIT_SRR_RR_5CEh instead.
 */
#define SETUP_SRR_RR_5CEh_RdrObjDy_RR_15            1, 0, 53, 11, 0

/**
 * Get signal RdrObjDy_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CEh_RdrObjDy_RR_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 5) \
	| (ubyte)(+(ubyte)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDy_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CEh_RdrObjDy_RR_15(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 5) & 0x3f) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDy_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CEh_RdrObjDy_RR_15(buf) \
	SET_SRR_RR_5CEh_RdrObjDy_RR_15(buf, 0)

/**
 * Signal RdrObjDy_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CEh_RdrObjDy_RR_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-1023) / 10)

/**
 * Signal RdrObjDy_RR_15 raw initial value.
 */
#define START_SRR_RR_5CEh_RdrObjDy_RR_15            0

/**
 * Signal RdrObjDy_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CEh_RdrObjDy_RR_15              0

/**
 * Signal RdrObjDy_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CEh_RdrObjDy_RR_15              2046

/**
 * Signal RdrObjDy_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CEh_RdrObjDy_RR_15              -1023

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjChks2_RR_15 Signal RdrObjChks2_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjChks2_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjChks2_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjChks2_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjChks2_RR_15           1, 0, 7, 8

/**
 * Signal RdrObjChks2_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjChks2_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjChks2_RR_15         1, 0, 7, 8, 0

/**
 * Get signal RdrObjChks2_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjChks2_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjChks2_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjChks2_RR_15(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjChks2_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjChks2_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjChks2_RR_15(buf, 0)

/**
 * Signal RdrObjChks2_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjChks2_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjChks2_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjChks2_RR_15         0

/**
 * Signal RdrObjChks2_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjChks2_RR_15           0

/**
 * Signal RdrObjChks2_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjChks2_RR_15           255

/**
 * Signal RdrObjChks2_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjChks2_RR_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjDx_RR_15 Signal RdrObjDx_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjDx_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjDx_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjDx_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjDx_RR_15              1, 0, 14, 12

/**
 * Signal RdrObjDx_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjDx_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjDx_RR_15            1, 0, 14, 12, 0

/**
 * Get signal RdrObjDx_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjDx_RR_15(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x7f) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal RdrObjDx_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjDx_RR_15(buf, val) { \
	buf[1] &= ~(0x7f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0x7f) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal RdrObjDx_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjDx_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjDx_RR_15(buf, 0)

/**
 * Signal RdrObjDx_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjDx_RR_15(x, fmt) \
	((x) * fmt / 10 + fmt * (-127))

/**
 * Signal RdrObjDx_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjDx_RR_15            0

/**
 * Signal RdrObjDx_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjDx_RR_15              0

/**
 * Signal RdrObjDx_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjDx_RR_15              2540

/**
 * Signal RdrObjDx_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjDx_RR_15              -1270

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjTiAlv_RR_15 Signal RdrObjTiAlv_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjTiAlv_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjTiAlv_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjTiAlv_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjTiAlv_RR_15           1, 0, 18, 7

/**
 * Signal RdrObjTiAlv_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjTiAlv_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjTiAlv_RR_15         1, 0, 18, 7, 0

/**
 * Get signal RdrObjTiAlv_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjTiAlv_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x07) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal RdrObjTiAlv_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjTiAlv_RR_15(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x07) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal RdrObjTiAlv_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjTiAlv_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjTiAlv_RR_15(buf, 0)

/**
 * Signal RdrObjTiAlv_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjTiAlv_RR_15(x, fmt) \
	((x) * fmt)

/**
 * Signal RdrObjTiAlv_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjTiAlv_RR_15         0

/**
 * Signal RdrObjTiAlv_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjTiAlv_RR_15           0

/**
 * Signal RdrObjTiAlv_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjTiAlv_RR_15           127

/**
 * Signal RdrObjTiAlv_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjTiAlv_RR_15           0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjVy_RR_15 Signal RdrObjVy_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjVy_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjVy_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjVy_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjVy_RR_15              1, 0, 27, 10

/**
 * Signal RdrObjVy_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjVy_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjVy_RR_15            1, 0, 27, 10, 0

/**
 * Get signal RdrObjVy_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjVy_RR_15(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjVy_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjVy_RR_15(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjVy_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjVy_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjVy_RR_15(buf, 0)

/**
 * Signal RdrObjVy_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjVy_RR_15(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVy_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjVy_RR_15            0

/**
 * Signal RdrObjVy_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjVy_RR_15              0

/**
 * Signal RdrObjVy_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjVy_RR_15              1023

/**
 * Signal RdrObjVy_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjVy_RR_15              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjVx_RR_15 Signal RdrObjVx_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjVx_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjVx_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjVx_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjVx_RR_15              1, 0, 33, 10

/**
 * Signal RdrObjVx_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjVx_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjVx_RR_15            1, 0, 33, 10, 0

/**
 * Get signal RdrObjVx_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjVx_RR_15(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RdrObjVx_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjVx_RR_15(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RdrObjVx_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjVx_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjVx_RR_15(buf, 0)

/**
 * Signal RdrObjVx_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjVx_RR_15(x, fmt) \
	((x) * fmt / 10 + fmt * 511 / (-10))

/**
 * Signal RdrObjVx_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjVx_RR_15            0

/**
 * Signal RdrObjVx_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjVx_RR_15              0

/**
 * Signal RdrObjVx_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjVx_RR_15              1023

/**
 * Signal RdrObjVx_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjVx_RR_15              -511

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjWth_RR_15 Signal RdrObjWth_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjWth_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjWth_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjWth_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjWth_RR_15             1, 0, 55, 6

/**
 * Signal RdrObjWth_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjWth_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjWth_RR_15           1, 0, 55, 6, 0

/**
 * Get signal RdrObjWth_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjWth_RR_15(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal RdrObjWth_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjWth_RR_15(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal RdrObjWth_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjWth_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjWth_RR_15(buf, 0)

/**
 * Signal RdrObjWth_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjWth_RR_15(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal RdrObjWth_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjWth_RR_15           0

/**
 * Signal RdrObjWth_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjWth_RR_15             0

/**
 * Signal RdrObjWth_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjWth_RR_15             50

/**
 * Signal RdrObjWth_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjWth_RR_15             0

/**
 * @}
 */

/**
 * @defgroup SIG_SRR_RR_5CFh_RdrObjHeading_RR_15 Signal RdrObjHeading_RR_15 of Message SRR_RR_5CFh (0x5cf)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SRR_RR_5CFh
 * @{
 */

/**
 * Signal RdrObjHeading_RR_15 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SRR_RR_5CFh_RdrObjHeading_RR_15 and \ref GET_SRR_RR_5CFh_RdrObjHeading_RR_15 instead.
 */
#define SIG_SRR_RR_5CFh_RdrObjHeading_RR_15         1, 0, 49, 9

/**
 * Signal RdrObjHeading_RR_15 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SRR_RR_5CFh_RdrObjHeading_RR_15 or \ref INIT_SRR_RR_5CFh instead.
 */
#define SETUP_SRR_RR_5CFh_RdrObjHeading_RR_15       1, 0, 49, 9, 0

/**
 * Get signal RdrObjHeading_RR_15 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SRR_RR_5CFh_RdrObjHeading_RR_15(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x03) << 7) \
	| (ubyte)(+(ubyte)((buf[7] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal RdrObjHeading_RR_15 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SRR_RR_5CFh_RdrObjHeading_RR_15(buf, val) { \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 7) & 0x03) << 0; \
	buf[7] &= ~(0x7f << 1); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal RdrObjHeading_RR_15 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SRR_RR_5CFh_RdrObjHeading_RR_15(buf) \
	SET_SRR_RR_5CFh_RdrObjHeading_RR_15(buf, 0)

/**
 * Signal RdrObjHeading_RR_15 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_SRR_RR_5CFh_RdrObjHeading_RR_15(x, fmt) \
	((x) * fmt + fmt * (-180))

/**
 * Signal RdrObjHeading_RR_15 raw initial value.
 */
#define START_SRR_RR_5CFh_RdrObjHeading_RR_15       0

/**
 * Signal RdrObjHeading_RR_15 raw minimum value.
 */
#define MIN_SRR_RR_5CFh_RdrObjHeading_RR_15         0

/**
 * Signal RdrObjHeading_RR_15 raw maximum value.
 */
#define MAX_SRR_RR_5CFh_RdrObjHeading_RR_15         360

/**
 * Signal RdrObjHeading_RR_15 raw offset value.
 */
#define OFF_SRR_RR_5CFh_RdrObjHeading_RR_15         -180

/**
 * @}
 */

